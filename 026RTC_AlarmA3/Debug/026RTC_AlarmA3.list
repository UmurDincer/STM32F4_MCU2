
026RTC_AlarmA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c8  080038c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d0  080038d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000180  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd2a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001993  00000000  00000000  0002bdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d0  00000000  00000000  0002dfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220f4  00000000  00000000  0002e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b110  00000000  00000000  0005088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e31  00000000  00000000  0005b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f7cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025e4  00000000  00000000  0012f820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003788 	.word	0x08003788

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003788 	.word	0x08003788

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SysTick_Handler>:

#include "main.h"
extern RTC_HandleTypeDef hrtc;

void SysTick_Handler (void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800057c:	f000 fb9a 	bl	8000cb4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000580:	f000 fd0a 	bl	8000f98 <HAL_SYSTICK_IRQHandler>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fec7 	bl	8001320 <HAL_GPIO_EXTI_IRQHandler>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <RTC_Alarm_IRQHandler+0x10>)
 800059e:	f002 f895 	bl	80026cc <HAL_RTC_AlarmIRQHandler>

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000130 	.word	0x20000130

080005ac <printmsg>:


char message[150];

void printmsg(char *format, ...)
{
 80005ac:	b40f      	push	{r0, r1, r2, r3}
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b096      	sub	sp, #88	; 0x58
 80005b2:	af00      	add	r7, sp, #0
	char str[80];

	va_list args;
	va_start(args, format);
 80005b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005b8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fcba 	bl	8002f3c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fdff 	bl	80001d0 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f107 0108 	add.w	r1, r7, #8
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <printmsg+0x48>)
 80005e0:	f002 f9a1 	bl	8002926 <HAL_UART_Transmit>
	va_end(args);
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	; 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ee:	b004      	add	sp, #16
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000198 	.word	0x20000198

080005f8 <main>:

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

	HAL_Init();
 80005fc:	f000 fb08 	bl	8000c10 <HAL_Init>

	SystemClock_Config(SYS_CLOCK_FREQ_50_MHZ);
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f000 f85d 	bl	80006c0 <SystemClock_Config>

	GPIO_Init();
 8000606:	f000 f8e3 	bl	80007d0 <GPIO_Init>

	UART2_Init();
 800060a:	f000 f9fd 	bl	8000a08 <UART2_Init>

	RTC_Init();
 800060e:	f000 f801 	bl	8000614 <RTC_Init>


	while(1);
 8000612:	e7fe      	b.n	8000612 <main+0x1a>

08000614 <RTC_Init>:

}

void RTC_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	hrtc.Instance = RTC;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <RTC_Init+0x44>)
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <RTC_Init+0x48>)
 800061c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <RTC_Init+0x44>)
 8000620:	2240      	movs	r2, #64	; 0x40
 8000622:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <RTC_Init+0x44>)
 8000626:	227f      	movs	r2, #127	; 0x7f
 8000628:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xFF;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <RTC_Init+0x44>)
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <RTC_Init+0x44>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <RTC_Init+0x44>)
 8000638:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800063c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <RTC_Init+0x44>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

	if(HAL_RTC_Init(&hrtc) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <RTC_Init+0x44>)
 8000646:	f001 fbd9 	bl	8001dfc <HAL_RTC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <RTC_Init+0x40>
	{
		Error_handler();
 8000650:	f000 fa00 	bl	8000a54 <Error_handler>
	}

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000130 	.word	0x20000130
 800065c:	40002800 	.word	0x40002800

08000660 <RTC_CalendarConfig>:

void RTC_CalendarConfig(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef RTC_Time_Init;
	RTC_DateTypeDef RTC_Date_Init;


	RTC_Time_Init.Hours = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	713b      	strb	r3, [r7, #4]
	RTC_Time_Init.Minutes = 59;
 800066a:	233b      	movs	r3, #59	; 0x3b
 800066c:	717b      	strb	r3, [r7, #5]
	RTC_Time_Init.Seconds = 45;
 800066e:	232d      	movs	r3, #45	; 0x2d
 8000670:	71bb      	strb	r3, [r7, #6]
	RTC_Time_Init.TimeFormat = RTC_HOURFORMAT12_AM;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
	if(HAL_RTC_SetTime(&hrtc, &RTC_Time_Init, RTC_FORMAT_BIN) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <RTC_CalendarConfig+0x5c>)
 800067e:	f001 fc4e 	bl	8001f1e <HAL_RTC_SetTime>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <RTC_CalendarConfig+0x2c>
	{
		Error_handler();
 8000688:	f000 f9e4 	bl	8000a54 <Error_handler>
	}

	RTC_Date_Init.Date = 6;
 800068c:	2306      	movs	r3, #6
 800068e:	70bb      	strb	r3, [r7, #2]
	RTC_Date_Init.Month = RTC_MONTH_MARCH;
 8000690:	2303      	movs	r3, #3
 8000692:	707b      	strb	r3, [r7, #1]
	RTC_Date_Init.Year = 22;
 8000694:	2316      	movs	r3, #22
 8000696:	70fb      	strb	r3, [r7, #3]
	RTC_Date_Init.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000698:	2307      	movs	r3, #7
 800069a:	703b      	strb	r3, [r7, #0]
	if(HAL_RTC_SetDate(&hrtc, &RTC_Date_Init, RTC_FORMAT_BIN) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <RTC_CalendarConfig+0x5c>)
 80006a4:	f001 fd56 	bl	8002154 <HAL_RTC_SetDate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <RTC_CalendarConfig+0x52>
	{
		Error_handler();
 80006ae:	f000 f9d1 	bl	8000a54 <Error_handler>
	}
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000130 	.word	0x20000130

080006c0 <SystemClock_Config>:
}
*/


void SystemClock_Config(uint8_t clock_freq)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;



	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80006ca:	230a      	movs	r3, #10
 80006cc:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.LSIState = RCC_LSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.HSICalibrationValue = 16;
 80006d6:	2310      	movs	r3, #16
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2300      	movs	r3, #0
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38


	switch(clock_freq)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b78      	cmp	r3, #120	; 0x78
 80006e6:	d02e      	beq.n	8000746 <SystemClock_Config+0x86>
 80006e8:	2b78      	cmp	r3, #120	; 0x78
 80006ea:	dc6b      	bgt.n	80007c4 <SystemClock_Config+0x104>
 80006ec:	2b32      	cmp	r3, #50	; 0x32
 80006ee:	d002      	beq.n	80006f6 <SystemClock_Config+0x36>
 80006f0:	2b54      	cmp	r3, #84	; 0x54
 80006f2:	d014      	beq.n	800071e <SystemClock_Config+0x5e>
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		break;

	}
	default: return;
 80006f4:	e066      	b.n	80007c4 <SystemClock_Config+0x104>
		osc_init.PLL.PLLM = 8;
 80006f6:	2308      	movs	r3, #8
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 50;
 80006fa:	2332      	movs	r3, #50	; 0x32
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
		break;
 800071c:	e028      	b.n	8000770 <SystemClock_Config+0xb0>
		osc_init.PLL.PLLM = 8;
 800071e:	2308      	movs	r3, #8
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 84;
 8000722:	2354      	movs	r3, #84	; 0x54
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 800072a:	2302      	movs	r3, #2
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
		break;
 8000744:	e014      	b.n	8000770 <SystemClock_Config+0xb0>
		osc_init.PLL.PLLM = 8;
 8000746:	2308      	movs	r3, #8
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 120;
 800074a:	2378      	movs	r3, #120	; 0x78
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61bb      	str	r3, [r7, #24]
		break;
 800076e:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fdeb 	bl	8001350 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc4>
	{
		Error_handler();
 8000780:	f000 f968 	bl	8000a54 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init,FLASH_LATENCY_2 ) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f858 	bl	8001840 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xda>
	{
		Error_handler();
 8000796:	f000 f95d 	bl	8000a54 <Error_handler>
	}
	uint32_t freq = HAL_RCC_GetHCLKFreq();
 800079a:	f001 fa19 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 800079e:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_SYSTICK_Config(freq/ 1000);
 80007a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SystemClock_Config+0x10c>)
 80007a4:	fba2 2303 	umull	r2, r3, r2, r3
 80007a8:	099b      	lsrs	r3, r3, #6
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fbcb 	bl	8000f46 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 fbd5 	bl	8000f60 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	f04f 30ff 	mov.w	r0, #4294967295
 80007be:	f000 fb98 	bl	8000ef2 <HAL_NVIC_SetPriority>
 80007c2:	e000      	b.n	80007c6 <SystemClock_Config+0x106>
	default: return;
 80007c4:	bf00      	nop

}
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	10624dd3 	.word	0x10624dd3

080007d0 <GPIO_Init>:


void GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;


	led.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
	led.Pin = GPIO_PIN_12;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	61fb      	str	r3, [r7, #28]
	led.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
	led.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <GPIO_Init+0x90>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <GPIO_Init+0x90>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <GPIO_Init+0x90>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOD, &led);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <GPIO_Init+0x94>)
 800080c:	f000 fbd2 	bl	8000fb4 <HAL_GPIO_Init>


	GPIO_InitTypeDef button;
	button.Mode = GPIO_MODE_IT_FALLING;
 8000810:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000814:	60fb      	str	r3, [r7, #12]
	button.Pin = GPIO_PIN_0;
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
	button.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <GPIO_Init+0x90>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <GPIO_Init+0x90>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <GPIO_Init+0x90>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &button);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <GPIO_Init+0x98>)
 8000842:	f000 fbb7 	bl	8000fb4 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	2006      	movs	r0, #6
 800084c:	f000 fb51 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000850:	2006      	movs	r0, #6
 8000852:	f000 fb6a 	bl	8000f2a <HAL_NVIC_EnableIRQ>


}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40020000 	.word	0x40020000

0800086c <GetDayofWeek>:

char* GetDayofWeek(uint8_t day)
{
 800086c:	b4b0      	push	{r4, r5, r7}
 800086e:	b08b      	sub	sp, #44	; 0x2c
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	char* weekday[] = {" ","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <GetDayofWeek+0x38>)
 8000878:	f107 0408 	add.w	r4, r7, #8
 800087c:	461d      	mov	r5, r3
 800087e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000882:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return weekday[day];
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000892:	4413      	add	r3, r2
 8000894:	f853 3c20 	ldr.w	r3, [r3, #-32]
}
 8000898:	4618      	mov	r0, r3
 800089a:	372c      	adds	r7, #44	; 0x2c
 800089c:	46bd      	mov	sp, r7
 800089e:	bcb0      	pop	{r4, r5, r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	080037e8 	.word	0x080037e8

080008a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008aa:	b08b      	sub	sp, #44	; 0x2c
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f000 fa1e 	bl	8000cf4 <HAL_Delay>

	RTC_CalendarConfig();
 80008b8:	f7ff fed2 	bl	8000660 <RTC_CalendarConfig>

	if(HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN) != HAL_OK)
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <HAL_GPIO_EXTI_Callback+0x84>)
 80008c6:	f001 fbe7 	bl	8002098 <HAL_RTC_GetTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		Error_handler();
 80008d0:	f000 f8c0 	bl	8000a54 <Error_handler>
	}

	if(HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <HAL_GPIO_EXTI_Callback+0x84>)
 80008de:	f001 fce0 	bl	80022a2 <HAL_RTC_GetDate>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_GPIO_EXTI_Callback+0x44>
	{
		Error_handler();
 80008e8:	f000 f8b4 	bl	8000a54 <Error_handler>
	}

	printmsg("Current Time: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,  RTC_TimeRead.Minutes, \
 80008ec:	7b3b      	ldrb	r3, [r7, #12]
 80008ee:	4619      	mov	r1, r3
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	461a      	mov	r2, r3
			RTC_TimeRead.Seconds);
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,  RTC_TimeRead.Minutes, \
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <HAL_GPIO_EXTI_Callback+0x88>)
 80008f8:	f7ff fe58 	bl	80005ac <printmsg>

	printmsg("Current Date: %02d/%02d/%2d	[%s]\r\n", RTC_DateRead.Month, RTC_DateRead.Date, \
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	461c      	mov	r4, r3
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	461d      	mov	r5, r3
			RTC_DateRead.Year, GetDayofWeek(RTC_DateRead.WeekDay));
 8000904:	7afb      	ldrb	r3, [r7, #11]
	printmsg("Current Date: %02d/%02d/%2d	[%s]\r\n", RTC_DateRead.Month, RTC_DateRead.Date, \
 8000906:	461e      	mov	r6, r3
 8000908:	7a3b      	ldrb	r3, [r7, #8]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffae 	bl	800086c <GetDayofWeek>
 8000910:	4603      	mov	r3, r0
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4633      	mov	r3, r6
 8000916:	462a      	mov	r2, r5
 8000918:	4621      	mov	r1, r4
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <HAL_GPIO_EXTI_Callback+0x8c>)
 800091c:	f7ff fe46 	bl	80005ac <printmsg>

	RTC_AlarmAConfig();
 8000920:	f000 f80a 	bl	8000938 <RTC_AlarmAConfig>

}
 8000924:	bf00      	nop
 8000926:	3724      	adds	r7, #36	; 0x24
 8000928:	46bd      	mov	sp, r7
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092c:	20000130 	.word	0x20000130
 8000930:	08003808 	.word	0x08003808
 8000934:	08003828 	.word	0x08003828

08000938 <RTC_AlarmAConfig>:


void RTC_AlarmAConfig(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef AlarmA_Set;

	memset(&AlarmA_Set, 0, sizeof(AlarmA_Set));
 800093e:	463b      	mov	r3, r7
 8000940:	2228      	movs	r2, #40	; 0x28
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fadb 	bl	8002f00 <memset>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800094a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094e:	4814      	ldr	r0, [pc, #80]	; (80009a0 <RTC_AlarmAConfig+0x68>)
 8000950:	f001 fe2e 	bl	80025b0 <HAL_RTC_DeactivateAlarm>

	AlarmA_Set.Alarm = RTC_ALARM_A;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	AlarmA_Set.AlarmTime.Hours = 8;
 800095a:	2308      	movs	r3, #8
 800095c:	703b      	strb	r3, [r7, #0]
	AlarmA_Set.AlarmTime.Minutes = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	707b      	strb	r3, [r7, #1]
	AlarmA_Set.AlarmTime.Seconds = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	70bb      	strb	r3, [r7, #2]
	AlarmA_Set.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 8000966:	2307      	movs	r3, #7
 8000968:	f887 3020 	strb.w	r3, [r7, #32]
	AlarmA_Set.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800096c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000970:	61fb      	str	r3, [r7, #28]
	AlarmA_Set.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000972:	2300      	movs	r3, #0
 8000974:	70fb      	strb	r3, [r7, #3]
	AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000976:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800097a:	61bb      	str	r3, [r7, #24]


	//12:00:15
	if(HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <RTC_AlarmAConfig+0x68>)
 8000984:	f001 fcdc 	bl	8002340 <HAL_RTC_SetAlarm_IT>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <RTC_AlarmAConfig+0x5a>
	{
		Error_handler();
 800098e:	f000 f861 	bl	8000a54 <Error_handler>
	}

	printmsg("Alarm set successfully!\r\n");
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <RTC_AlarmAConfig+0x6c>)
 8000994:	f7ff fe0a 	bl	80005ac <printmsg>
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000130 	.word	0x20000130
 80009a4:	0800384c 	.word	0x0800384c

080009a8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef RTC_TimeRead;

	HAL_RTC_GetTime(hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f001 fb6d 	bl	8002098 <HAL_RTC_GetTime>

	printmsg("Current Time: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,  RTC_TimeRead.Minutes, \
 80009be:	7b3b      	ldrb	r3, [r7, #12]
 80009c0:	4619      	mov	r1, r3
 80009c2:	7b7b      	ldrb	r3, [r7, #13]
 80009c4:	461a      	mov	r2, r3
			RTC_TimeRead.Seconds);
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,  RTC_TimeRead.Minutes, \
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_RTC_AlarmAEventCallback+0x54>)
 80009ca:	f7ff fdef 	bl	80005ac <printmsg>

	printmsg("Alarm Trigerred. \r\n");
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <HAL_RTC_AlarmAEventCallback+0x58>)
 80009d0:	f7ff fdec 	bl	80005ac <printmsg>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_RTC_AlarmAEventCallback+0x5c>)
 80009dc:	f000 fc86 	bl	80012ec <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e4:	f000 f986 	bl	8000cf4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_RTC_AlarmAEventCallback+0x5c>)
 80009f0:	f000 fc7c 	bl	80012ec <HAL_GPIO_WritePin>

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08003808 	.word	0x08003808
 8000a00:	08003868 	.word	0x08003868
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <UART2_Init>:

void UART2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <UART2_Init+0x44>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <UART2_Init+0x48>)
 8000a10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <UART2_Init+0x44>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <UART2_Init+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <UART2_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <UART2_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <UART2_Init+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <UART2_Init+0x44>)
 8000a34:	220c      	movs	r2, #12
 8000a36:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <UART2_Init+0x44>)
 8000a3a:	f001 ff27 	bl	800288c <HAL_UART_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 8000a44:	f000 f806 	bl	8000a54 <Error_handler>
	}


}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000198 	.word	0x20000198
 8000a50:	40004400 	.word	0x40004400

08000a54 <Error_handler>:

void Error_handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	while(1);
 8000a58:	e7fe      	b.n	8000a58 <Error_handler+0x4>
	...

08000a5c <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 fa3b 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x40>)
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_MspInit+0x40>)
 8000a6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a70:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	f06f 000b 	mvn.w	r0, #11
 8000a7a:	f000 fa3a 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	f06f 000a 	mvn.w	r0, #10
 8000a86:	f000 fa34 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f06f 0009 	mvn.w	r0, #9
 8000a92:	f000 fa2e 	bl	8000ef2 <HAL_NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_UART_MspInit+0x88>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000af0:	2307      	movs	r3, #7
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <HAL_UART_MspInit+0x8c>)
 8000afc:	f000 fa5a 	bl	8000fb4 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000b00:	2308      	movs	r3, #8
 8000b02:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <HAL_UART_MspInit+0x8c>)
 8000b0c:	f000 fa52 	bl	8000fb4 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b10:	2026      	movs	r0, #38	; 0x26
 8000b12:	f000 fa0a 	bl	8000f2a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	2026      	movs	r0, #38	; 0x26
 8000b1c:	f000 f9e9 	bl	8000ef2 <HAL_NVIC_SetPriority>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b092      	sub	sp, #72	; 0x48
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	RCC_OscInitTypeDef RCC_OscInitStructure;
	RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;

	//1. Turn on the LSE
	RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStructure.LSIState = RCC_LSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30

	if(HAL_RCC_OscConfig(&RCC_OscInitStructure) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fc01 	bl	8001350 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_RTC_MspInit+0x28>
	{
		Error_handler();
 8000b54:	f7ff ff7e 	bl	8000a54 <Error_handler>
	}

	//2. Select LSE as RTCCLK
	RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
	RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	617b      	str	r3, [r7, #20]
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f866 	bl	8001c38 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_RTC_MspInit+0x46>
	{
		Error_handler();
 8000b72:	f7ff ff6f 	bl	8000a54 <Error_handler>
	}

	//3. Enable the RTC clock
	__HAL_RCC_RTC_ENABLE();
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_RTC_MspInit+0x64>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

	//4. Enable RTC alarm IRQ in NVIC
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	210f      	movs	r1, #15
 8000b80:	2029      	movs	r0, #41	; 0x29
 8000b82:	f000 f9b6 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b86:	2029      	movs	r0, #41	; 0x29
 8000b88:	f000 f9cf 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 8000b8c:	bf00      	nop
 8000b8e:	3748      	adds	r7, #72	; 0x48
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	42470e3c 	.word	0x42470e3c

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 f965 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd03 	bl	80005f8 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c00:	080038d8 	.word	0x080038d8
  ldr r2, =_sbss
 8000c04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c08:	200001f0 	.word	0x200001f0

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f94f 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff ff0a 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f967 	bl	8000f46 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f92f 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	200001dc 	.word	0x200001dc

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200001dc 	.word	0x200001dc

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff3e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d106      	bne.n	8000f7c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f7a:	e005      	b.n	8000f88 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f82:	f023 0304 	bic.w	r3, r3, #4
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f9c:	f000 f802 	bl	8000fa4 <HAL_SYSTICK_Callback>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e16b      	b.n	80012a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 815a 	bne.w	80012a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80b4 	beq.w	80012a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a5b      	ldr	r2, [pc, #364]	; (80012c4 <HAL_GPIO_Init+0x310>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x328>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x330>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x310>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x334>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae90 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fab2 	bl	80008a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e264      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d075      	beq.n	800145a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	4ba3      	ldr	r3, [pc, #652]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b04      	cmp	r3, #4
 8001378:	d00c      	beq.n	8001394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	2b08      	cmp	r3, #8
 8001384:	d112      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4b9d      	ldr	r3, [pc, #628]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001392:	d10b      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d05b      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d157      	bne.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e23f      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x74>
 80013b6:	4b91      	ldr	r3, [pc, #580]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a90      	ldr	r2, [pc, #576]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b8b      	ldr	r3, [pc, #556]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a8a      	ldr	r2, [pc, #552]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013e8:	4b84      	ldr	r3, [pc, #528]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a83      	ldr	r2, [pc, #524]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a80      	ldr	r2, [pc, #512]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fc68 	bl	8000cdc <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc64 	bl	8000cdc <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e204      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xc0>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fc54 	bl	8000cdc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fc50 	bl	8000cdc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1f0      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d063      	beq.n	800152e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00b      	beq.n	800148a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d116      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e1c4      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4952      	ldr	r1, [pc, #328]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	e03a      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x2b0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fc09 	bl	8000cdc <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc05 	bl	8000cdc <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1a5      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4940      	ldr	r1, [pc, #256]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x2b0>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fbe8 	bl	8000cdc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fbe4 	bl	8000cdc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e184      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d030      	beq.n	800159c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d016      	beq.n	8001570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x2b4>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fbc8 	bl	8000cdc <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fbc4 	bl	8000cdc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e164      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x200>
 800156e:	e015      	b.n	800159c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_RCC_OscConfig+0x2b4>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbb1 	bl	8000cdc <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fbad 	bl	8000cdc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e14d      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a0 	beq.w	80016ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d121      	bne.n	800162a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb73 	bl	8000cdc <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e011      	b.n	800161e <HAL_RCC_OscConfig+0x2ce>
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	42470000 	.word	0x42470000
 8001604:	42470e80 	.word	0x42470e80
 8001608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160c:	f7ff fb66 	bl	8000cdc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e106      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x4e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x2f0>
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a80      	ldr	r2, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	e01c      	b.n	800167a <HAL_RCC_OscConfig+0x32a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001648:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a77      	ldr	r2, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x32a>
 8001662:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a74      	ldr	r2, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fb2b 	bl	8000cdc <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fb27 	bl	8000cdc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0c5      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ee      	beq.n	800168a <HAL_RCC_OscConfig+0x33a>
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb15 	bl	8000cdc <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fb11 	bl	8000cdc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0af      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a55      	ldr	r2, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 809b 	beq.w	800182a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d05c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d141      	bne.n	800178c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fae5 	bl	8000cdc <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fae1 	bl	8000cdc <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e081      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	061b      	lsls	r3, r3, #24
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff faba 	bl	8000cdc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fab6 	bl	8000cdc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e056      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x41c>
 800178a:	e04e      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff faa3 	bl	8000cdc <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fa9f 	bl	8000cdc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e03f      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x44a>
 80017b8:	e037      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e032      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d028      	beq.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d121      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d11a      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fe:	4293      	cmp	r3, r2
 8001800:	d111      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40007000 	.word	0x40007000
 8001838:	40023800 	.word	0x40023800
 800183c:	42470060 	.word	0x42470060

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0cc      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90c      	bls.n	800187c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d044      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4934      	ldr	r1, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff f9d4 	bl	8000cdc <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff f9d0 	bl	8000cdc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d20c      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f934 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	0800387c 	.word	0x0800387c
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a24:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d00d      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	f200 80bd 	bhi.w	8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3e:	e0b7      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a42:	60bb      	str	r3, [r7, #8]
       break;
 8001a44:	e0b7      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a48:	60bb      	str	r3, [r7, #8]
      break;
 8001a4a:	e0b4      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a4c:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d04d      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	ea02 0800 	and.w	r8, r2, r0
 8001a7a:	ea03 0901 	and.w	r9, r3, r1
 8001a7e:	4640      	mov	r0, r8
 8001a80:	4649      	mov	r1, r9
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	014b      	lsls	r3, r1, #5
 8001a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a90:	0142      	lsls	r2, r0, #5
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	ebb0 0008 	subs.w	r0, r0, r8
 8001a9a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aac:	0182      	lsls	r2, r0, #6
 8001aae:	1a12      	subs	r2, r2, r0
 8001ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	00d9      	lsls	r1, r3, #3
 8001abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac2:	00d0      	lsls	r0, r2, #3
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	eb12 0208 	adds.w	r2, r2, r8
 8001acc:	eb43 0309 	adc.w	r3, r3, r9
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	0259      	lsls	r1, r3, #9
 8001ada:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ade:	0250      	lsls	r0, r2, #9
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f7fe fbc6 	bl	8000280 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e04a      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	461a      	mov	r2, r3
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	ea02 0400 	and.w	r4, r2, r0
 8001b16:	ea03 0501 	and.w	r5, r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	014b      	lsls	r3, r1, #5
 8001b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b2c:	0142      	lsls	r2, r0, #5
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	1b00      	subs	r0, r0, r4
 8001b34:	eb61 0105 	sbc.w	r1, r1, r5
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	018b      	lsls	r3, r1, #6
 8001b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b46:	0182      	lsls	r2, r0, #6
 8001b48:	1a12      	subs	r2, r2, r0
 8001b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	00d9      	lsls	r1, r3, #3
 8001b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b5c:	00d0      	lsls	r0, r2, #3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	1912      	adds	r2, r2, r4
 8001b64:	eb45 0303 	adc.w	r3, r5, r3
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0299      	lsls	r1, r3, #10
 8001b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b76:	0290      	lsls	r0, r2, #10
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7fe fb7a 	bl	8000280 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4613      	mov	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	60bb      	str	r3, [r7, #8]
      break;
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bb2:	60bb      	str	r3, [r7, #8]
      break;
 8001bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	00f42400 	.word	0x00f42400
 8001bcc:	007a1200 	.word	0x007a1200

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bec:	f7ff fff0 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0a9b      	lsrs	r3, r3, #10
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	0800388c 	.word	0x0800388c

08001c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c14:	f7ff ffdc 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0b5b      	lsrs	r3, r3, #13
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	0800388c 	.word	0x0800388c

08001c38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d035      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c60:	4b62      	ldr	r3, [pc, #392]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c66:	f7ff f839 	bl	8000cdc <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c6e:	f7ff f835 	bl	8000cdc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0b0      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c80:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	019a      	lsls	r2, r3, #6
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	071b      	lsls	r3, r3, #28
 8001c98:	4955      	ldr	r1, [pc, #340]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ca6:	f7ff f819 	bl	8000cdc <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cae:	f7ff f815 	bl	8000cdc <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e090      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8083 	beq.w	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d02:	f7fe ffeb 	bl	8000cdc <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe ffe7 	bl	8000cdc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e062      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02f      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d028      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d114      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe ffb5 	bl	8000cdc <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7fe ffb1 	bl	8000cdc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e02a      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ee      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
 8001dc0:	e005      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dcc:	6093      	str	r3, [r2, #8]
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	4905      	ldr	r1, [pc, #20]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	42470068 	.word	0x42470068
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470e40 	.word	0x42470e40

08001dfc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e083      	b.n	8001f16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7f5b      	ldrb	r3, [r3, #29]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fe86 	bl	8000b30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	22ca      	movs	r2, #202	; 0xca
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2253      	movs	r2, #83	; 0x53
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fcb4 	bl	80027a8 <RTC_EnterInitMode>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e05e      	b.n	8001f16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6919      	ldr	r1, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	041a      	lsls	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fc46 	bl	8002758 <HAL_RTC_WaitForSynchro>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e018      	b.n	8001f16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f1e:	b590      	push	{r4, r7, lr}
 8001f20:	b087      	sub	sp, #28
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	7f1b      	ldrb	r3, [r3, #28]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_RTC_SetTime+0x1c>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0aa      	b.n	8002090 <HAL_RTC_SetTime+0x172>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2202      	movs	r2, #2
 8001f44:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d126      	bne.n	8001f9a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fc4b 	bl	8002800 <RTC_ByteToBcd2>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fc44 	bl	8002800 <RTC_ByteToBcd2>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f7c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fc3c 	bl	8002800 <RTC_ByteToBcd2>
 8001f88:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f8a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	78db      	ldrb	r3, [r3, #3]
 8001f92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e018      	b.n	8001fcc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fc0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	22ca      	movs	r2, #202	; 0xca
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2253      	movs	r2, #83	; 0x53
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fbe3 	bl	80027a8 <RTC_EnterInitMode>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22ff      	movs	r2, #255	; 0xff
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e047      	b.n	8002090 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800200a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800200e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800201e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	431a      	orrs	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002046:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d111      	bne.n	800207a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fb7e 	bl	8002758 <HAL_RTC_WaitForSynchro>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2204      	movs	r2, #4
 800206e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00a      	b.n	8002090 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800208e:	2300      	movs	r3, #0
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}

08002098 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80020ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11a      	bne.n	800214a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fb8f 	bl	800283c <RTC_Bcd2ToByte>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fb86 	bl	800283c <RTC_Bcd2ToByte>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	789b      	ldrb	r3, [r3, #2]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fb7d 	bl	800283c <RTC_Bcd2ToByte>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	7f1b      	ldrb	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_RTC_SetDate+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e094      	b.n	800229a <HAL_RTC_SetDate+0x146>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2202      	movs	r2, #2
 800217a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <HAL_RTC_SetDate+0x4c>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	330a      	adds	r3, #10
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d11c      	bne.n	80021e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	78db      	ldrb	r3, [r3, #3]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fb28 	bl	8002800 <RTC_ByteToBcd2>
 80021b0:	4603      	mov	r3, r0
 80021b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fb21 	bl	8002800 <RTC_ByteToBcd2>
 80021be:	4603      	mov	r3, r0
 80021c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	789b      	ldrb	r3, [r3, #2]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fb19 	bl	8002800 <RTC_ByteToBcd2>
 80021ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e00e      	b.n	80021fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80021f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	22ca      	movs	r2, #202	; 0xca
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2253      	movs	r2, #83	; 0x53
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 faca 	bl	80027a8 <RTC_EnterInitMode>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	22ff      	movs	r2, #255	; 0xff
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2204      	movs	r2, #4
 8002226:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e033      	b.n	800229a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800223c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002240:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002250:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa79 	bl	8002758 <HAL_RTC_WaitForSynchro>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	22ff      	movs	r2, #255	; 0xff
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2204      	movs	r2, #4
 8002278:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e00a      	b.n	800229a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}

080022a2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	0b5b      	lsrs	r3, r3, #13
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fa99 	bl	800283c <RTC_Bcd2ToByte>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa90 	bl	800283c <RTC_Bcd2ToByte>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa87 	bl	800283c <RTC_Bcd2ToByte>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002354:	4b93      	ldr	r3, [pc, #588]	; (80025a4 <HAL_RTC_SetAlarm_IT+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a93      	ldr	r2, [pc, #588]	; (80025a8 <HAL_RTC_SetAlarm_IT+0x268>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	7f1b      	ldrb	r3, [r3, #28]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_RTC_SetAlarm_IT+0x36>
 8002372:	2302      	movs	r3, #2
 8002374:	e111      	b.n	800259a <HAL_RTC_SetAlarm_IT+0x25a>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2202      	movs	r2, #2
 8002380:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d137      	bne.n	80023f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa2d 	bl	8002800 <RTC_ByteToBcd2>
 80023a6:	4603      	mov	r3, r0
 80023a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fa26 	bl	8002800 <RTC_ByteToBcd2>
 80023b4:	4603      	mov	r3, r0
 80023b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80023b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	789b      	ldrb	r3, [r3, #2]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fa1e 	bl	8002800 <RTC_ByteToBcd2>
 80023c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80023c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80023d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fa10 	bl	8002800 <RTC_ByteToBcd2>
 80023e0:	4603      	mov	r3, r0
 80023e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80023e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80023ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e023      	b.n	8002440 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002418:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800241e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	78db      	ldrb	r3, [r3, #3]
 8002424:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002426:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002430:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002436:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800243c:	4313      	orrs	r3, r2
 800243e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ca      	movs	r2, #202	; 0xca
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2253      	movs	r2, #83	; 0x53
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002464:	d141      	bne.n	80024ea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002474:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002486:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1e5a      	subs	r2, r3, #1
 800248c:	617a      	str	r2, [r7, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2203      	movs	r2, #3
 800249e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e077      	b.n	800259a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0e7      	beq.n	8002488 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e040      	b.n	800256c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f462 7220 	orn	r2, r2, #640	; 0x280
 800250a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	617a      	str	r2, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2203      	movs	r2, #3
 8002522:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e035      	b.n	800259a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0e7      	beq.n	800250c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800256a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_RTC_SetAlarm_IT+0x26c>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002582:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	22ff      	movs	r2, #255	; 0xff
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd90      	pop	{r4, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000
 80025a8:	10624dd3 	.word	0x10624dd3
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7f1b      	ldrb	r3, [r3, #28]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_RTC_DeactivateAlarm+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e07b      	b.n	80026c2 <HAL_RTC_DeactivateAlarm+0x112>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	22ca      	movs	r2, #202	; 0xca
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2253      	movs	r2, #83	; 0x53
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ec:	d12f      	bne.n	800264e <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800260c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800260e:	f7fe fb65 	bl	8000cdc <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002614:	e013      	b.n	800263e <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002616:	f7fe fb61 	bl	8000cdc <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002624:	d90b      	bls.n	800263e <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e041      	b.n	80026c2 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0e4      	beq.n	8002616 <HAL_RTC_DeactivateAlarm+0x66>
 800264c:	e02e      	b.n	80026ac <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800266e:	f7fe fb35 	bl	8000cdc <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002674:	e013      	b.n	800269e <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002676:	f7fe fb31 	bl	8000cdc <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002684:	d90b      	bls.n	800269e <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2203      	movs	r2, #3
 8002692:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e011      	b.n	80026c2 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0e4      	beq.n	8002676 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe f959 	bl	80009a8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002706:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8a7 	bl	8002878 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f462 7220 	orn	r2, r2, #640	; 0x280
 800273a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RTC_AlarmIRQHandler+0x88>)
 800273e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002742:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	775a      	strb	r2, [r3, #29]
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002772:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe fab2 	bl	8000cdc <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800277a:	e009      	b.n	8002790 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800277c:	f7fe faae 	bl	8000cdc <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d901      	bls.n	8002790 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e007      	b.n	80027a0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fa86 	bl	8000cdc <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027d2:	e009      	b.n	80027e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80027d4:	f7fe fa82 	bl	8000cdc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e2:	d901      	bls.n	80027e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e007      	b.n	80027f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ee      	beq.n	80027d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800280e:	e005      	b.n	800281c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	3b0a      	subs	r3, #10
 800281a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2b09      	cmp	r3, #9
 8002820:	d8f6      	bhi.n	8002810 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	b2da      	uxtb	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4313      	orrs	r3, r2
 800282e:	b2db      	uxtb	r3, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4413      	add	r3, r2
 800286a:	b2db      	uxtb	r3, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e03f      	b.n	800291e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f8f4 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f929 	bl	8002b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b08a      	sub	sp, #40	; 0x28
 800292a:	af02      	add	r7, sp, #8
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	d17c      	bne.n	8002a40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_Transmit+0x2c>
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e075      	b.n	8002a42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_UART_Transmit+0x3e>
 8002960:	2302      	movs	r3, #2
 8002962:	e06e      	b.n	8002a42 <HAL_UART_Transmit+0x11c>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	; 0x21
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe f9af 	bl	8000cdc <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Transmit+0x82>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029b8:	e02a      	b.n	8002a10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f840 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3302      	adds	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e007      	b.n	8002a02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1cf      	bne.n	80029ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2140      	movs	r1, #64	; 0x40
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f810 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e006      	b.n	8002a42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b090      	sub	sp, #64	; 0x40
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5a:	e050      	b.n	8002afe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d04c      	beq.n	8002afe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a6a:	f7fe f937 	bl	8000cdc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d241      	bcs.n	8002afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a9a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	613b      	str	r3, [r7, #16]
   return(result);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3314      	adds	r3, #20
 8002acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ace:	623a      	str	r2, [r7, #32]
 8002ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	69f9      	ldr	r1, [r7, #28]
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e00f      	b.n	8002b1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d09f      	beq.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3740      	adds	r7, #64	; 0x40
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	b09f      	sub	sp, #124	; 0x7c
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	ea40 0301 	orr.w	r3, r0, r1
 8002b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b6c:	f021 010c 	bic.w	r1, r1, #12
 8002b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b76:	430b      	orrs	r3, r1
 8002b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b86:	6999      	ldr	r1, [r3, #24]
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	ea40 0301 	orr.w	r3, r0, r1
 8002b90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4bc5      	ldr	r3, [pc, #788]	; (8002eac <UART_SetConfig+0x384>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d004      	beq.n	8002ba6 <UART_SetConfig+0x7e>
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4bc3      	ldr	r3, [pc, #780]	; (8002eb0 <UART_SetConfig+0x388>)
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d103      	bne.n	8002bae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba6:	f7ff f833 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
 8002baa:	6778      	str	r0, [r7, #116]	; 0x74
 8002bac:	e002      	b.n	8002bb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bae:	f7ff f81b 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbc:	f040 80b6 	bne.w	8002d2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc2:	461c      	mov	r4, r3
 8002bc4:	f04f 0500 	mov.w	r5, #0
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	1891      	adds	r1, r2, r2
 8002bce:	6439      	str	r1, [r7, #64]	; 0x40
 8002bd0:	415b      	adcs	r3, r3
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bd8:	1912      	adds	r2, r2, r4
 8002bda:	eb45 0303 	adc.w	r3, r5, r3
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	00d9      	lsls	r1, r3, #3
 8002be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bec:	00d0      	lsls	r0, r2, #3
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	1911      	adds	r1, r2, r4
 8002bf4:	6639      	str	r1, [r7, #96]	; 0x60
 8002bf6:	416b      	adcs	r3, r5
 8002bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	1891      	adds	r1, r2, r2
 8002c06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c08:	415b      	adcs	r3, r3
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c14:	f7fd fb34 	bl	8000280 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011e      	lsls	r6, r3, #4
 8002c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c28:	461c      	mov	r4, r3
 8002c2a:	f04f 0500 	mov.w	r5, #0
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	6339      	str	r1, [r7, #48]	; 0x30
 8002c36:	415b      	adcs	r3, r3
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c3e:	1912      	adds	r2, r2, r4
 8002c40:	eb45 0303 	adc.w	r3, r5, r3
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	00d9      	lsls	r1, r3, #3
 8002c4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c52:	00d0      	lsls	r0, r2, #3
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	1911      	adds	r1, r2, r4
 8002c5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c5c:	416b      	adcs	r3, r5
 8002c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c7a:	f7fd fb01 	bl	8000280 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002c84:	fba3 1302 	umull	r1, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2164      	movs	r1, #100	; 0x64
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca4:	441e      	add	r6, r3
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	1894      	adds	r4, r2, r2
 8002cb4:	623c      	str	r4, [r7, #32]
 8002cb6:	415b      	adcs	r3, r3
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cbe:	1812      	adds	r2, r2, r0
 8002cc0:	eb41 0303 	adc.w	r3, r1, r3
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	f04f 0500 	mov.w	r5, #0
 8002ccc:	00dd      	lsls	r5, r3, #3
 8002cce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cd2:	00d4      	lsls	r4, r2, #3
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	1814      	adds	r4, r2, r0
 8002cda:	653c      	str	r4, [r7, #80]	; 0x50
 8002cdc:	414b      	adcs	r3, r1
 8002cde:	657b      	str	r3, [r7, #84]	; 0x54
 8002ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	1891      	adds	r1, r2, r2
 8002cec:	61b9      	str	r1, [r7, #24]
 8002cee:	415b      	adcs	r3, r3
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cfa:	f7fd fac1 	bl	8000280 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002d04:	fba3 1302 	umull	r1, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	2164      	movs	r1, #100	; 0x64
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	3332      	adds	r3, #50	; 0x32
 8002d16:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 0207 	and.w	r2, r3, #7
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4432      	add	r2, r6
 8002d28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d2a:	e0b9      	b.n	8002ea0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2e:	461c      	mov	r4, r3
 8002d30:	f04f 0500 	mov.w	r5, #0
 8002d34:	4622      	mov	r2, r4
 8002d36:	462b      	mov	r3, r5
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	6139      	str	r1, [r7, #16]
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d44:	1912      	adds	r2, r2, r4
 8002d46:	eb45 0303 	adc.w	r3, r5, r3
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	00d9      	lsls	r1, r3, #3
 8002d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d58:	00d0      	lsls	r0, r2, #3
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	eb12 0804 	adds.w	r8, r2, r4
 8002d62:	eb43 0905 	adc.w	r9, r3, r5
 8002d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	008b      	lsls	r3, r1, #2
 8002d7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d7e:	0082      	lsls	r2, r0, #2
 8002d80:	4640      	mov	r0, r8
 8002d82:	4649      	mov	r1, r9
 8002d84:	f7fd fa7c 	bl	8000280 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	011e      	lsls	r6, r3, #4
 8002d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	1894      	adds	r4, r2, r2
 8002da4:	60bc      	str	r4, [r7, #8]
 8002da6:	415b      	adcs	r3, r3
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dae:	1812      	adds	r2, r2, r0
 8002db0:	eb41 0303 	adc.w	r3, r1, r3
 8002db4:	f04f 0400 	mov.w	r4, #0
 8002db8:	f04f 0500 	mov.w	r5, #0
 8002dbc:	00dd      	lsls	r5, r3, #3
 8002dbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dc2:	00d4      	lsls	r4, r2, #3
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	1814      	adds	r4, r2, r0
 8002dca:	64bc      	str	r4, [r7, #72]	; 0x48
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002de8:	0082      	lsls	r2, r0, #2
 8002dea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002dee:	f7fd fa47 	bl	8000280 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e16:	441e      	add	r6, r3
 8002e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	1894      	adds	r4, r2, r2
 8002e26:	603c      	str	r4, [r7, #0]
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e30:	1812      	adds	r2, r2, r0
 8002e32:	eb41 0303 	adc.w	r3, r1, r3
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	f04f 0500 	mov.w	r5, #0
 8002e3e:	00dd      	lsls	r5, r3, #3
 8002e40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e44:	00d4      	lsls	r4, r2, #3
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	eb12 0a00 	adds.w	sl, r2, r0
 8002e4e:	eb43 0b01 	adc.w	fp, r3, r1
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e6a:	0082      	lsls	r2, r0, #2
 8002e6c:	4650      	mov	r0, sl
 8002e6e:	4659      	mov	r1, fp
 8002e70:	f7fd fa06 	bl	8000280 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2164      	movs	r1, #100	; 0x64
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	3332      	adds	r3, #50	; 0x32
 8002e8c:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <UART_SetConfig+0x38c>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4432      	add	r2, r6
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	377c      	adds	r7, #124	; 0x7c
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	51eb851f 	.word	0x51eb851f

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4d0d      	ldr	r5, [pc, #52]	; (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	; (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	42a6      	cmp	r6, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4d0b      	ldr	r5, [pc, #44]	; (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	; (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 fc5c 	bl	8003788 <_init>
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	42a6      	cmp	r6, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee0:	4798      	blx	r3
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eea:	4798      	blx	r3
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	080038d0 	.word	0x080038d0
 8002ef4:	080038d0 	.word	0x080038d0
 8002ef8:	080038d0 	.word	0x080038d0
 8002efc:	080038d4 	.word	0x080038d4

08002f00 <memset>:
 8002f00:	4402      	add	r2, r0
 8002f02:	4603      	mov	r3, r0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d100      	bne.n	8002f0a <memset+0xa>
 8002f08:	4770      	bx	lr
 8002f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f0e:	e7f9      	b.n	8002f04 <memset+0x4>

08002f10 <_vsiprintf_r>:
 8002f10:	b500      	push	{lr}
 8002f12:	b09b      	sub	sp, #108	; 0x6c
 8002f14:	9100      	str	r1, [sp, #0]
 8002f16:	9104      	str	r1, [sp, #16]
 8002f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f1c:	9105      	str	r1, [sp, #20]
 8002f1e:	9102      	str	r1, [sp, #8]
 8002f20:	4905      	ldr	r1, [pc, #20]	; (8002f38 <_vsiprintf_r+0x28>)
 8002f22:	9103      	str	r1, [sp, #12]
 8002f24:	4669      	mov	r1, sp
 8002f26:	f000 f86f 	bl	8003008 <_svfiprintf_r>
 8002f2a:	9b00      	ldr	r3, [sp, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	b01b      	add	sp, #108	; 0x6c
 8002f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f36:	bf00      	nop
 8002f38:	ffff0208 	.word	0xffff0208

08002f3c <vsiprintf>:
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	460a      	mov	r2, r1
 8002f40:	4601      	mov	r1, r0
 8002f42:	4802      	ldr	r0, [pc, #8]	; (8002f4c <vsiprintf+0x10>)
 8002f44:	6800      	ldr	r0, [r0, #0]
 8002f46:	f7ff bfe3 	b.w	8002f10 <_vsiprintf_r>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c

08002f50 <__ssputs_r>:
 8002f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	688e      	ldr	r6, [r1, #8]
 8002f56:	429e      	cmp	r6, r3
 8002f58:	4682      	mov	sl, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	4690      	mov	r8, r2
 8002f5e:	461f      	mov	r7, r3
 8002f60:	d838      	bhi.n	8002fd4 <__ssputs_r+0x84>
 8002f62:	898a      	ldrh	r2, [r1, #12]
 8002f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f68:	d032      	beq.n	8002fd0 <__ssputs_r+0x80>
 8002f6a:	6825      	ldr	r5, [r4, #0]
 8002f6c:	6909      	ldr	r1, [r1, #16]
 8002f6e:	eba5 0901 	sub.w	r9, r5, r1
 8002f72:	6965      	ldr	r5, [r4, #20]
 8002f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	444b      	add	r3, r9
 8002f80:	106d      	asrs	r5, r5, #1
 8002f82:	429d      	cmp	r5, r3
 8002f84:	bf38      	it	cc
 8002f86:	461d      	movcc	r5, r3
 8002f88:	0553      	lsls	r3, r2, #21
 8002f8a:	d531      	bpl.n	8002ff0 <__ssputs_r+0xa0>
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f000 fb47 	bl	8003620 <_malloc_r>
 8002f92:	4606      	mov	r6, r0
 8002f94:	b950      	cbnz	r0, 8002fac <__ssputs_r+0x5c>
 8002f96:	230c      	movs	r3, #12
 8002f98:	f8ca 3000 	str.w	r3, [sl]
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fac:	6921      	ldr	r1, [r4, #16]
 8002fae:	464a      	mov	r2, r9
 8002fb0:	f000 fabe 	bl	8003530 <memcpy>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	6126      	str	r6, [r4, #16]
 8002fc2:	6165      	str	r5, [r4, #20]
 8002fc4:	444e      	add	r6, r9
 8002fc6:	eba5 0509 	sub.w	r5, r5, r9
 8002fca:	6026      	str	r6, [r4, #0]
 8002fcc:	60a5      	str	r5, [r4, #8]
 8002fce:	463e      	mov	r6, r7
 8002fd0:	42be      	cmp	r6, r7
 8002fd2:	d900      	bls.n	8002fd6 <__ssputs_r+0x86>
 8002fd4:	463e      	mov	r6, r7
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	4641      	mov	r1, r8
 8002fdc:	f000 fab6 	bl	800354c <memmove>
 8002fe0:	68a3      	ldr	r3, [r4, #8]
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	1b9b      	subs	r3, r3, r6
 8002fe6:	4432      	add	r2, r6
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	2000      	movs	r0, #0
 8002fee:	e7db      	b.n	8002fa8 <__ssputs_r+0x58>
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	f000 fb6f 	bl	80036d4 <_realloc_r>
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d1e1      	bne.n	8002fc0 <__ssputs_r+0x70>
 8002ffc:	6921      	ldr	r1, [r4, #16]
 8002ffe:	4650      	mov	r0, sl
 8003000:	f000 fabe 	bl	8003580 <_free_r>
 8003004:	e7c7      	b.n	8002f96 <__ssputs_r+0x46>
	...

08003008 <_svfiprintf_r>:
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	4698      	mov	r8, r3
 800300e:	898b      	ldrh	r3, [r1, #12]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	b09d      	sub	sp, #116	; 0x74
 8003014:	4607      	mov	r7, r0
 8003016:	460d      	mov	r5, r1
 8003018:	4614      	mov	r4, r2
 800301a:	d50e      	bpl.n	800303a <_svfiprintf_r+0x32>
 800301c:	690b      	ldr	r3, [r1, #16]
 800301e:	b963      	cbnz	r3, 800303a <_svfiprintf_r+0x32>
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	f000 fafd 	bl	8003620 <_malloc_r>
 8003026:	6028      	str	r0, [r5, #0]
 8003028:	6128      	str	r0, [r5, #16]
 800302a:	b920      	cbnz	r0, 8003036 <_svfiprintf_r+0x2e>
 800302c:	230c      	movs	r3, #12
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e0d1      	b.n	80031da <_svfiprintf_r+0x1d2>
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	616b      	str	r3, [r5, #20]
 800303a:	2300      	movs	r3, #0
 800303c:	9309      	str	r3, [sp, #36]	; 0x24
 800303e:	2320      	movs	r3, #32
 8003040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003044:	f8cd 800c 	str.w	r8, [sp, #12]
 8003048:	2330      	movs	r3, #48	; 0x30
 800304a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031f4 <_svfiprintf_r+0x1ec>
 800304e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003052:	f04f 0901 	mov.w	r9, #1
 8003056:	4623      	mov	r3, r4
 8003058:	469a      	mov	sl, r3
 800305a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800305e:	b10a      	cbz	r2, 8003064 <_svfiprintf_r+0x5c>
 8003060:	2a25      	cmp	r2, #37	; 0x25
 8003062:	d1f9      	bne.n	8003058 <_svfiprintf_r+0x50>
 8003064:	ebba 0b04 	subs.w	fp, sl, r4
 8003068:	d00b      	beq.n	8003082 <_svfiprintf_r+0x7a>
 800306a:	465b      	mov	r3, fp
 800306c:	4622      	mov	r2, r4
 800306e:	4629      	mov	r1, r5
 8003070:	4638      	mov	r0, r7
 8003072:	f7ff ff6d 	bl	8002f50 <__ssputs_r>
 8003076:	3001      	adds	r0, #1
 8003078:	f000 80aa 	beq.w	80031d0 <_svfiprintf_r+0x1c8>
 800307c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800307e:	445a      	add	r2, fp
 8003080:	9209      	str	r2, [sp, #36]	; 0x24
 8003082:	f89a 3000 	ldrb.w	r3, [sl]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80a2 	beq.w	80031d0 <_svfiprintf_r+0x1c8>
 800308c:	2300      	movs	r3, #0
 800308e:	f04f 32ff 	mov.w	r2, #4294967295
 8003092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003096:	f10a 0a01 	add.w	sl, sl, #1
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	9307      	str	r3, [sp, #28]
 800309e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030a2:	931a      	str	r3, [sp, #104]	; 0x68
 80030a4:	4654      	mov	r4, sl
 80030a6:	2205      	movs	r2, #5
 80030a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ac:	4851      	ldr	r0, [pc, #324]	; (80031f4 <_svfiprintf_r+0x1ec>)
 80030ae:	f7fd f897 	bl	80001e0 <memchr>
 80030b2:	9a04      	ldr	r2, [sp, #16]
 80030b4:	b9d8      	cbnz	r0, 80030ee <_svfiprintf_r+0xe6>
 80030b6:	06d0      	lsls	r0, r2, #27
 80030b8:	bf44      	itt	mi
 80030ba:	2320      	movmi	r3, #32
 80030bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030c0:	0711      	lsls	r1, r2, #28
 80030c2:	bf44      	itt	mi
 80030c4:	232b      	movmi	r3, #43	; 0x2b
 80030c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ca:	f89a 3000 	ldrb.w	r3, [sl]
 80030ce:	2b2a      	cmp	r3, #42	; 0x2a
 80030d0:	d015      	beq.n	80030fe <_svfiprintf_r+0xf6>
 80030d2:	9a07      	ldr	r2, [sp, #28]
 80030d4:	4654      	mov	r4, sl
 80030d6:	2000      	movs	r0, #0
 80030d8:	f04f 0c0a 	mov.w	ip, #10
 80030dc:	4621      	mov	r1, r4
 80030de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e2:	3b30      	subs	r3, #48	; 0x30
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d94e      	bls.n	8003186 <_svfiprintf_r+0x17e>
 80030e8:	b1b0      	cbz	r0, 8003118 <_svfiprintf_r+0x110>
 80030ea:	9207      	str	r2, [sp, #28]
 80030ec:	e014      	b.n	8003118 <_svfiprintf_r+0x110>
 80030ee:	eba0 0308 	sub.w	r3, r0, r8
 80030f2:	fa09 f303 	lsl.w	r3, r9, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	9304      	str	r3, [sp, #16]
 80030fa:	46a2      	mov	sl, r4
 80030fc:	e7d2      	b.n	80030a4 <_svfiprintf_r+0x9c>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	1d19      	adds	r1, r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	9103      	str	r1, [sp, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfbb      	ittet	lt
 800310a:	425b      	neglt	r3, r3
 800310c:	f042 0202 	orrlt.w	r2, r2, #2
 8003110:	9307      	strge	r3, [sp, #28]
 8003112:	9307      	strlt	r3, [sp, #28]
 8003114:	bfb8      	it	lt
 8003116:	9204      	strlt	r2, [sp, #16]
 8003118:	7823      	ldrb	r3, [r4, #0]
 800311a:	2b2e      	cmp	r3, #46	; 0x2e
 800311c:	d10c      	bne.n	8003138 <_svfiprintf_r+0x130>
 800311e:	7863      	ldrb	r3, [r4, #1]
 8003120:	2b2a      	cmp	r3, #42	; 0x2a
 8003122:	d135      	bne.n	8003190 <_svfiprintf_r+0x188>
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	bfb8      	it	lt
 8003130:	f04f 33ff 	movlt.w	r3, #4294967295
 8003134:	3402      	adds	r4, #2
 8003136:	9305      	str	r3, [sp, #20]
 8003138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003204 <_svfiprintf_r+0x1fc>
 800313c:	7821      	ldrb	r1, [r4, #0]
 800313e:	2203      	movs	r2, #3
 8003140:	4650      	mov	r0, sl
 8003142:	f7fd f84d 	bl	80001e0 <memchr>
 8003146:	b140      	cbz	r0, 800315a <_svfiprintf_r+0x152>
 8003148:	2340      	movs	r3, #64	; 0x40
 800314a:	eba0 000a 	sub.w	r0, r0, sl
 800314e:	fa03 f000 	lsl.w	r0, r3, r0
 8003152:	9b04      	ldr	r3, [sp, #16]
 8003154:	4303      	orrs	r3, r0
 8003156:	3401      	adds	r4, #1
 8003158:	9304      	str	r3, [sp, #16]
 800315a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800315e:	4826      	ldr	r0, [pc, #152]	; (80031f8 <_svfiprintf_r+0x1f0>)
 8003160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003164:	2206      	movs	r2, #6
 8003166:	f7fd f83b 	bl	80001e0 <memchr>
 800316a:	2800      	cmp	r0, #0
 800316c:	d038      	beq.n	80031e0 <_svfiprintf_r+0x1d8>
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <_svfiprintf_r+0x1f4>)
 8003170:	bb1b      	cbnz	r3, 80031ba <_svfiprintf_r+0x1b2>
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	3307      	adds	r3, #7
 8003176:	f023 0307 	bic.w	r3, r3, #7
 800317a:	3308      	adds	r3, #8
 800317c:	9303      	str	r3, [sp, #12]
 800317e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003180:	4433      	add	r3, r6
 8003182:	9309      	str	r3, [sp, #36]	; 0x24
 8003184:	e767      	b.n	8003056 <_svfiprintf_r+0x4e>
 8003186:	fb0c 3202 	mla	r2, ip, r2, r3
 800318a:	460c      	mov	r4, r1
 800318c:	2001      	movs	r0, #1
 800318e:	e7a5      	b.n	80030dc <_svfiprintf_r+0xd4>
 8003190:	2300      	movs	r3, #0
 8003192:	3401      	adds	r4, #1
 8003194:	9305      	str	r3, [sp, #20]
 8003196:	4619      	mov	r1, r3
 8003198:	f04f 0c0a 	mov.w	ip, #10
 800319c:	4620      	mov	r0, r4
 800319e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031a2:	3a30      	subs	r2, #48	; 0x30
 80031a4:	2a09      	cmp	r2, #9
 80031a6:	d903      	bls.n	80031b0 <_svfiprintf_r+0x1a8>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0c5      	beq.n	8003138 <_svfiprintf_r+0x130>
 80031ac:	9105      	str	r1, [sp, #20]
 80031ae:	e7c3      	b.n	8003138 <_svfiprintf_r+0x130>
 80031b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80031b4:	4604      	mov	r4, r0
 80031b6:	2301      	movs	r3, #1
 80031b8:	e7f0      	b.n	800319c <_svfiprintf_r+0x194>
 80031ba:	ab03      	add	r3, sp, #12
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	462a      	mov	r2, r5
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <_svfiprintf_r+0x1f8>)
 80031c2:	a904      	add	r1, sp, #16
 80031c4:	4638      	mov	r0, r7
 80031c6:	f3af 8000 	nop.w
 80031ca:	1c42      	adds	r2, r0, #1
 80031cc:	4606      	mov	r6, r0
 80031ce:	d1d6      	bne.n	800317e <_svfiprintf_r+0x176>
 80031d0:	89ab      	ldrh	r3, [r5, #12]
 80031d2:	065b      	lsls	r3, r3, #25
 80031d4:	f53f af2c 	bmi.w	8003030 <_svfiprintf_r+0x28>
 80031d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031da:	b01d      	add	sp, #116	; 0x74
 80031dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e0:	ab03      	add	r3, sp, #12
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	462a      	mov	r2, r5
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <_svfiprintf_r+0x1f8>)
 80031e8:	a904      	add	r1, sp, #16
 80031ea:	4638      	mov	r0, r7
 80031ec:	f000 f87a 	bl	80032e4 <_printf_i>
 80031f0:	e7eb      	b.n	80031ca <_svfiprintf_r+0x1c2>
 80031f2:	bf00      	nop
 80031f4:	08003894 	.word	0x08003894
 80031f8:	0800389e 	.word	0x0800389e
 80031fc:	00000000 	.word	0x00000000
 8003200:	08002f51 	.word	0x08002f51
 8003204:	0800389a 	.word	0x0800389a

08003208 <_printf_common>:
 8003208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	4616      	mov	r6, r2
 800320e:	4699      	mov	r9, r3
 8003210:	688a      	ldr	r2, [r1, #8]
 8003212:	690b      	ldr	r3, [r1, #16]
 8003214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003218:	4293      	cmp	r3, r2
 800321a:	bfb8      	it	lt
 800321c:	4613      	movlt	r3, r2
 800321e:	6033      	str	r3, [r6, #0]
 8003220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003224:	4607      	mov	r7, r0
 8003226:	460c      	mov	r4, r1
 8003228:	b10a      	cbz	r2, 800322e <_printf_common+0x26>
 800322a:	3301      	adds	r3, #1
 800322c:	6033      	str	r3, [r6, #0]
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	0699      	lsls	r1, r3, #26
 8003232:	bf42      	ittt	mi
 8003234:	6833      	ldrmi	r3, [r6, #0]
 8003236:	3302      	addmi	r3, #2
 8003238:	6033      	strmi	r3, [r6, #0]
 800323a:	6825      	ldr	r5, [r4, #0]
 800323c:	f015 0506 	ands.w	r5, r5, #6
 8003240:	d106      	bne.n	8003250 <_printf_common+0x48>
 8003242:	f104 0a19 	add.w	sl, r4, #25
 8003246:	68e3      	ldr	r3, [r4, #12]
 8003248:	6832      	ldr	r2, [r6, #0]
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	42ab      	cmp	r3, r5
 800324e:	dc26      	bgt.n	800329e <_printf_common+0x96>
 8003250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003254:	1e13      	subs	r3, r2, #0
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	bf18      	it	ne
 800325a:	2301      	movne	r3, #1
 800325c:	0692      	lsls	r2, r2, #26
 800325e:	d42b      	bmi.n	80032b8 <_printf_common+0xb0>
 8003260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003264:	4649      	mov	r1, r9
 8003266:	4638      	mov	r0, r7
 8003268:	47c0      	blx	r8
 800326a:	3001      	adds	r0, #1
 800326c:	d01e      	beq.n	80032ac <_printf_common+0xa4>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	68e5      	ldr	r5, [r4, #12]
 8003272:	6832      	ldr	r2, [r6, #0]
 8003274:	f003 0306 	and.w	r3, r3, #6
 8003278:	2b04      	cmp	r3, #4
 800327a:	bf08      	it	eq
 800327c:	1aad      	subeq	r5, r5, r2
 800327e:	68a3      	ldr	r3, [r4, #8]
 8003280:	6922      	ldr	r2, [r4, #16]
 8003282:	bf0c      	ite	eq
 8003284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003288:	2500      	movne	r5, #0
 800328a:	4293      	cmp	r3, r2
 800328c:	bfc4      	itt	gt
 800328e:	1a9b      	subgt	r3, r3, r2
 8003290:	18ed      	addgt	r5, r5, r3
 8003292:	2600      	movs	r6, #0
 8003294:	341a      	adds	r4, #26
 8003296:	42b5      	cmp	r5, r6
 8003298:	d11a      	bne.n	80032d0 <_printf_common+0xc8>
 800329a:	2000      	movs	r0, #0
 800329c:	e008      	b.n	80032b0 <_printf_common+0xa8>
 800329e:	2301      	movs	r3, #1
 80032a0:	4652      	mov	r2, sl
 80032a2:	4649      	mov	r1, r9
 80032a4:	4638      	mov	r0, r7
 80032a6:	47c0      	blx	r8
 80032a8:	3001      	adds	r0, #1
 80032aa:	d103      	bne.n	80032b4 <_printf_common+0xac>
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b4:	3501      	adds	r5, #1
 80032b6:	e7c6      	b.n	8003246 <_printf_common+0x3e>
 80032b8:	18e1      	adds	r1, r4, r3
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	2030      	movs	r0, #48	; 0x30
 80032be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032c2:	4422      	add	r2, r4
 80032c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032cc:	3302      	adds	r3, #2
 80032ce:	e7c7      	b.n	8003260 <_printf_common+0x58>
 80032d0:	2301      	movs	r3, #1
 80032d2:	4622      	mov	r2, r4
 80032d4:	4649      	mov	r1, r9
 80032d6:	4638      	mov	r0, r7
 80032d8:	47c0      	blx	r8
 80032da:	3001      	adds	r0, #1
 80032dc:	d0e6      	beq.n	80032ac <_printf_common+0xa4>
 80032de:	3601      	adds	r6, #1
 80032e0:	e7d9      	b.n	8003296 <_printf_common+0x8e>
	...

080032e4 <_printf_i>:
 80032e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	460c      	mov	r4, r1
 80032ea:	4691      	mov	r9, r2
 80032ec:	7e27      	ldrb	r7, [r4, #24]
 80032ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032f0:	2f78      	cmp	r7, #120	; 0x78
 80032f2:	4680      	mov	r8, r0
 80032f4:	469a      	mov	sl, r3
 80032f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032fa:	d807      	bhi.n	800330c <_printf_i+0x28>
 80032fc:	2f62      	cmp	r7, #98	; 0x62
 80032fe:	d80a      	bhi.n	8003316 <_printf_i+0x32>
 8003300:	2f00      	cmp	r7, #0
 8003302:	f000 80d8 	beq.w	80034b6 <_printf_i+0x1d2>
 8003306:	2f58      	cmp	r7, #88	; 0x58
 8003308:	f000 80a3 	beq.w	8003452 <_printf_i+0x16e>
 800330c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003314:	e03a      	b.n	800338c <_printf_i+0xa8>
 8003316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800331a:	2b15      	cmp	r3, #21
 800331c:	d8f6      	bhi.n	800330c <_printf_i+0x28>
 800331e:	a001      	add	r0, pc, #4	; (adr r0, 8003324 <_printf_i+0x40>)
 8003320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003324:	0800337d 	.word	0x0800337d
 8003328:	08003391 	.word	0x08003391
 800332c:	0800330d 	.word	0x0800330d
 8003330:	0800330d 	.word	0x0800330d
 8003334:	0800330d 	.word	0x0800330d
 8003338:	0800330d 	.word	0x0800330d
 800333c:	08003391 	.word	0x08003391
 8003340:	0800330d 	.word	0x0800330d
 8003344:	0800330d 	.word	0x0800330d
 8003348:	0800330d 	.word	0x0800330d
 800334c:	0800330d 	.word	0x0800330d
 8003350:	0800349d 	.word	0x0800349d
 8003354:	080033c1 	.word	0x080033c1
 8003358:	0800347f 	.word	0x0800347f
 800335c:	0800330d 	.word	0x0800330d
 8003360:	0800330d 	.word	0x0800330d
 8003364:	080034bf 	.word	0x080034bf
 8003368:	0800330d 	.word	0x0800330d
 800336c:	080033c1 	.word	0x080033c1
 8003370:	0800330d 	.word	0x0800330d
 8003374:	0800330d 	.word	0x0800330d
 8003378:	08003487 	.word	0x08003487
 800337c:	680b      	ldr	r3, [r1, #0]
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	600a      	str	r2, [r1, #0]
 8003384:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800338c:	2301      	movs	r3, #1
 800338e:	e0a3      	b.n	80034d8 <_printf_i+0x1f4>
 8003390:	6825      	ldr	r5, [r4, #0]
 8003392:	6808      	ldr	r0, [r1, #0]
 8003394:	062e      	lsls	r6, r5, #24
 8003396:	f100 0304 	add.w	r3, r0, #4
 800339a:	d50a      	bpl.n	80033b2 <_printf_i+0xce>
 800339c:	6805      	ldr	r5, [r0, #0]
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	2d00      	cmp	r5, #0
 80033a2:	da03      	bge.n	80033ac <_printf_i+0xc8>
 80033a4:	232d      	movs	r3, #45	; 0x2d
 80033a6:	426d      	negs	r5, r5
 80033a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ac:	485e      	ldr	r0, [pc, #376]	; (8003528 <_printf_i+0x244>)
 80033ae:	230a      	movs	r3, #10
 80033b0:	e019      	b.n	80033e6 <_printf_i+0x102>
 80033b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033b6:	6805      	ldr	r5, [r0, #0]
 80033b8:	600b      	str	r3, [r1, #0]
 80033ba:	bf18      	it	ne
 80033bc:	b22d      	sxthne	r5, r5
 80033be:	e7ef      	b.n	80033a0 <_printf_i+0xbc>
 80033c0:	680b      	ldr	r3, [r1, #0]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	1d18      	adds	r0, r3, #4
 80033c6:	6008      	str	r0, [r1, #0]
 80033c8:	0628      	lsls	r0, r5, #24
 80033ca:	d501      	bpl.n	80033d0 <_printf_i+0xec>
 80033cc:	681d      	ldr	r5, [r3, #0]
 80033ce:	e002      	b.n	80033d6 <_printf_i+0xf2>
 80033d0:	0669      	lsls	r1, r5, #25
 80033d2:	d5fb      	bpl.n	80033cc <_printf_i+0xe8>
 80033d4:	881d      	ldrh	r5, [r3, #0]
 80033d6:	4854      	ldr	r0, [pc, #336]	; (8003528 <_printf_i+0x244>)
 80033d8:	2f6f      	cmp	r7, #111	; 0x6f
 80033da:	bf0c      	ite	eq
 80033dc:	2308      	moveq	r3, #8
 80033de:	230a      	movne	r3, #10
 80033e0:	2100      	movs	r1, #0
 80033e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033e6:	6866      	ldr	r6, [r4, #4]
 80033e8:	60a6      	str	r6, [r4, #8]
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	bfa2      	ittt	ge
 80033ee:	6821      	ldrge	r1, [r4, #0]
 80033f0:	f021 0104 	bicge.w	r1, r1, #4
 80033f4:	6021      	strge	r1, [r4, #0]
 80033f6:	b90d      	cbnz	r5, 80033fc <_printf_i+0x118>
 80033f8:	2e00      	cmp	r6, #0
 80033fa:	d04d      	beq.n	8003498 <_printf_i+0x1b4>
 80033fc:	4616      	mov	r6, r2
 80033fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003402:	fb03 5711 	mls	r7, r3, r1, r5
 8003406:	5dc7      	ldrb	r7, [r0, r7]
 8003408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800340c:	462f      	mov	r7, r5
 800340e:	42bb      	cmp	r3, r7
 8003410:	460d      	mov	r5, r1
 8003412:	d9f4      	bls.n	80033fe <_printf_i+0x11a>
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10b      	bne.n	8003430 <_printf_i+0x14c>
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	07df      	lsls	r7, r3, #31
 800341c:	d508      	bpl.n	8003430 <_printf_i+0x14c>
 800341e:	6923      	ldr	r3, [r4, #16]
 8003420:	6861      	ldr	r1, [r4, #4]
 8003422:	4299      	cmp	r1, r3
 8003424:	bfde      	ittt	le
 8003426:	2330      	movle	r3, #48	; 0x30
 8003428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800342c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003430:	1b92      	subs	r2, r2, r6
 8003432:	6122      	str	r2, [r4, #16]
 8003434:	f8cd a000 	str.w	sl, [sp]
 8003438:	464b      	mov	r3, r9
 800343a:	aa03      	add	r2, sp, #12
 800343c:	4621      	mov	r1, r4
 800343e:	4640      	mov	r0, r8
 8003440:	f7ff fee2 	bl	8003208 <_printf_common>
 8003444:	3001      	adds	r0, #1
 8003446:	d14c      	bne.n	80034e2 <_printf_i+0x1fe>
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	b004      	add	sp, #16
 800344e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003452:	4835      	ldr	r0, [pc, #212]	; (8003528 <_printf_i+0x244>)
 8003454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	680e      	ldr	r6, [r1, #0]
 800345c:	061f      	lsls	r7, r3, #24
 800345e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003462:	600e      	str	r6, [r1, #0]
 8003464:	d514      	bpl.n	8003490 <_printf_i+0x1ac>
 8003466:	07d9      	lsls	r1, r3, #31
 8003468:	bf44      	itt	mi
 800346a:	f043 0320 	orrmi.w	r3, r3, #32
 800346e:	6023      	strmi	r3, [r4, #0]
 8003470:	b91d      	cbnz	r5, 800347a <_printf_i+0x196>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f023 0320 	bic.w	r3, r3, #32
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	2310      	movs	r3, #16
 800347c:	e7b0      	b.n	80033e0 <_printf_i+0xfc>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	f043 0320 	orr.w	r3, r3, #32
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	2378      	movs	r3, #120	; 0x78
 8003488:	4828      	ldr	r0, [pc, #160]	; (800352c <_printf_i+0x248>)
 800348a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800348e:	e7e3      	b.n	8003458 <_printf_i+0x174>
 8003490:	065e      	lsls	r6, r3, #25
 8003492:	bf48      	it	mi
 8003494:	b2ad      	uxthmi	r5, r5
 8003496:	e7e6      	b.n	8003466 <_printf_i+0x182>
 8003498:	4616      	mov	r6, r2
 800349a:	e7bb      	b.n	8003414 <_printf_i+0x130>
 800349c:	680b      	ldr	r3, [r1, #0]
 800349e:	6826      	ldr	r6, [r4, #0]
 80034a0:	6960      	ldr	r0, [r4, #20]
 80034a2:	1d1d      	adds	r5, r3, #4
 80034a4:	600d      	str	r5, [r1, #0]
 80034a6:	0635      	lsls	r5, r6, #24
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	d501      	bpl.n	80034b0 <_printf_i+0x1cc>
 80034ac:	6018      	str	r0, [r3, #0]
 80034ae:	e002      	b.n	80034b6 <_printf_i+0x1d2>
 80034b0:	0671      	lsls	r1, r6, #25
 80034b2:	d5fb      	bpl.n	80034ac <_printf_i+0x1c8>
 80034b4:	8018      	strh	r0, [r3, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	6123      	str	r3, [r4, #16]
 80034ba:	4616      	mov	r6, r2
 80034bc:	e7ba      	b.n	8003434 <_printf_i+0x150>
 80034be:	680b      	ldr	r3, [r1, #0]
 80034c0:	1d1a      	adds	r2, r3, #4
 80034c2:	600a      	str	r2, [r1, #0]
 80034c4:	681e      	ldr	r6, [r3, #0]
 80034c6:	6862      	ldr	r2, [r4, #4]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4630      	mov	r0, r6
 80034cc:	f7fc fe88 	bl	80001e0 <memchr>
 80034d0:	b108      	cbz	r0, 80034d6 <_printf_i+0x1f2>
 80034d2:	1b80      	subs	r0, r0, r6
 80034d4:	6060      	str	r0, [r4, #4]
 80034d6:	6863      	ldr	r3, [r4, #4]
 80034d8:	6123      	str	r3, [r4, #16]
 80034da:	2300      	movs	r3, #0
 80034dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e0:	e7a8      	b.n	8003434 <_printf_i+0x150>
 80034e2:	6923      	ldr	r3, [r4, #16]
 80034e4:	4632      	mov	r2, r6
 80034e6:	4649      	mov	r1, r9
 80034e8:	4640      	mov	r0, r8
 80034ea:	47d0      	blx	sl
 80034ec:	3001      	adds	r0, #1
 80034ee:	d0ab      	beq.n	8003448 <_printf_i+0x164>
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	079b      	lsls	r3, r3, #30
 80034f4:	d413      	bmi.n	800351e <_printf_i+0x23a>
 80034f6:	68e0      	ldr	r0, [r4, #12]
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	4298      	cmp	r0, r3
 80034fc:	bfb8      	it	lt
 80034fe:	4618      	movlt	r0, r3
 8003500:	e7a4      	b.n	800344c <_printf_i+0x168>
 8003502:	2301      	movs	r3, #1
 8003504:	4632      	mov	r2, r6
 8003506:	4649      	mov	r1, r9
 8003508:	4640      	mov	r0, r8
 800350a:	47d0      	blx	sl
 800350c:	3001      	adds	r0, #1
 800350e:	d09b      	beq.n	8003448 <_printf_i+0x164>
 8003510:	3501      	adds	r5, #1
 8003512:	68e3      	ldr	r3, [r4, #12]
 8003514:	9903      	ldr	r1, [sp, #12]
 8003516:	1a5b      	subs	r3, r3, r1
 8003518:	42ab      	cmp	r3, r5
 800351a:	dcf2      	bgt.n	8003502 <_printf_i+0x21e>
 800351c:	e7eb      	b.n	80034f6 <_printf_i+0x212>
 800351e:	2500      	movs	r5, #0
 8003520:	f104 0619 	add.w	r6, r4, #25
 8003524:	e7f5      	b.n	8003512 <_printf_i+0x22e>
 8003526:	bf00      	nop
 8003528:	080038a5 	.word	0x080038a5
 800352c:	080038b6 	.word	0x080038b6

08003530 <memcpy>:
 8003530:	440a      	add	r2, r1
 8003532:	4291      	cmp	r1, r2
 8003534:	f100 33ff 	add.w	r3, r0, #4294967295
 8003538:	d100      	bne.n	800353c <memcpy+0xc>
 800353a:	4770      	bx	lr
 800353c:	b510      	push	{r4, lr}
 800353e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003546:	4291      	cmp	r1, r2
 8003548:	d1f9      	bne.n	800353e <memcpy+0xe>
 800354a:	bd10      	pop	{r4, pc}

0800354c <memmove>:
 800354c:	4288      	cmp	r0, r1
 800354e:	b510      	push	{r4, lr}
 8003550:	eb01 0402 	add.w	r4, r1, r2
 8003554:	d902      	bls.n	800355c <memmove+0x10>
 8003556:	4284      	cmp	r4, r0
 8003558:	4623      	mov	r3, r4
 800355a:	d807      	bhi.n	800356c <memmove+0x20>
 800355c:	1e43      	subs	r3, r0, #1
 800355e:	42a1      	cmp	r1, r4
 8003560:	d008      	beq.n	8003574 <memmove+0x28>
 8003562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800356a:	e7f8      	b.n	800355e <memmove+0x12>
 800356c:	4402      	add	r2, r0
 800356e:	4601      	mov	r1, r0
 8003570:	428a      	cmp	r2, r1
 8003572:	d100      	bne.n	8003576 <memmove+0x2a>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800357a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800357e:	e7f7      	b.n	8003570 <memmove+0x24>

08003580 <_free_r>:
 8003580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003582:	2900      	cmp	r1, #0
 8003584:	d048      	beq.n	8003618 <_free_r+0x98>
 8003586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358a:	9001      	str	r0, [sp, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f1a1 0404 	sub.w	r4, r1, #4
 8003592:	bfb8      	it	lt
 8003594:	18e4      	addlt	r4, r4, r3
 8003596:	f000 f8d3 	bl	8003740 <__malloc_lock>
 800359a:	4a20      	ldr	r2, [pc, #128]	; (800361c <_free_r+0x9c>)
 800359c:	9801      	ldr	r0, [sp, #4]
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	4615      	mov	r5, r2
 80035a2:	b933      	cbnz	r3, 80035b2 <_free_r+0x32>
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6014      	str	r4, [r2, #0]
 80035a8:	b003      	add	sp, #12
 80035aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035ae:	f000 b8cd 	b.w	800374c <__malloc_unlock>
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	d90b      	bls.n	80035ce <_free_r+0x4e>
 80035b6:	6821      	ldr	r1, [r4, #0]
 80035b8:	1862      	adds	r2, r4, r1
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bf04      	itt	eq
 80035be:	681a      	ldreq	r2, [r3, #0]
 80035c0:	685b      	ldreq	r3, [r3, #4]
 80035c2:	6063      	str	r3, [r4, #4]
 80035c4:	bf04      	itt	eq
 80035c6:	1852      	addeq	r2, r2, r1
 80035c8:	6022      	streq	r2, [r4, #0]
 80035ca:	602c      	str	r4, [r5, #0]
 80035cc:	e7ec      	b.n	80035a8 <_free_r+0x28>
 80035ce:	461a      	mov	r2, r3
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b10b      	cbz	r3, 80035d8 <_free_r+0x58>
 80035d4:	42a3      	cmp	r3, r4
 80035d6:	d9fa      	bls.n	80035ce <_free_r+0x4e>
 80035d8:	6811      	ldr	r1, [r2, #0]
 80035da:	1855      	adds	r5, r2, r1
 80035dc:	42a5      	cmp	r5, r4
 80035de:	d10b      	bne.n	80035f8 <_free_r+0x78>
 80035e0:	6824      	ldr	r4, [r4, #0]
 80035e2:	4421      	add	r1, r4
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	d1dd      	bne.n	80035a8 <_free_r+0x28>
 80035ec:	681c      	ldr	r4, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	6053      	str	r3, [r2, #4]
 80035f2:	4421      	add	r1, r4
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	e7d7      	b.n	80035a8 <_free_r+0x28>
 80035f8:	d902      	bls.n	8003600 <_free_r+0x80>
 80035fa:	230c      	movs	r3, #12
 80035fc:	6003      	str	r3, [r0, #0]
 80035fe:	e7d3      	b.n	80035a8 <_free_r+0x28>
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	1961      	adds	r1, r4, r5
 8003604:	428b      	cmp	r3, r1
 8003606:	bf04      	itt	eq
 8003608:	6819      	ldreq	r1, [r3, #0]
 800360a:	685b      	ldreq	r3, [r3, #4]
 800360c:	6063      	str	r3, [r4, #4]
 800360e:	bf04      	itt	eq
 8003610:	1949      	addeq	r1, r1, r5
 8003612:	6021      	streq	r1, [r4, #0]
 8003614:	6054      	str	r4, [r2, #4]
 8003616:	e7c7      	b.n	80035a8 <_free_r+0x28>
 8003618:	b003      	add	sp, #12
 800361a:	bd30      	pop	{r4, r5, pc}
 800361c:	2000008c 	.word	0x2000008c

08003620 <_malloc_r>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	1ccd      	adds	r5, r1, #3
 8003624:	f025 0503 	bic.w	r5, r5, #3
 8003628:	3508      	adds	r5, #8
 800362a:	2d0c      	cmp	r5, #12
 800362c:	bf38      	it	cc
 800362e:	250c      	movcc	r5, #12
 8003630:	2d00      	cmp	r5, #0
 8003632:	4606      	mov	r6, r0
 8003634:	db01      	blt.n	800363a <_malloc_r+0x1a>
 8003636:	42a9      	cmp	r1, r5
 8003638:	d903      	bls.n	8003642 <_malloc_r+0x22>
 800363a:	230c      	movs	r3, #12
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	2000      	movs	r0, #0
 8003640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003642:	f000 f87d 	bl	8003740 <__malloc_lock>
 8003646:	4921      	ldr	r1, [pc, #132]	; (80036cc <_malloc_r+0xac>)
 8003648:	680a      	ldr	r2, [r1, #0]
 800364a:	4614      	mov	r4, r2
 800364c:	b99c      	cbnz	r4, 8003676 <_malloc_r+0x56>
 800364e:	4f20      	ldr	r7, [pc, #128]	; (80036d0 <_malloc_r+0xb0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	b923      	cbnz	r3, 800365e <_malloc_r+0x3e>
 8003654:	4621      	mov	r1, r4
 8003656:	4630      	mov	r0, r6
 8003658:	f000 f862 	bl	8003720 <_sbrk_r>
 800365c:	6038      	str	r0, [r7, #0]
 800365e:	4629      	mov	r1, r5
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f85d 	bl	8003720 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d123      	bne.n	80036b2 <_malloc_r+0x92>
 800366a:	230c      	movs	r3, #12
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f86c 	bl	800374c <__malloc_unlock>
 8003674:	e7e3      	b.n	800363e <_malloc_r+0x1e>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	1b5b      	subs	r3, r3, r5
 800367a:	d417      	bmi.n	80036ac <_malloc_r+0x8c>
 800367c:	2b0b      	cmp	r3, #11
 800367e:	d903      	bls.n	8003688 <_malloc_r+0x68>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	441c      	add	r4, r3
 8003684:	6025      	str	r5, [r4, #0]
 8003686:	e004      	b.n	8003692 <_malloc_r+0x72>
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	42a2      	cmp	r2, r4
 800368c:	bf0c      	ite	eq
 800368e:	600b      	streq	r3, [r1, #0]
 8003690:	6053      	strne	r3, [r2, #4]
 8003692:	4630      	mov	r0, r6
 8003694:	f000 f85a 	bl	800374c <__malloc_unlock>
 8003698:	f104 000b 	add.w	r0, r4, #11
 800369c:	1d23      	adds	r3, r4, #4
 800369e:	f020 0007 	bic.w	r0, r0, #7
 80036a2:	1ac2      	subs	r2, r0, r3
 80036a4:	d0cc      	beq.n	8003640 <_malloc_r+0x20>
 80036a6:	1a1b      	subs	r3, r3, r0
 80036a8:	50a3      	str	r3, [r4, r2]
 80036aa:	e7c9      	b.n	8003640 <_malloc_r+0x20>
 80036ac:	4622      	mov	r2, r4
 80036ae:	6864      	ldr	r4, [r4, #4]
 80036b0:	e7cc      	b.n	800364c <_malloc_r+0x2c>
 80036b2:	1cc4      	adds	r4, r0, #3
 80036b4:	f024 0403 	bic.w	r4, r4, #3
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d0e3      	beq.n	8003684 <_malloc_r+0x64>
 80036bc:	1a21      	subs	r1, r4, r0
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 f82e 	bl	8003720 <_sbrk_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d1dd      	bne.n	8003684 <_malloc_r+0x64>
 80036c8:	e7cf      	b.n	800366a <_malloc_r+0x4a>
 80036ca:	bf00      	nop
 80036cc:	2000008c 	.word	0x2000008c
 80036d0:	20000090 	.word	0x20000090

080036d4 <_realloc_r>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	4607      	mov	r7, r0
 80036d8:	4614      	mov	r4, r2
 80036da:	460e      	mov	r6, r1
 80036dc:	b921      	cbnz	r1, 80036e8 <_realloc_r+0x14>
 80036de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036e2:	4611      	mov	r1, r2
 80036e4:	f7ff bf9c 	b.w	8003620 <_malloc_r>
 80036e8:	b922      	cbnz	r2, 80036f4 <_realloc_r+0x20>
 80036ea:	f7ff ff49 	bl	8003580 <_free_r>
 80036ee:	4625      	mov	r5, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	f000 f830 	bl	8003758 <_malloc_usable_size_r>
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	d20f      	bcs.n	800371c <_realloc_r+0x48>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4638      	mov	r0, r7
 8003700:	f7ff ff8e 	bl	8003620 <_malloc_r>
 8003704:	4605      	mov	r5, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d0f2      	beq.n	80036f0 <_realloc_r+0x1c>
 800370a:	4631      	mov	r1, r6
 800370c:	4622      	mov	r2, r4
 800370e:	f7ff ff0f 	bl	8003530 <memcpy>
 8003712:	4631      	mov	r1, r6
 8003714:	4638      	mov	r0, r7
 8003716:	f7ff ff33 	bl	8003580 <_free_r>
 800371a:	e7e9      	b.n	80036f0 <_realloc_r+0x1c>
 800371c:	4635      	mov	r5, r6
 800371e:	e7e7      	b.n	80036f0 <_realloc_r+0x1c>

08003720 <_sbrk_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d06      	ldr	r5, [pc, #24]	; (800373c <_sbrk_r+0x1c>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f000 f81e 	bl	800376c <_sbrk>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_sbrk_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_sbrk_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200001e0 	.word	0x200001e0

08003740 <__malloc_lock>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__malloc_lock+0x8>)
 8003742:	f000 b811 	b.w	8003768 <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	200001e8 	.word	0x200001e8

0800374c <__malloc_unlock>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__malloc_unlock+0x8>)
 800374e:	f000 b80c 	b.w	800376a <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	200001e8 	.word	0x200001e8

08003758 <_malloc_usable_size_r>:
 8003758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375c:	1f18      	subs	r0, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbc      	itt	lt
 8003762:	580b      	ldrlt	r3, [r1, r0]
 8003764:	18c0      	addlt	r0, r0, r3
 8003766:	4770      	bx	lr

08003768 <__retarget_lock_acquire_recursive>:
 8003768:	4770      	bx	lr

0800376a <__retarget_lock_release_recursive>:
 800376a:	4770      	bx	lr

0800376c <_sbrk>:
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <_sbrk+0x14>)
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	4602      	mov	r2, r0
 8003772:	b909      	cbnz	r1, 8003778 <_sbrk+0xc>
 8003774:	4903      	ldr	r1, [pc, #12]	; (8003784 <_sbrk+0x18>)
 8003776:	6019      	str	r1, [r3, #0]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	4402      	add	r2, r0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	4770      	bx	lr
 8003780:	20000094 	.word	0x20000094
 8003784:	200001f0 	.word	0x200001f0

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr
