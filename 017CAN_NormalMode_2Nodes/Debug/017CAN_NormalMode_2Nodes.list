
017CAN_NormalMode_2Nodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004160  08004160  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f784  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b89  00000000  00000000  0002f824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  000313b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00032080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bff  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e35f  00000000  00000000  000548b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a02  00000000  00000000  00062c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134618  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa0  00000000  00000000  0013466c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800404c 	.word	0x0800404c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800404c 	.word	0x0800404c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SysTick_Handler>:

extern CAN_HandleTypeDef hcan1;
extern TIM_HandleTypeDef htimer6;

void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800057c:	f000 fd4e 	bl	800101c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000580:	f001 fcd4 	bl	8001f2c <HAL_SYSTICK_IRQHandler>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <TIM6_DAC_IRQHandler+0x10>)
 800058e:	f002 fc03 	bl	8002d98 <HAL_TIM_IRQHandler>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000009c 	.word	0x2000009c

0800059c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <EXTI0_IRQHandler+0x14>)
 80005a2:	f002 fb89 	bl	8002cb8 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f001 fe9e 	bl	80022e8 <HAL_GPIO_EXTI_IRQHandler>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000009c 	.word	0x2000009c

080005b4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <CAN1_TX_IRQHandler+0x10>)
 80005ba:	f001 f982 	bl	80018c2 <HAL_CAN_IRQHandler>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000128 	.word	0x20000128

080005c8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <CAN1_RX0_IRQHandler+0x10>)
 80005ce:	f001 f978 	bl	80018c2 <HAL_CAN_IRQHandler>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000128 	.word	0x20000128

080005dc <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <CAN1_RX1_IRQHandler+0x10>)
 80005e2:	f001 f96e 	bl	80018c2 <HAL_CAN_IRQHandler>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000128 	.word	0x20000128

080005f0 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <CAN1_SCE_IRQHandler+0x10>)
 80005f6:	f001 f964 	bl	80018c2 <HAL_CAN_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128

08000604 <main>:
CAN_RxHeaderTypeDef can1_rx;

uint8_t req_counter = 0;

int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_Init();
 8000608:	f000 fcb6 	bl	8000f78 <HAL_Init>
	SystemClock_ConfigHSE(SYS_CLOCK_FREQ_50_MHZ);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f000 f821 	bl	8000654 <SystemClock_ConfigHSE>
	GPIO_Init();
 8000612:	f000 f8af 	bl	8000774 <GPIO_Init>
	UART2_Init();
 8000616:	f000 f8f5 	bl	8000804 <UART2_Init>
	TIMER6_Init();
 800061a:	f000 fa99 	bl	8000b50 <TIMER6_Init>
	CAN_Init();
 800061e:	f000 f917 	bl	8000850 <CAN_Init>
	CAN_Filter_Config();
 8000622:	f000 f94b 	bl	80008bc <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 8000626:	f240 4103 	movw	r1, #1027	; 0x403
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x4c>)
 800062c:	f001 f923 	bl	8001876 <HAL_CAN_ActivateNotification>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x36>
	{
		Error_handler();
 8000636:	f000 fb7d 	bl	8000d34 <Error_handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <main+0x4c>)
 800063c:	f000 feea 	bl	8001414 <HAL_CAN_Start>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x46>
	{
		Error_handler();
 8000646:	f000 fb75 	bl	8000d34 <Error_handler>
	}

	CAN1_Tx();
 800064a:	f000 f95d 	bl	8000908 <CAN1_Tx>


	while(1);
 800064e:	e7fe      	b.n	800064e <main+0x4a>
 8000650:	20000128 	.word	0x20000128

08000654 <SystemClock_ConfigHSE>:
}

void SystemClock_ConfigHSE(uint8_t clock_freq)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38


	switch(clock_freq)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b78      	cmp	r3, #120	; 0x78
 800067c:	d036      	beq.n	80006ec <SystemClock_ConfigHSE+0x98>
 800067e:	2b78      	cmp	r3, #120	; 0x78
 8000680:	dc71      	bgt.n	8000766 <SystemClock_ConfigHSE+0x112>
 8000682:	2b32      	cmp	r3, #50	; 0x32
 8000684:	d002      	beq.n	800068c <SystemClock_ConfigHSE+0x38>
 8000686:	2b54      	cmp	r3, #84	; 0x54
 8000688:	d018      	beq.n	80006bc <SystemClock_ConfigHSE+0x68>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		FLatency = FLASH_ACR_LATENCY_3WS;
		break;

	}
	default: return;
 800068a:	e06c      	b.n	8000766 <SystemClock_ConfigHSE+0x112>
		osc_init.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_1WS;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80006ba:	e02f      	b.n	800071c <SystemClock_ConfigHSE+0xc8>
		osc_init.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 80006c0:	23a8      	movs	r3, #168	; 0xa8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_2WS;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80006ea:	e017      	b.n	800071c <SystemClock_ConfigHSE+0xc8>
		osc_init.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 80006f0:	23f0      	movs	r3, #240	; 0xf0
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006fc:	230f      	movs	r3, #15
 80006fe:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000714:	2303      	movs	r3, #3
 8000716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 800071a:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fe05 	bl	8002330 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_ConfigHSE+0xdc>
	{
		Error_handler();
 800072c:	f000 fb02 	bl	8000d34 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init,FLatency ))
 8000730:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f870 	bl	8002820 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_ConfigHSE+0xf6>
	{
		Error_handler();
 8000746:	f000 faf5 	bl	8000d34 <Error_handler>
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800074a:	f002 fa31 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 800074e:	4603      	mov	r3, r0
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <SystemClock_ConfigHSE+0x11c>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	099b      	lsrs	r3, r3, #6
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fbbe 	bl	8001eda <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800075e:	2004      	movs	r0, #4
 8000760:	f001 fbc8 	bl	8001ef4 <HAL_SYSTICK_CLKSourceConfig>
 8000764:	e000      	b.n	8000768 <SystemClock_ConfigHSE+0x114>
	default: return;
 8000766:	bf00      	nop
}
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	10624dd3 	.word	0x10624dd3

08000774 <GPIO_Init>:

void GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;
	GPIO_InitTypeDef button;
	led.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
	led.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800077e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000782:	61fb      	str	r3, [r7, #28]
	led.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
	led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28

	__HAL_RCC_GPIOD_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <GPIO_Init+0x84>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <GPIO_Init+0x84>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <GPIO_Init+0x84>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOD, &led);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <GPIO_Init+0x88>)
 80007b0:	f001 fbca 	bl	8001f48 <HAL_GPIO_Init>

	button.Mode = GPIO_MODE_IT_FALLING;
 80007b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b8:	60fb      	str	r3, [r7, #12]
	button.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
	button.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <GPIO_Init+0x84>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <GPIO_Init+0x84>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &button);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <GPIO_Init+0x8c>)
 80007e6:	f001 fbaf 	bl	8001f48 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ea:	2006      	movs	r0, #6
 80007ec:	f001 fb67 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 80007f0:	bf00      	nop
 80007f2:	3730      	adds	r7, #48	; 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	40020000 	.word	0x40020000

08000804 <UART2_Init>:

void UART2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <UART2_Init+0x44>)
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <UART2_Init+0x48>)
 800080c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <UART2_Init+0x44>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <UART2_Init+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <UART2_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <UART2_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <UART2_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <UART2_Init+0x44>)
 8000830:	220c      	movs	r2, #12
 8000832:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <UART2_Init+0x44>)
 8000836:	f002 fc93 	bl	8003160 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 8000840:	f000 fa78 	bl	8000d34 <Error_handler>
	}


}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000e4 	.word	0x200000e4
 800084c:	40004400 	.word	0x40004400

08000850 <CAN_Init>:

void CAN_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <CAN_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <CAN_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <CAN_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <CAN_Init+0x64>)
 8000862:	2201      	movs	r2, #1
 8000864:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <CAN_Init+0x64>)
 8000868:	2201      	movs	r2, #1
 800086a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <CAN_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <CAN_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <CAN_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <CAN_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	775a      	strb	r2, [r3, #29]

	//Setting related CAN bit timing
	hcan1.Init.Prescaler = 5;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <CAN_Init+0x64>)
 8000886:	2205      	movs	r2, #5
 8000888:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <CAN_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <CAN_Init+0x64>)
 8000892:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000896:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <CAN_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]

	if( HAL_CAN_Init(&hcan1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <CAN_Init+0x64>)
 80008a0:	f000 fbdc 	bl	800105c <HAL_CAN_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <CAN_Init+0x5e>
	{
		Error_handler();
 80008aa:	f000 fa43 	bl	8000d34 <Error_handler>
	}

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000128 	.word	0x20000128
 80008b8:	40006400 	.word	0x40006400

080008bc <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter;

	can1_filter.FilterActivation = ENABLE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
	can1_filter.FilterBank = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
	can1_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
	can1_filter.FilterIdHigh = 0x0000;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
	can1_filter.FilterIdLow = 0x0000;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
	can1_filter.FilterMaskIdHigh = 0x0000;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
	can1_filter.FilterMaskIdLow = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	can1_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
	can1_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <CAN_Filter_Config+0x48>)
 80008ec:	f000 fcb2 	bl	8001254 <HAL_CAN_ConfigFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <CAN_Filter_Config+0x3e>
	{
		Error_handler();
 80008f6:	f000 fa1d 	bl	8000d34 <Error_handler>
	}
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000128 	.word	0x20000128

08000908 <CAN1_Tx>:

uint8_t led_no = 0;

void CAN1_Tx(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

	uint32_t TxMailBox;

	uint8_t message;

	can1_tx.DLC = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
	can1_tx.StdId = 0x65D;
 8000912:	f240 635d 	movw	r3, #1629	; 0x65d
 8000916:	60bb      	str	r3, [r7, #8]
	can1_tx.IDE = CAN_ID_STD;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
	can1_tx.RTR = CAN_RTR_DATA;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

	message = ++led_no;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <CAN1_Tx+0x64>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <CAN1_Tx+0x64>)
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <CAN1_Tx+0x64>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4)
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <CAN1_Tx+0x64>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d102      	bne.n	8000940 <CAN1_Tx+0x38>
	{
		led_no = 0;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <CAN1_Tx+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <CAN1_Tx+0x68>)
 8000946:	f001 fcb4 	bl	80022b2 <HAL_GPIO_TogglePin>

	if(HAL_CAN_AddTxMessage(&hcan1, &can1_tx, &message , &TxMailBox) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	1cfa      	adds	r2, r7, #3
 800094e:	f107 0108 	add.w	r1, r7, #8
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <CAN1_Tx+0x6c>)
 8000954:	f000 fda2 	bl	800149c <HAL_CAN_AddTxMessage>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <CAN1_Tx+0x5a>
	{
		Error_handler();
 800095e:	f000 f9e9 	bl	8000d34 <Error_handler>
	}




}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000008d 	.word	0x2000008d
 8000970:	40020c00 	.word	0x40020c00
 8000974:	20000128 	.word	0x20000128

08000978 <HAL_CAN_TxMailbox0CompleteCallback>:
}		We dont need Rx in this app. it is read by HAL_CAN_RxFifo0MsgPendingCallback
*/


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b090      	sub	sp, #64	; 0x40
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox0\r\n");
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	490a      	ldr	r1, [pc, #40]	; (80009b0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000986:	4618      	mov	r0, r3
 8000988:	f002 ff24 	bl	80037d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc1d 	bl	80001d0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f107 010c 	add.w	r1, r7, #12
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009a4:	f002 fc29 	bl	80031fa <HAL_UART_Transmit>

}
 80009a8:	bf00      	nop
 80009aa:	3740      	adds	r7, #64	; 0x40
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08004064 	.word	0x08004064
 80009b4:	200000e4 	.word	0x200000e4

080009b8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	; 0x40
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox1\r\n");
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	490a      	ldr	r1, [pc, #40]	; (80009f0 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 ff04 	bl	80037d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbfd 	bl	80001d0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f107 010c 	add.w	r1, r7, #12
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 80009e4:	f002 fc09 	bl	80031fa <HAL_UART_Transmit>

}
 80009e8:	bf00      	nop
 80009ea:	3740      	adds	r7, #64	; 0x40
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08004084 	.word	0x08004084
 80009f4:	200000e4 	.word	0x200000e4

080009f8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b090      	sub	sp, #64	; 0x40
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox2\r\n");
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	490a      	ldr	r1, [pc, #40]	; (8000a30 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fee4 	bl	80037d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fbdd 	bl	80001d0 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f107 010c 	add.w	r1, r7, #12
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a24:	f002 fbe9 	bl	80031fa <HAL_UART_Transmit>

}
 8000a28:	bf00      	nop
 8000a2a:	3740      	adds	r7, #64	; 0x40
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	080040a4 	.word	0x080040a4
 8000a34:	200000e4 	.word	0x200000e4

08000a38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	; 0x48
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

	uint8_t received[8];
 	char notification[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1_rx, received) != HAL_OK)
 8000a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a44:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	482c      	ldr	r0, [pc, #176]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000a4a:	f000 fe02 	bl	8001652 <HAL_CAN_GetRxMessage>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_handler();
 8000a54:	f000 f96e 	bl	8000d34 <Error_handler>
	}

	if(can1_rx.StdId == 0x65D && can1_rx.RTR == 0)
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f240 625d 	movw	r2, #1629	; 0x65d
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d112      	bne.n	8000a8a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10e      	bne.n	8000a8a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		// this is data frame sent by n1 to n2
		led_manage_output(received[0]);
 8000a6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f8ad 	bl	8000bd0 <led_manage_output>
		sprintf(notification, "Reply Received: #%X\r\n", received[0]);
 8000a76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	491f      	ldr	r1, [pc, #124]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fea6 	bl	80037d4 <siprintf>
 8000a88:	e025      	b.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	}
	else if(can1_rx.StdId == 0x651 && can1_rx.RTR == 1)
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f240 6251 	movw	r2, #1617	; 0x651
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d109      	bne.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d105      	bne.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
	{
		// this is remote frame sent by n1 to n2
		send_respose(can1_rx.StdId);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f870 	bl	8000b88 <send_respose>
 8000aa8:	e023      	b.n	8000af2 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		return;
	}
	else if(can1_rx.StdId == 0x651 && can1_rx.RTR == 0)
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f240 6251 	movw	r2, #1617	; 0x651
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10f      	bne.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10b      	bne.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	{
		//it is a reply (data frame) by n2 to n1
		sprintf(notification, "Reply Received: %#X\r\n", received[0] << 8 | received[1]);
 8000abe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fe7f 	bl	80037d4 <siprintf>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb78 	bl	80001d0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f107 010c 	add.w	r1, r7, #12
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000aee:	f002 fb84 	bl	80031fa <HAL_UART_Transmit>

}
 8000af2:	3748      	adds	r7, #72	; 0x48
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000150 	.word	0x20000150
 8000afc:	20000128 	.word	0x20000128
 8000b00:	080040c4 	.word	0x080040c4
 8000b04:	080040dc 	.word	0x080040dc
 8000b08:	200000e4 	.word	0x200000e4

08000b0c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "CAN Error Detected!\r\n");
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	490b      	ldr	r1, [pc, #44]	; (8000b48 <HAL_CAN_ErrorCallback+0x3c>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fe5a 	bl	80037d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb53 	bl	80001d0 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f107 010c 	add.w	r1, r7, #12
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_CAN_ErrorCallback+0x40>)
 8000b38:	f002 fb5f 	bl	80031fa <HAL_UART_Transmit>

	Error_handler();
 8000b3c:	f000 f8fa 	bl	8000d34 <Error_handler>
}
 8000b40:	bf00      	nop
 8000b42:	3740      	adds	r7, #64	; 0x40
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	080040f4 	.word	0x080040f4
 8000b4c:	200000e4 	.word	0x200000e4

08000b50 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <TIMER6_Init+0x30>)
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <TIMER6_Init+0x34>)
 8000b58:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <TIMER6_Init+0x30>)
 8000b5c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b60:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 10000-1;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <TIMER6_Init+0x30>)
 8000b64:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b68:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <TIMER6_Init+0x30>)
 8000b6c:	f002 f854 	bl	8002c18 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <TIMER6_Init+0x2a>
	{
		Error_handler();
 8000b76:	f000 f8dd 	bl	8000d34 <Error_handler>
	}

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000009c 	.word	0x2000009c
 8000b84:	40001000 	.word	0x40001000

08000b88 <send_respose>:

void send_respose(uint32_t StdId)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint32_t TxMailBox;
	uint8_t response[2] = {0xAB, 0xCD};
 8000b90:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8000b94:	813b      	strh	r3, [r7, #8]

	header.DLC = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
	header.StdId = StdId;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
	header.IDE = CAN_ID_STD;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
	header.RTR = CAN_RTR_DATA;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &header, response , &TxMailBox) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	f107 0208 	add.w	r2, r7, #8
 8000bae:	f107 0110 	add.w	r1, r7, #16
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <send_respose+0x44>)
 8000bb4:	f000 fc72 	bl	800149c <HAL_CAN_AddTxMessage>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <send_respose+0x3a>
	{
		Error_handler();
 8000bbe:	f000 f8b9 	bl	8000d34 <Error_handler>
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000128 	.word	0x20000128

08000bd0 <led_manage_output>:
void led_manage_output(uint8_t led_no)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	switch(led_no)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d86e      	bhi.n	8000cc0 <led_manage_output+0xf0>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <led_manage_output+0x18>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000c2b 	.word	0x08000c2b
 8000bf0:	08000c5d 	.word	0x08000c5d
 8000bf4:	08000c8f 	.word	0x08000c8f
	{
	case 1:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfe:	4832      	ldr	r0, [pc, #200]	; (8000cc8 <led_manage_output+0xf8>)
 8000c00:	f001 fb3e 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <led_manage_output+0xf8>)
 8000c0c:	f001 fb38 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c16:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <led_manage_output+0xf8>)
 8000c18:	f001 fb32 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <led_manage_output+0xf8>)
 8000c24:	f001 fb2c 	bl	8002280 <HAL_GPIO_WritePin>
		break;
 8000c28:	e04a      	b.n	8000cc0 <led_manage_output+0xf0>
	case 2:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	4825      	ldr	r0, [pc, #148]	; (8000cc8 <led_manage_output+0xf8>)
 8000c32:	f001 fb25 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <led_manage_output+0xf8>)
 8000c3e:	f001 fb1f 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <led_manage_output+0xf8>)
 8000c4a:	f001 fb19 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <led_manage_output+0xf8>)
 8000c56:	f001 fb13 	bl	8002280 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e031      	b.n	8000cc0 <led_manage_output+0xf0>
	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c62:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <led_manage_output+0xf8>)
 8000c64:	f001 fb0c 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6e:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <led_manage_output+0xf8>)
 8000c70:	f001 fb06 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <led_manage_output+0xf8>)
 8000c7c:	f001 fb00 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <led_manage_output+0xf8>)
 8000c88:	f001 fafa 	bl	8002280 <HAL_GPIO_WritePin>
		break;
 8000c8c:	e018      	b.n	8000cc0 <led_manage_output+0xf0>
	case 4:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <led_manage_output+0xf8>)
 8000c96:	f001 faf3 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <led_manage_output+0xf8>)
 8000ca2:	f001 faed 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <led_manage_output+0xf8>)
 8000cae:	f001 fae7 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <led_manage_output+0xf8>)
 8000cba:	f001 fae1 	bl	8002280 <HAL_GPIO_WritePin>
		break;
 8000cbe:	bf00      	nop
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	 uint32_t TxMailbox;

	 uint8_t message; //no meaning for data frame

	if ( req_counter  == 4)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d11a      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		//N1 sending Remote frame to N2
		TxHeader.DLC = 2; //N1 demanding 2 bytes of reply
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000ce0:	f240 6351 	movw	r3, #1617	; 0x651
 8000ce4:	613b      	str	r3, [r7, #16]
		TxHeader.IDE   = CAN_ID_STD;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]

		if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	f107 020b 	add.w	r2, r7, #11
 8000cf6:	f107 0110 	add.w	r1, r7, #16
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cfc:	f000 fbce 	bl	800149c <HAL_CAN_AddTxMessage>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			Error_handler();
 8000d06:	f000 f815 	bl	8000d34 <Error_handler>
		}
		req_counter = 0;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	{
		CAN1_Tx();
		req_counter++;
	}

}
 8000d10:	e007      	b.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x56>
		CAN1_Tx();
 8000d12:	f7ff fdf9 	bl	8000908 <CAN1_Tx>
		req_counter++;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000008c 	.word	0x2000008c
 8000d30:	20000128 	.word	0x20000128

08000d34 <Error_handler>:


void Error_handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	while(1);
 8000d38:	e7fe      	b.n	8000d38 <Error_handler+0x4>
	...

08000d3c <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f001 f895 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x40>)
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_MspInit+0x40>)
 8000d4c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	f06f 000b 	mvn.w	r0, #11
 8000d5a:	f001 f894 	bl	8001e86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	f06f 000a 	mvn.w	r0, #10
 8000d66:	f001 f88e 	bl	8001e86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f06f 0009 	mvn.w	r0, #9
 8000d72:	f001 f888 	bl	8001e86 <HAL_NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000ddc:	f001 f8b4 	bl	8001f48 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000de0:	2308      	movs	r3, #8
 8000de2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4808      	ldr	r0, [pc, #32]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000dec:	f001 f8ac 	bl	8001f48 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df0:	2026      	movs	r0, #38	; 0x26
 8000df2:	f001 f864 	bl	8001ebe <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	2026      	movs	r0, #38	; 0x26
 8000dfc:	f001 f843 	bl	8001e86 <HAL_NVIC_SetPriority>

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e34:	2036      	movs	r0, #54	; 0x36
 8000e36:	f001 f842 	bl	8001ebe <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	2036      	movs	r0, #54	; 0x36
 8000e40:	f001 f821 	bl	8001e86 <HAL_NVIC_SetPriority>

}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_CAN_MspInit>:


void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_CAN_MspInit+0xa8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

	// PD0 --> RX
	// PD1 --> TX

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e94:	2303      	movs	r3, #3
 8000e96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4814      	ldr	r0, [pc, #80]	; (8000efc <HAL_CAN_MspInit+0xac>)
 8000eac:	f001 f84c 	bl	8001f48 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	2013      	movs	r0, #19
 8000eb6:	f000 ffe6 	bl	8001e86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f000 ffe1 	bl	8001e86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	2015      	movs	r0, #21
 8000eca:	f000 ffdc 	bl	8001e86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	2016      	movs	r0, #22
 8000ed4:	f000 ffd7 	bl	8001e86 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ed8:	2013      	movs	r0, #19
 8000eda:	f000 fff0 	bl	8001ebe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f000 ffed 	bl	8001ebe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ee4:	2015      	movs	r0, #21
 8000ee6:	f000 ffea 	bl	8001ebe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000eea:	2016      	movs	r0, #22
 8000eec:	f000 ffe7 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 fc1b 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fb55 	bl	8000604 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f68:	08004168 	.word	0x08004168
  ldr r2, =_sbss
 8000f6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f70:	20000180 	.word	0x20000180

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 ff65 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fec6 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff7d 	bl	8001eda <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 ff45 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000016c 	.word	0x2000016c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000016c 	.word	0x2000016c

0800105c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0ed      	b.n	800124a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fee8 	bl	8000e50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff ffd8 	bl	8001044 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001096:	e012      	b.n	80010be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001098:	f7ff ffd4 	bl	8001044 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d90b      	bls.n	80010be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0c5      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0e5      	beq.n	8001098 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0202 	bic.w	r2, r2, #2
 80010da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010dc:	f7ff ffb2 	bl	8001044 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e2:	e012      	b.n	800110a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e4:	f7ff ffae 	bl	8001044 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b0a      	cmp	r3, #10
 80010f0:	d90b      	bls.n	800110a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e09f      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e5      	bne.n	80010e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e1b      	ldrb	r3, [r3, #24]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e007      	b.n	8001142 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7e5b      	ldrb	r3, [r3, #25]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e9b      	ldrb	r3, [r3, #26]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e007      	b.n	8001196 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0220 	bic.w	r2, r2, #32
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7edb      	ldrb	r3, [r3, #27]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0210 	bic.w	r2, r2, #16
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f1b      	ldrb	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0208 	orr.w	r2, r2, #8
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0208 	bic.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7f5b      	ldrb	r3, [r3, #29]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0204 	orr.w	r2, r2, #4
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	ea42 0103 	orr.w	r1, r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800126c:	7cfb      	ldrb	r3, [r7, #19]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d003      	beq.n	800127a <HAL_CAN_ConfigFilter+0x26>
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	2b02      	cmp	r3, #2
 8001276:	f040 80be 	bne.w	80013f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <HAL_CAN_ConfigFilter+0x1bc>)
 800127c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001294:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2201      	movs	r2, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	401a      	ands	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d123      	bne.n	8001324 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3248      	adds	r2, #72	; 0x48
 8001304:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001318:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800131a:	6979      	ldr	r1, [r7, #20]
 800131c:	3348      	adds	r3, #72	; 0x48
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d122      	bne.n	8001372 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800134c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3248      	adds	r2, #72	; 0x48
 8001352:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001366:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001368:	6979      	ldr	r1, [r7, #20]
 800136a:	3348      	adds	r3, #72	; 0x48
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	401a      	ands	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800138c:	e007      	b.n	800139e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	431a      	orrs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013b8:	e007      	b.n	80013ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	431a      	orrs	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013e8:	f023 0201 	bic.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e006      	b.n	8001404 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
  }
}
 8001404:	4618      	mov	r0, r3
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40006400 	.word	0x40006400

08001414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d12e      	bne.n	8001486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001440:	f7ff fe00 	bl	8001044 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001446:	e012      	b.n	800146e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001448:	f7ff fdfc 	bl	8001044 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b0a      	cmp	r3, #10
 8001454:	d90b      	bls.n	800146e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e012      	b.n	8001494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e5      	bne.n	8001448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_AddTxMessage+0x2c>
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f040 80b8 	bne.w	8001638 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10a      	bne.n	80014e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a0 	beq.w	8001628 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	0e1b      	lsrs	r3, r3, #24
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e09e      	b.n	8001646 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001508:	2201      	movs	r2, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	409a      	lsls	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3318      	adds	r3, #24
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	440b      	add	r3, r1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e00f      	b.n	8001556 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001540:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800154a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3318      	adds	r3, #24
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	7d1b      	ldrb	r3, [r3, #20]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d111      	bne.n	8001596 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3318      	adds	r3, #24
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	3304      	adds	r3, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3318      	adds	r3, #24
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3304      	adds	r3, #4
 8001594:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3307      	adds	r3, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	061a      	lsls	r2, r3, #24
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3306      	adds	r3, #6
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3305      	adds	r3, #5
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	3204      	adds	r2, #4
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	4610      	mov	r0, r2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	6811      	ldr	r1, [r2, #0]
 80015be:	ea43 0200 	orr.w	r2, r3, r0
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3303      	adds	r3, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	061a      	lsls	r2, r3, #24
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3302      	adds	r3, #2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	041b      	lsls	r3, r3, #16
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3301      	adds	r3, #1
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	4313      	orrs	r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	4610      	mov	r0, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	ea43 0200 	orr.w	r2, r3, r0
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001602:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3318      	adds	r3, #24
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6811      	ldr	r1, [r2, #0]
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3318      	adds	r3, #24
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	440b      	add	r3, r1
 8001622:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e00e      	b.n	8001646 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e006      	b.n	8001646 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
  }
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001652:	b480      	push	{r7}
 8001654:	b087      	sub	sp, #28
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001666:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <HAL_CAN_GetRxMessage+0x24>
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b02      	cmp	r3, #2
 8001672:	f040 80f3 	bne.w	800185c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10e      	bne.n	800169a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e7      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d8      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	331b      	adds	r3, #27
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0204 	and.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	331b      	adds	r3, #27
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0d5b      	lsrs	r3, r3, #21
 80016e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	331b      	adds	r3, #27
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	331b      	adds	r3, #27
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0202 	and.w	r2, r3, #2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 020f 	and.w	r2, r3, #15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	331b      	adds	r3, #27
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0a1a      	lsrs	r2, r3, #8
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c1a      	lsrs	r2, r3, #16
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3302      	adds	r3, #2
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0e1a      	lsrs	r2, r3, #24
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3303      	adds	r3, #3
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0a1a      	lsrs	r2, r3, #8
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3305      	adds	r3, #5
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1a      	lsrs	r2, r3, #16
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3306      	adds	r3, #6
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0e1a      	lsrs	r2, r3, #24
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3307      	adds	r3, #7
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d108      	bne.n	8001848 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0220 	orr.w	r2, r2, #32
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	e007      	b.n	8001858 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e006      	b.n	800186a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d002      	beq.n	8001894 <HAL_CAN_ActivateNotification+0x1e>
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d109      	bne.n	80018a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6959      	ldr	r1, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e006      	b.n	80018b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b08a      	sub	sp, #40	; 0x28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d07c      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d023      	beq.n	800195a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff f827 	bl	8000978 <HAL_CAN_TxMailbox0CompleteCallback>
 800192a:	e016      	b.n	800195a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	e00c      	b.n	800195a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	e002      	b.n	800195a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f96b 	bl	8001c30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d024      	beq.n	80019ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff f81d 	bl	80009b8 <HAL_CAN_TxMailbox1CompleteCallback>
 800197e:	e016      	b.n	80019ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e00c      	b.n	80019ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e002      	b.n	80019ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f94b 	bl	8001c44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d024      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff f813 	bl	80009f8 <HAL_CAN_TxMailbox2CompleteCallback>
 80019d2:	e016      	b.n	8001a02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e00c      	b.n	8001a02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	e002      	b.n	8001a02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f92b 	bl	8001c58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2210      	movs	r2, #16
 8001a24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f912 	bl	8001c6c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe ffe9 	bl	8000a38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2210      	movs	r2, #16
 8001a88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8f4 	bl	8001c94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8db 	bl	8001c80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8de 	bl	8001ca8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2208      	movs	r2, #8
 8001b06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8d7 	bl	8001cbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d07b      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d072      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d043      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03e      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b90:	2b60      	cmp	r3, #96	; 0x60
 8001b92:	d02b      	beq.n	8001bec <HAL_CAN_IRQHandler+0x32a>
 8001b94:	2b60      	cmp	r3, #96	; 0x60
 8001b96:	d82e      	bhi.n	8001bf6 <HAL_CAN_IRQHandler+0x334>
 8001b98:	2b50      	cmp	r3, #80	; 0x50
 8001b9a:	d022      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x320>
 8001b9c:	2b50      	cmp	r3, #80	; 0x50
 8001b9e:	d82a      	bhi.n	8001bf6 <HAL_CAN_IRQHandler+0x334>
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d019      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x316>
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d826      	bhi.n	8001bf6 <HAL_CAN_IRQHandler+0x334>
 8001ba8:	2b30      	cmp	r3, #48	; 0x30
 8001baa:	d010      	beq.n	8001bce <HAL_CAN_IRQHandler+0x30c>
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d822      	bhi.n	8001bf6 <HAL_CAN_IRQHandler+0x334>
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d002      	beq.n	8001bba <HAL_CAN_IRQHandler+0x2f8>
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d005      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb8:	e01d      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc2:	e019      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bcc:	e014      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd6:	e00f      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be0:	e00a      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bea:	e005      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf4:	e000      	b.n	8001bf8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bf6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe ff72 	bl	8000b0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d106      	bne.n	8001f10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f0e:	e005      	b.n	8001f1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f30:	f000 f802 	bl	8001f38 <HAL_SYSTICK_Callback>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e16b      	b.n	800223c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 815a 	bne.w	8002236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80b4 	beq.w	8002236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a5f      	ldr	r2, [pc, #380]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_GPIO_Init+0x310>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_GPIO_Init+0x314>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x318>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x31c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x320>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x324>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x328>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x32c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x20e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x330>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x20a>
 800214e:	2307      	movs	r3, #7
 8002150:	e00e      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002152:	2308      	movs	r3, #8
 8002154:	e00c      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002156:	2306      	movs	r3, #6
 8002158:	e00a      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215a:	2305      	movs	r3, #5
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215e:	2304      	movs	r3, #4
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x310>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_GPIO_Init+0x334>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_GPIO_Init+0x334>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_GPIO_Init+0x334>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_GPIO_Init+0x334>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_GPIO_Init+0x334>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_GPIO_Init+0x334>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f ae90 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021800 	.word	0x40021800
 8002278:	40021c00 	.word	0x40021c00
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f806 	bl	8002318 <HAL_GPIO_EXTI_Callback>
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e264      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234e:	4ba3      	ldr	r3, [pc, #652]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d00c      	beq.n	8002374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4ba0      	ldr	r3, [pc, #640]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002362:	2b08      	cmp	r3, #8
 8002364:	d112      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4b9d      	ldr	r3, [pc, #628]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b99      	ldr	r3, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05b      	beq.n	8002438 <HAL_RCC_OscConfig+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d157      	bne.n	8002438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e23f      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x74>
 8002396:	4b91      	ldr	r3, [pc, #580]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a90      	ldr	r2, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a8a      	ldr	r2, [pc, #552]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a87      	ldr	r2, [pc, #540]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a83      	ldr	r2, [pc, #524]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a80      	ldr	r2, [pc, #512]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fe2c 	bl	8001044 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe28 	bl	8001044 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e204      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xc0>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fe18 	bl	8001044 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fe14 	bl	8001044 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1f0      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	4b6c      	ldr	r3, [pc, #432]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0xe8>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d063      	beq.n	800250e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11c      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1c4      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4952      	ldr	r1, [pc, #328]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e03a      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_OscConfig+0x2b0>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fdcd 	bl	8001044 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fdc9 	bl	8001044 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1a5      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4940      	ldr	r1, [pc, #256]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0x2b0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdac 	bl	8001044 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe fda8 	bl	8001044 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e184      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d030      	beq.n	800257c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCC_OscConfig+0x2b4>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fd8c 	bl	8001044 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fd88 	bl	8001044 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e164      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x200>
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x2b4>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fd75 	bl	8001044 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe fd71 	bl	8001044 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e14d      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a0 	beq.w	80026ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x2b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d121      	bne.n	800260a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCC_OscConfig+0x2b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_RCC_OscConfig+0x2b8>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fd37 	bl	8001044 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e011      	b.n	80025fe <HAL_RCC_OscConfig+0x2ce>
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470000 	.word	0x42470000
 80025e4:	42470e80 	.word	0x42470e80
 80025e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe fd2a 	bl	8001044 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e106      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x4e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x2f0>
 8002612:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a80      	ldr	r2, [pc, #512]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
 800261e:	e01c      	b.n	800265a <HAL_RCC_OscConfig+0x32a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b05      	cmp	r3, #5
 8002626:	d10c      	bne.n	8002642 <HAL_RCC_OscConfig+0x312>
 8002628:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	4b78      	ldr	r3, [pc, #480]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a77      	ldr	r2, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0x32a>
 8002642:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a74      	ldr	r2, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a71      	ldr	r2, [pc, #452]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fcef 	bl	8001044 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fceb 	bl	8001044 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0c5      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ee      	beq.n	800266a <HAL_RCC_OscConfig+0x33a>
 800268c:	e014      	b.n	80026b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fcd9 	bl	8001044 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fcd5 	bl	8001044 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0af      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ee      	bne.n	8002696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a55      	ldr	r2, [pc, #340]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 809b 	beq.w	800280a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d05c      	beq.n	800279a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d141      	bne.n	800276c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe fca9 	bl	8001044 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fca5 	bl	8001044 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e081      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	4b43      	ldr	r3, [pc, #268]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	019b      	lsls	r3, r3, #6
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273e:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fc7e 	bl	8001044 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fc7a 	bl	8001044 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e056      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x41c>
 800276a:	e04e      	b.n	800280a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fc67 	bl	8001044 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fc63 	bl	8001044 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e03f      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x44a>
 8002798:	e037      	b.n	800280a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e032      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d028      	beq.n	8002806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d11a      	bne.n	8002806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027de:	4293      	cmp	r3, r2
 80027e0:	d111      	bne.n	8002806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40007000 	.word	0x40007000
 8002818:	40023800 	.word	0x40023800
 800281c:	42470060 	.word	0x42470060

08002820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cc      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d90c      	bls.n	800285c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d044      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e067      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4934      	ldr	r1, [pc, #208]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fb98 	bl	8001044 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fb94 	bl	8001044 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d20c      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f821 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe faf8 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	0800410c 	.word	0x0800410c
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	2300      	movs	r3, #0
 80029fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a04:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x40>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f200 80bd 	bhi.w	8002b90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1e:	e0b7      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a22:	60bb      	str	r3, [r7, #8]
       break;
 8002a24:	e0b7      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b61      	ldr	r3, [pc, #388]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a28:	60bb      	str	r3, [r7, #8]
      break;
 8002a2a:	e0b4      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04d      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	ea02 0800 	and.w	r8, r2, r0
 8002a5a:	ea03 0901 	and.w	r9, r3, r1
 8002a5e:	4640      	mov	r0, r8
 8002a60:	4649      	mov	r1, r9
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	014b      	lsls	r3, r1, #5
 8002a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a70:	0142      	lsls	r2, r0, #5
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	ebb0 0008 	subs.w	r0, r0, r8
 8002a7a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a8c:	0182      	lsls	r2, r0, #6
 8002a8e:	1a12      	subs	r2, r2, r0
 8002a90:	eb63 0301 	sbc.w	r3, r3, r1
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	00d9      	lsls	r1, r3, #3
 8002a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa2:	00d0      	lsls	r0, r2, #3
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	eb12 0208 	adds.w	r2, r2, r8
 8002aac:	eb43 0309 	adc.w	r3, r3, r9
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0259      	lsls	r1, r3, #9
 8002aba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002abe:	0250      	lsls	r0, r2, #9
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	f7fd fbd6 	bl	8000280 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e04a      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	ea02 0400 	and.w	r4, r2, r0
 8002af6:	ea03 0501 	and.w	r5, r3, r1
 8002afa:	4620      	mov	r0, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	014b      	lsls	r3, r1, #5
 8002b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b0c:	0142      	lsls	r2, r0, #5
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	1b00      	subs	r0, r0, r4
 8002b14:	eb61 0105 	sbc.w	r1, r1, r5
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	018b      	lsls	r3, r1, #6
 8002b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b26:	0182      	lsls	r2, r0, #6
 8002b28:	1a12      	subs	r2, r2, r0
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	00d9      	lsls	r1, r3, #3
 8002b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b3c:	00d0      	lsls	r0, r2, #3
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	1912      	adds	r2, r2, r4
 8002b44:	eb45 0303 	adc.w	r3, r5, r3
 8002b48:	f04f 0000 	mov.w	r0, #0
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	0299      	lsls	r1, r3, #10
 8002b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b56:	0290      	lsls	r0, r2, #10
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	f7fd fb8a 	bl	8000280 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b92:	60bb      	str	r3, [r7, #8]
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	68bb      	ldr	r3, [r7, #8]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400
 8002bac:	007a1200 	.word	0x007a1200

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	0800411c 	.word	0x0800411c

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffdc 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0b5b      	lsrs	r3, r3, #13
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	0800411c 	.word	0x0800411c

08002c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe f8e6 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f9ce 	bl	8002ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04e      	b.n	8002d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d022      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d01d      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d018      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00e      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d111      	bne.n	8002d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d010      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	e007      	b.n	8002d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40010400 	.word	0x40010400
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40001800 	.word	0x40001800

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8ee 	bl	8002fbc <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8e0 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8f1 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0204 	mvn.w	r2, #4
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8c4 	bl	8002fbc <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8b6 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8c7 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0208 	mvn.w	r2, #8
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f89a 	bl	8002fbc <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f88c 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f89d 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0210 	mvn.w	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f870 	bl	8002fbc <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f862 	bl	8002fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f873 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0201 	mvn.w	r2, #1
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd fed8 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f902 	bl	800314c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f838 	bl	8002fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0220 	mvn.w	r2, #32
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8cc 	bl	8003138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a40      	ldr	r2, [pc, #256]	; (800310c <TIM_Base_SetConfig+0x114>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003016:	d00f      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <TIM_Base_SetConfig+0x118>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3c      	ldr	r2, [pc, #240]	; (8003114 <TIM_Base_SetConfig+0x11c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <TIM_Base_SetConfig+0x120>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3a      	ldr	r2, [pc, #232]	; (800311c <TIM_Base_SetConfig+0x124>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2f      	ldr	r2, [pc, #188]	; (800310c <TIM_Base_SetConfig+0x114>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d027      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <TIM_Base_SetConfig+0x118>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d023      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <TIM_Base_SetConfig+0x11c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <TIM_Base_SetConfig+0x120>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <TIM_Base_SetConfig+0x124>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d017      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a28      	ldr	r2, [pc, #160]	; (8003120 <TIM_Base_SetConfig+0x128>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <TIM_Base_SetConfig+0x12c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a26      	ldr	r2, [pc, #152]	; (8003128 <TIM_Base_SetConfig+0x130>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <TIM_Base_SetConfig+0x134>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <TIM_Base_SetConfig+0x138>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <TIM_Base_SetConfig+0x13c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <TIM_Base_SetConfig+0x114>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0xf8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <TIM_Base_SetConfig+0x124>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d103      	bne.n	80030f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	615a      	str	r2, [r3, #20]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00
 800311c:	40010400 	.word	0x40010400
 8003120:	40014000 	.word	0x40014000
 8003124:	40014400 	.word	0x40014400
 8003128:	40014800 	.word	0x40014800
 800312c:	40001800 	.word	0x40001800
 8003130:	40001c00 	.word	0x40001c00
 8003134:	40002000 	.word	0x40002000

08003138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e03f      	b.n	80031f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fdfa 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f929 	bl	80033fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08a      	sub	sp, #40	; 0x28
 80031fe:	af02      	add	r7, sp, #8
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	d17c      	bne.n	8003314 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_Transmit+0x2c>
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e075      	b.n	8003316 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_UART_Transmit+0x3e>
 8003234:	2302      	movs	r3, #2
 8003236:	e06e      	b.n	8003316 <HAL_UART_Transmit+0x11c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2221      	movs	r2, #33	; 0x21
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324e:	f7fd fef9 	bl	8001044 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Transmit+0x82>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800328c:	e02a      	b.n	80032e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f840 	bl	800331e <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e036      	b.n	8003316 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3302      	adds	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	e007      	b.n	80032d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1cf      	bne.n	800328e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f810 	bl	800331e <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e006      	b.n	8003316 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b090      	sub	sp, #64	; 0x40
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	e050      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d04c      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	f7fd fe81 	bl	8001044 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334a:	429a      	cmp	r2, r3
 800334c:	d241      	bcs.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800336e:	637a      	str	r2, [r7, #52]	; 0x34
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	613b      	str	r3, [r7, #16]
   return(result);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a2:	623a      	str	r2, [r7, #32]
 80033a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e00f      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d09f      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3740      	adds	r7, #64	; 0x40
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	b09f      	sub	sp, #124	; 0x7c
 8003402:	af00      	add	r7, sp, #0
 8003404:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	68d9      	ldr	r1, [r3, #12]
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	ea40 0301 	orr.w	r3, r0, r1
 800341c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	431a      	orrs	r2, r3
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	431a      	orrs	r2, r3
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4313      	orrs	r3, r2
 8003434:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003440:	f021 010c 	bic.w	r1, r1, #12
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344a:	430b      	orrs	r3, r1
 800344c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	6999      	ldr	r1, [r3, #24]
 800345c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	ea40 0301 	orr.w	r3, r0, r1
 8003464:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4bc5      	ldr	r3, [pc, #788]	; (8003780 <UART_SetConfig+0x384>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d004      	beq.n	800347a <UART_SetConfig+0x7e>
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4bc3      	ldr	r3, [pc, #780]	; (8003784 <UART_SetConfig+0x388>)
 8003476:	429a      	cmp	r2, r3
 8003478:	d103      	bne.n	8003482 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800347a:	f7ff fbb9 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 800347e:	6778      	str	r0, [r7, #116]	; 0x74
 8003480:	e002      	b.n	8003488 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7ff fba1 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8003486:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	f040 80b6 	bne.w	8003600 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003496:	461c      	mov	r4, r3
 8003498:	f04f 0500 	mov.w	r5, #0
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	6439      	str	r1, [r7, #64]	; 0x40
 80034a4:	415b      	adcs	r3, r3
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
 80034a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034ac:	1912      	adds	r2, r2, r4
 80034ae:	eb45 0303 	adc.w	r3, r5, r3
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	00d9      	lsls	r1, r3, #3
 80034bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c0:	00d0      	lsls	r0, r2, #3
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	1911      	adds	r1, r2, r4
 80034c8:	6639      	str	r1, [r7, #96]	; 0x60
 80034ca:	416b      	adcs	r3, r5
 80034cc:	667b      	str	r3, [r7, #100]	; 0x64
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	1891      	adds	r1, r2, r2
 80034da:	63b9      	str	r1, [r7, #56]	; 0x38
 80034dc:	415b      	adcs	r3, r3
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034e8:	f7fc feca 	bl	8000280 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4ba5      	ldr	r3, [pc, #660]	; (8003788 <UART_SetConfig+0x38c>)
 80034f2:	fba3 2302 	umull	r2, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	011e      	lsls	r6, r3, #4
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	461c      	mov	r4, r3
 80034fe:	f04f 0500 	mov.w	r5, #0
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	1891      	adds	r1, r2, r2
 8003508:	6339      	str	r1, [r7, #48]	; 0x30
 800350a:	415b      	adcs	r3, r3
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
 800350e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003512:	1912      	adds	r2, r2, r4
 8003514:	eb45 0303 	adc.w	r3, r5, r3
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	00d9      	lsls	r1, r3, #3
 8003522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003526:	00d0      	lsls	r0, r2, #3
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	1911      	adds	r1, r2, r4
 800352e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003530:	416b      	adcs	r3, r5
 8003532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	461a      	mov	r2, r3
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	1891      	adds	r1, r2, r2
 8003540:	62b9      	str	r1, [r7, #40]	; 0x28
 8003542:	415b      	adcs	r3, r3
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800354a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800354e:	f7fc fe97 	bl	8000280 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <UART_SetConfig+0x38c>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	; 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	3332      	adds	r3, #50	; 0x32
 800356a:	4a87      	ldr	r2, [pc, #540]	; (8003788 <UART_SetConfig+0x38c>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003578:	441e      	add	r6, r3
 800357a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357c:	4618      	mov	r0, r3
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	1894      	adds	r4, r2, r2
 8003588:	623c      	str	r4, [r7, #32]
 800358a:	415b      	adcs	r3, r3
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003592:	1812      	adds	r2, r2, r0
 8003594:	eb41 0303 	adc.w	r3, r1, r3
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	f04f 0500 	mov.w	r5, #0
 80035a0:	00dd      	lsls	r5, r3, #3
 80035a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035a6:	00d4      	lsls	r4, r2, #3
 80035a8:	4622      	mov	r2, r4
 80035aa:	462b      	mov	r3, r5
 80035ac:	1814      	adds	r4, r2, r0
 80035ae:	653c      	str	r4, [r7, #80]	; 0x50
 80035b0:	414b      	adcs	r3, r1
 80035b2:	657b      	str	r3, [r7, #84]	; 0x54
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	61b9      	str	r1, [r7, #24]
 80035c2:	415b      	adcs	r3, r3
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035ce:	f7fc fe57 	bl	8000280 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <UART_SetConfig+0x38c>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a67      	ldr	r2, [pc, #412]	; (8003788 <UART_SetConfig+0x38c>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4432      	add	r2, r6
 80035fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035fe:	e0b9      	b.n	8003774 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003602:	461c      	mov	r4, r3
 8003604:	f04f 0500 	mov.w	r5, #0
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	1891      	adds	r1, r2, r2
 800360e:	6139      	str	r1, [r7, #16]
 8003610:	415b      	adcs	r3, r3
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003618:	1912      	adds	r2, r2, r4
 800361a:	eb45 0303 	adc.w	r3, r5, r3
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	00d9      	lsls	r1, r3, #3
 8003628:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800362c:	00d0      	lsls	r0, r2, #3
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	eb12 0804 	adds.w	r8, r2, r4
 8003636:	eb43 0905 	adc.w	r9, r3, r5
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003652:	0082      	lsls	r2, r0, #2
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc fe12 	bl	8000280 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4b49      	ldr	r3, [pc, #292]	; (8003788 <UART_SetConfig+0x38c>)
 8003662:	fba3 2302 	umull	r2, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	011e      	lsls	r6, r3, #4
 800366a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366c:	4618      	mov	r0, r3
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	1894      	adds	r4, r2, r2
 8003678:	60bc      	str	r4, [r7, #8]
 800367a:	415b      	adcs	r3, r3
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003682:	1812      	adds	r2, r2, r0
 8003684:	eb41 0303 	adc.w	r3, r1, r3
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	f04f 0500 	mov.w	r5, #0
 8003690:	00dd      	lsls	r5, r3, #3
 8003692:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003696:	00d4      	lsls	r4, r2, #3
 8003698:	4622      	mov	r2, r4
 800369a:	462b      	mov	r3, r5
 800369c:	1814      	adds	r4, r2, r0
 800369e:	64bc      	str	r4, [r7, #72]	; 0x48
 80036a0:	414b      	adcs	r3, r1
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	008b      	lsls	r3, r1, #2
 80036b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036bc:	0082      	lsls	r2, r0, #2
 80036be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036c2:	f7fc fddd 	bl	8000280 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <UART_SetConfig+0x38c>)
 80036cc:	fba3 1302 	umull	r1, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	2164      	movs	r1, #100	; 0x64
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	3332      	adds	r3, #50	; 0x32
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <UART_SetConfig+0x38c>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ea:	441e      	add	r6, r3
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	4618      	mov	r0, r3
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	1894      	adds	r4, r2, r2
 80036fa:	603c      	str	r4, [r7, #0]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003704:	1812      	adds	r2, r2, r0
 8003706:	eb41 0303 	adc.w	r3, r1, r3
 800370a:	f04f 0400 	mov.w	r4, #0
 800370e:	f04f 0500 	mov.w	r5, #0
 8003712:	00dd      	lsls	r5, r3, #3
 8003714:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003718:	00d4      	lsls	r4, r2, #3
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	eb12 0a00 	adds.w	sl, r2, r0
 8003722:	eb43 0b01 	adc.w	fp, r3, r1
 8003726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	008b      	lsls	r3, r1, #2
 800373a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800373e:	0082      	lsls	r2, r0, #2
 8003740:	4650      	mov	r0, sl
 8003742:	4659      	mov	r1, fp
 8003744:	f7fc fd9c 	bl	8000280 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <UART_SetConfig+0x38c>)
 800374e:	fba3 1302 	umull	r1, r3, r3, r2
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2164      	movs	r1, #100	; 0x64
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	3332      	adds	r3, #50	; 0x32
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <UART_SetConfig+0x38c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4432      	add	r2, r6
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	377c      	adds	r7, #124	; 0x7c
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	40011000 	.word	0x40011000
 8003784:	40011400 	.word	0x40011400
 8003788:	51eb851f 	.word	0x51eb851f

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	4d0d      	ldr	r5, [pc, #52]	; (80037c4 <__libc_init_array+0x38>)
 8003790:	4c0d      	ldr	r4, [pc, #52]	; (80037c8 <__libc_init_array+0x3c>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	2600      	movs	r6, #0
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	4d0b      	ldr	r5, [pc, #44]	; (80037cc <__libc_init_array+0x40>)
 800379e:	4c0c      	ldr	r4, [pc, #48]	; (80037d0 <__libc_init_array+0x44>)
 80037a0:	f000 fc54 	bl	800404c <_init>
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	2600      	movs	r6, #0
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	08004160 	.word	0x08004160
 80037c8:	08004160 	.word	0x08004160
 80037cc:	08004160 	.word	0x08004160
 80037d0:	08004164 	.word	0x08004164

080037d4 <siprintf>:
 80037d4:	b40e      	push	{r1, r2, r3}
 80037d6:	b500      	push	{lr}
 80037d8:	b09c      	sub	sp, #112	; 0x70
 80037da:	ab1d      	add	r3, sp, #116	; 0x74
 80037dc:	9002      	str	r0, [sp, #8]
 80037de:	9006      	str	r0, [sp, #24]
 80037e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037e4:	4809      	ldr	r0, [pc, #36]	; (800380c <siprintf+0x38>)
 80037e6:	9107      	str	r1, [sp, #28]
 80037e8:	9104      	str	r1, [sp, #16]
 80037ea:	4909      	ldr	r1, [pc, #36]	; (8003810 <siprintf+0x3c>)
 80037ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80037f0:	9105      	str	r1, [sp, #20]
 80037f2:	6800      	ldr	r0, [r0, #0]
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	a902      	add	r1, sp, #8
 80037f8:	f000 f868 	bl	80038cc <_svfiprintf_r>
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	b01c      	add	sp, #112	; 0x70
 8003804:	f85d eb04 	ldr.w	lr, [sp], #4
 8003808:	b003      	add	sp, #12
 800380a:	4770      	bx	lr
 800380c:	2000000c 	.word	0x2000000c
 8003810:	ffff0208 	.word	0xffff0208

08003814 <__ssputs_r>:
 8003814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	688e      	ldr	r6, [r1, #8]
 800381a:	429e      	cmp	r6, r3
 800381c:	4682      	mov	sl, r0
 800381e:	460c      	mov	r4, r1
 8003820:	4690      	mov	r8, r2
 8003822:	461f      	mov	r7, r3
 8003824:	d838      	bhi.n	8003898 <__ssputs_r+0x84>
 8003826:	898a      	ldrh	r2, [r1, #12]
 8003828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800382c:	d032      	beq.n	8003894 <__ssputs_r+0x80>
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	6909      	ldr	r1, [r1, #16]
 8003832:	eba5 0901 	sub.w	r9, r5, r1
 8003836:	6965      	ldr	r5, [r4, #20]
 8003838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800383c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003840:	3301      	adds	r3, #1
 8003842:	444b      	add	r3, r9
 8003844:	106d      	asrs	r5, r5, #1
 8003846:	429d      	cmp	r5, r3
 8003848:	bf38      	it	cc
 800384a:	461d      	movcc	r5, r3
 800384c:	0553      	lsls	r3, r2, #21
 800384e:	d531      	bpl.n	80038b4 <__ssputs_r+0xa0>
 8003850:	4629      	mov	r1, r5
 8003852:	f000 fb47 	bl	8003ee4 <_malloc_r>
 8003856:	4606      	mov	r6, r0
 8003858:	b950      	cbnz	r0, 8003870 <__ssputs_r+0x5c>
 800385a:	230c      	movs	r3, #12
 800385c:	f8ca 3000 	str.w	r3, [sl]
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003870:	6921      	ldr	r1, [r4, #16]
 8003872:	464a      	mov	r2, r9
 8003874:	f000 fabe 	bl	8003df4 <memcpy>
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800387e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003882:	81a3      	strh	r3, [r4, #12]
 8003884:	6126      	str	r6, [r4, #16]
 8003886:	6165      	str	r5, [r4, #20]
 8003888:	444e      	add	r6, r9
 800388a:	eba5 0509 	sub.w	r5, r5, r9
 800388e:	6026      	str	r6, [r4, #0]
 8003890:	60a5      	str	r5, [r4, #8]
 8003892:	463e      	mov	r6, r7
 8003894:	42be      	cmp	r6, r7
 8003896:	d900      	bls.n	800389a <__ssputs_r+0x86>
 8003898:	463e      	mov	r6, r7
 800389a:	4632      	mov	r2, r6
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	4641      	mov	r1, r8
 80038a0:	f000 fab6 	bl	8003e10 <memmove>
 80038a4:	68a3      	ldr	r3, [r4, #8]
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	4432      	add	r2, r6
 80038ac:	60a3      	str	r3, [r4, #8]
 80038ae:	6022      	str	r2, [r4, #0]
 80038b0:	2000      	movs	r0, #0
 80038b2:	e7db      	b.n	800386c <__ssputs_r+0x58>
 80038b4:	462a      	mov	r2, r5
 80038b6:	f000 fb6f 	bl	8003f98 <_realloc_r>
 80038ba:	4606      	mov	r6, r0
 80038bc:	2800      	cmp	r0, #0
 80038be:	d1e1      	bne.n	8003884 <__ssputs_r+0x70>
 80038c0:	6921      	ldr	r1, [r4, #16]
 80038c2:	4650      	mov	r0, sl
 80038c4:	f000 fabe 	bl	8003e44 <_free_r>
 80038c8:	e7c7      	b.n	800385a <__ssputs_r+0x46>
	...

080038cc <_svfiprintf_r>:
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	4698      	mov	r8, r3
 80038d2:	898b      	ldrh	r3, [r1, #12]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	b09d      	sub	sp, #116	; 0x74
 80038d8:	4607      	mov	r7, r0
 80038da:	460d      	mov	r5, r1
 80038dc:	4614      	mov	r4, r2
 80038de:	d50e      	bpl.n	80038fe <_svfiprintf_r+0x32>
 80038e0:	690b      	ldr	r3, [r1, #16]
 80038e2:	b963      	cbnz	r3, 80038fe <_svfiprintf_r+0x32>
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	f000 fafd 	bl	8003ee4 <_malloc_r>
 80038ea:	6028      	str	r0, [r5, #0]
 80038ec:	6128      	str	r0, [r5, #16]
 80038ee:	b920      	cbnz	r0, 80038fa <_svfiprintf_r+0x2e>
 80038f0:	230c      	movs	r3, #12
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	e0d1      	b.n	8003a9e <_svfiprintf_r+0x1d2>
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	616b      	str	r3, [r5, #20]
 80038fe:	2300      	movs	r3, #0
 8003900:	9309      	str	r3, [sp, #36]	; 0x24
 8003902:	2320      	movs	r3, #32
 8003904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003908:	f8cd 800c 	str.w	r8, [sp, #12]
 800390c:	2330      	movs	r3, #48	; 0x30
 800390e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ab8 <_svfiprintf_r+0x1ec>
 8003912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003916:	f04f 0901 	mov.w	r9, #1
 800391a:	4623      	mov	r3, r4
 800391c:	469a      	mov	sl, r3
 800391e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003922:	b10a      	cbz	r2, 8003928 <_svfiprintf_r+0x5c>
 8003924:	2a25      	cmp	r2, #37	; 0x25
 8003926:	d1f9      	bne.n	800391c <_svfiprintf_r+0x50>
 8003928:	ebba 0b04 	subs.w	fp, sl, r4
 800392c:	d00b      	beq.n	8003946 <_svfiprintf_r+0x7a>
 800392e:	465b      	mov	r3, fp
 8003930:	4622      	mov	r2, r4
 8003932:	4629      	mov	r1, r5
 8003934:	4638      	mov	r0, r7
 8003936:	f7ff ff6d 	bl	8003814 <__ssputs_r>
 800393a:	3001      	adds	r0, #1
 800393c:	f000 80aa 	beq.w	8003a94 <_svfiprintf_r+0x1c8>
 8003940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003942:	445a      	add	r2, fp
 8003944:	9209      	str	r2, [sp, #36]	; 0x24
 8003946:	f89a 3000 	ldrb.w	r3, [sl]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a2 	beq.w	8003a94 <_svfiprintf_r+0x1c8>
 8003950:	2300      	movs	r3, #0
 8003952:	f04f 32ff 	mov.w	r2, #4294967295
 8003956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800395a:	f10a 0a01 	add.w	sl, sl, #1
 800395e:	9304      	str	r3, [sp, #16]
 8003960:	9307      	str	r3, [sp, #28]
 8003962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003966:	931a      	str	r3, [sp, #104]	; 0x68
 8003968:	4654      	mov	r4, sl
 800396a:	2205      	movs	r2, #5
 800396c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003970:	4851      	ldr	r0, [pc, #324]	; (8003ab8 <_svfiprintf_r+0x1ec>)
 8003972:	f7fc fc35 	bl	80001e0 <memchr>
 8003976:	9a04      	ldr	r2, [sp, #16]
 8003978:	b9d8      	cbnz	r0, 80039b2 <_svfiprintf_r+0xe6>
 800397a:	06d0      	lsls	r0, r2, #27
 800397c:	bf44      	itt	mi
 800397e:	2320      	movmi	r3, #32
 8003980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003984:	0711      	lsls	r1, r2, #28
 8003986:	bf44      	itt	mi
 8003988:	232b      	movmi	r3, #43	; 0x2b
 800398a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800398e:	f89a 3000 	ldrb.w	r3, [sl]
 8003992:	2b2a      	cmp	r3, #42	; 0x2a
 8003994:	d015      	beq.n	80039c2 <_svfiprintf_r+0xf6>
 8003996:	9a07      	ldr	r2, [sp, #28]
 8003998:	4654      	mov	r4, sl
 800399a:	2000      	movs	r0, #0
 800399c:	f04f 0c0a 	mov.w	ip, #10
 80039a0:	4621      	mov	r1, r4
 80039a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039a6:	3b30      	subs	r3, #48	; 0x30
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d94e      	bls.n	8003a4a <_svfiprintf_r+0x17e>
 80039ac:	b1b0      	cbz	r0, 80039dc <_svfiprintf_r+0x110>
 80039ae:	9207      	str	r2, [sp, #28]
 80039b0:	e014      	b.n	80039dc <_svfiprintf_r+0x110>
 80039b2:	eba0 0308 	sub.w	r3, r0, r8
 80039b6:	fa09 f303 	lsl.w	r3, r9, r3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	9304      	str	r3, [sp, #16]
 80039be:	46a2      	mov	sl, r4
 80039c0:	e7d2      	b.n	8003968 <_svfiprintf_r+0x9c>
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	1d19      	adds	r1, r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	9103      	str	r1, [sp, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bfbb      	ittet	lt
 80039ce:	425b      	neglt	r3, r3
 80039d0:	f042 0202 	orrlt.w	r2, r2, #2
 80039d4:	9307      	strge	r3, [sp, #28]
 80039d6:	9307      	strlt	r3, [sp, #28]
 80039d8:	bfb8      	it	lt
 80039da:	9204      	strlt	r2, [sp, #16]
 80039dc:	7823      	ldrb	r3, [r4, #0]
 80039de:	2b2e      	cmp	r3, #46	; 0x2e
 80039e0:	d10c      	bne.n	80039fc <_svfiprintf_r+0x130>
 80039e2:	7863      	ldrb	r3, [r4, #1]
 80039e4:	2b2a      	cmp	r3, #42	; 0x2a
 80039e6:	d135      	bne.n	8003a54 <_svfiprintf_r+0x188>
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	9203      	str	r2, [sp, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bfb8      	it	lt
 80039f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039f8:	3402      	adds	r4, #2
 80039fa:	9305      	str	r3, [sp, #20]
 80039fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ac8 <_svfiprintf_r+0x1fc>
 8003a00:	7821      	ldrb	r1, [r4, #0]
 8003a02:	2203      	movs	r2, #3
 8003a04:	4650      	mov	r0, sl
 8003a06:	f7fc fbeb 	bl	80001e0 <memchr>
 8003a0a:	b140      	cbz	r0, 8003a1e <_svfiprintf_r+0x152>
 8003a0c:	2340      	movs	r3, #64	; 0x40
 8003a0e:	eba0 000a 	sub.w	r0, r0, sl
 8003a12:	fa03 f000 	lsl.w	r0, r3, r0
 8003a16:	9b04      	ldr	r3, [sp, #16]
 8003a18:	4303      	orrs	r3, r0
 8003a1a:	3401      	adds	r4, #1
 8003a1c:	9304      	str	r3, [sp, #16]
 8003a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a22:	4826      	ldr	r0, [pc, #152]	; (8003abc <_svfiprintf_r+0x1f0>)
 8003a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a28:	2206      	movs	r2, #6
 8003a2a:	f7fc fbd9 	bl	80001e0 <memchr>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d038      	beq.n	8003aa4 <_svfiprintf_r+0x1d8>
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <_svfiprintf_r+0x1f4>)
 8003a34:	bb1b      	cbnz	r3, 8003a7e <_svfiprintf_r+0x1b2>
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	3307      	adds	r3, #7
 8003a3a:	f023 0307 	bic.w	r3, r3, #7
 8003a3e:	3308      	adds	r3, #8
 8003a40:	9303      	str	r3, [sp, #12]
 8003a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a44:	4433      	add	r3, r6
 8003a46:	9309      	str	r3, [sp, #36]	; 0x24
 8003a48:	e767      	b.n	800391a <_svfiprintf_r+0x4e>
 8003a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a4e:	460c      	mov	r4, r1
 8003a50:	2001      	movs	r0, #1
 8003a52:	e7a5      	b.n	80039a0 <_svfiprintf_r+0xd4>
 8003a54:	2300      	movs	r3, #0
 8003a56:	3401      	adds	r4, #1
 8003a58:	9305      	str	r3, [sp, #20]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 0c0a 	mov.w	ip, #10
 8003a60:	4620      	mov	r0, r4
 8003a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a66:	3a30      	subs	r2, #48	; 0x30
 8003a68:	2a09      	cmp	r2, #9
 8003a6a:	d903      	bls.n	8003a74 <_svfiprintf_r+0x1a8>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0c5      	beq.n	80039fc <_svfiprintf_r+0x130>
 8003a70:	9105      	str	r1, [sp, #20]
 8003a72:	e7c3      	b.n	80039fc <_svfiprintf_r+0x130>
 8003a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a78:	4604      	mov	r4, r0
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e7f0      	b.n	8003a60 <_svfiprintf_r+0x194>
 8003a7e:	ab03      	add	r3, sp, #12
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	462a      	mov	r2, r5
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <_svfiprintf_r+0x1f8>)
 8003a86:	a904      	add	r1, sp, #16
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f3af 8000 	nop.w
 8003a8e:	1c42      	adds	r2, r0, #1
 8003a90:	4606      	mov	r6, r0
 8003a92:	d1d6      	bne.n	8003a42 <_svfiprintf_r+0x176>
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	065b      	lsls	r3, r3, #25
 8003a98:	f53f af2c 	bmi.w	80038f4 <_svfiprintf_r+0x28>
 8003a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a9e:	b01d      	add	sp, #116	; 0x74
 8003aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa4:	ab03      	add	r3, sp, #12
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <_svfiprintf_r+0x1f8>)
 8003aac:	a904      	add	r1, sp, #16
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f000 f87a 	bl	8003ba8 <_printf_i>
 8003ab4:	e7eb      	b.n	8003a8e <_svfiprintf_r+0x1c2>
 8003ab6:	bf00      	nop
 8003ab8:	08004124 	.word	0x08004124
 8003abc:	0800412e 	.word	0x0800412e
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	08003815 	.word	0x08003815
 8003ac8:	0800412a 	.word	0x0800412a

08003acc <_printf_common>:
 8003acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad0:	4616      	mov	r6, r2
 8003ad2:	4699      	mov	r9, r3
 8003ad4:	688a      	ldr	r2, [r1, #8]
 8003ad6:	690b      	ldr	r3, [r1, #16]
 8003ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bfb8      	it	lt
 8003ae0:	4613      	movlt	r3, r2
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ae8:	4607      	mov	r7, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	b10a      	cbz	r2, 8003af2 <_printf_common+0x26>
 8003aee:	3301      	adds	r3, #1
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	0699      	lsls	r1, r3, #26
 8003af6:	bf42      	ittt	mi
 8003af8:	6833      	ldrmi	r3, [r6, #0]
 8003afa:	3302      	addmi	r3, #2
 8003afc:	6033      	strmi	r3, [r6, #0]
 8003afe:	6825      	ldr	r5, [r4, #0]
 8003b00:	f015 0506 	ands.w	r5, r5, #6
 8003b04:	d106      	bne.n	8003b14 <_printf_common+0x48>
 8003b06:	f104 0a19 	add.w	sl, r4, #25
 8003b0a:	68e3      	ldr	r3, [r4, #12]
 8003b0c:	6832      	ldr	r2, [r6, #0]
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	42ab      	cmp	r3, r5
 8003b12:	dc26      	bgt.n	8003b62 <_printf_common+0x96>
 8003b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b18:	1e13      	subs	r3, r2, #0
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	bf18      	it	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	0692      	lsls	r2, r2, #26
 8003b22:	d42b      	bmi.n	8003b7c <_printf_common+0xb0>
 8003b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	47c0      	blx	r8
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d01e      	beq.n	8003b70 <_printf_common+0xa4>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	68e5      	ldr	r5, [r4, #12]
 8003b36:	6832      	ldr	r2, [r6, #0]
 8003b38:	f003 0306 	and.w	r3, r3, #6
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	bf08      	it	eq
 8003b40:	1aad      	subeq	r5, r5, r2
 8003b42:	68a3      	ldr	r3, [r4, #8]
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	bf0c      	ite	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	2500      	movne	r5, #0
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	bfc4      	itt	gt
 8003b52:	1a9b      	subgt	r3, r3, r2
 8003b54:	18ed      	addgt	r5, r5, r3
 8003b56:	2600      	movs	r6, #0
 8003b58:	341a      	adds	r4, #26
 8003b5a:	42b5      	cmp	r5, r6
 8003b5c:	d11a      	bne.n	8003b94 <_printf_common+0xc8>
 8003b5e:	2000      	movs	r0, #0
 8003b60:	e008      	b.n	8003b74 <_printf_common+0xa8>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4652      	mov	r2, sl
 8003b66:	4649      	mov	r1, r9
 8003b68:	4638      	mov	r0, r7
 8003b6a:	47c0      	blx	r8
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d103      	bne.n	8003b78 <_printf_common+0xac>
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b78:	3501      	adds	r5, #1
 8003b7a:	e7c6      	b.n	8003b0a <_printf_common+0x3e>
 8003b7c:	18e1      	adds	r1, r4, r3
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	2030      	movs	r0, #48	; 0x30
 8003b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b86:	4422      	add	r2, r4
 8003b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b90:	3302      	adds	r3, #2
 8003b92:	e7c7      	b.n	8003b24 <_printf_common+0x58>
 8003b94:	2301      	movs	r3, #1
 8003b96:	4622      	mov	r2, r4
 8003b98:	4649      	mov	r1, r9
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	47c0      	blx	r8
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d0e6      	beq.n	8003b70 <_printf_common+0xa4>
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7d9      	b.n	8003b5a <_printf_common+0x8e>
	...

08003ba8 <_printf_i>:
 8003ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bac:	460c      	mov	r4, r1
 8003bae:	4691      	mov	r9, r2
 8003bb0:	7e27      	ldrb	r7, [r4, #24]
 8003bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bb4:	2f78      	cmp	r7, #120	; 0x78
 8003bb6:	4680      	mov	r8, r0
 8003bb8:	469a      	mov	sl, r3
 8003bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bbe:	d807      	bhi.n	8003bd0 <_printf_i+0x28>
 8003bc0:	2f62      	cmp	r7, #98	; 0x62
 8003bc2:	d80a      	bhi.n	8003bda <_printf_i+0x32>
 8003bc4:	2f00      	cmp	r7, #0
 8003bc6:	f000 80d8 	beq.w	8003d7a <_printf_i+0x1d2>
 8003bca:	2f58      	cmp	r7, #88	; 0x58
 8003bcc:	f000 80a3 	beq.w	8003d16 <_printf_i+0x16e>
 8003bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bd8:	e03a      	b.n	8003c50 <_printf_i+0xa8>
 8003bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bde:	2b15      	cmp	r3, #21
 8003be0:	d8f6      	bhi.n	8003bd0 <_printf_i+0x28>
 8003be2:	a001      	add	r0, pc, #4	; (adr r0, 8003be8 <_printf_i+0x40>)
 8003be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003be8:	08003c41 	.word	0x08003c41
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003bd1 	.word	0x08003bd1
 8003bf4:	08003bd1 	.word	0x08003bd1
 8003bf8:	08003bd1 	.word	0x08003bd1
 8003bfc:	08003bd1 	.word	0x08003bd1
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003bd1 	.word	0x08003bd1
 8003c08:	08003bd1 	.word	0x08003bd1
 8003c0c:	08003bd1 	.word	0x08003bd1
 8003c10:	08003bd1 	.word	0x08003bd1
 8003c14:	08003d61 	.word	0x08003d61
 8003c18:	08003c85 	.word	0x08003c85
 8003c1c:	08003d43 	.word	0x08003d43
 8003c20:	08003bd1 	.word	0x08003bd1
 8003c24:	08003bd1 	.word	0x08003bd1
 8003c28:	08003d83 	.word	0x08003d83
 8003c2c:	08003bd1 	.word	0x08003bd1
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003bd1 	.word	0x08003bd1
 8003c38:	08003bd1 	.word	0x08003bd1
 8003c3c:	08003d4b 	.word	0x08003d4b
 8003c40:	680b      	ldr	r3, [r1, #0]
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	600a      	str	r2, [r1, #0]
 8003c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0a3      	b.n	8003d9c <_printf_i+0x1f4>
 8003c54:	6825      	ldr	r5, [r4, #0]
 8003c56:	6808      	ldr	r0, [r1, #0]
 8003c58:	062e      	lsls	r6, r5, #24
 8003c5a:	f100 0304 	add.w	r3, r0, #4
 8003c5e:	d50a      	bpl.n	8003c76 <_printf_i+0xce>
 8003c60:	6805      	ldr	r5, [r0, #0]
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	da03      	bge.n	8003c70 <_printf_i+0xc8>
 8003c68:	232d      	movs	r3, #45	; 0x2d
 8003c6a:	426d      	negs	r5, r5
 8003c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c70:	485e      	ldr	r0, [pc, #376]	; (8003dec <_printf_i+0x244>)
 8003c72:	230a      	movs	r3, #10
 8003c74:	e019      	b.n	8003caa <_printf_i+0x102>
 8003c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c7a:	6805      	ldr	r5, [r0, #0]
 8003c7c:	600b      	str	r3, [r1, #0]
 8003c7e:	bf18      	it	ne
 8003c80:	b22d      	sxthne	r5, r5
 8003c82:	e7ef      	b.n	8003c64 <_printf_i+0xbc>
 8003c84:	680b      	ldr	r3, [r1, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	1d18      	adds	r0, r3, #4
 8003c8a:	6008      	str	r0, [r1, #0]
 8003c8c:	0628      	lsls	r0, r5, #24
 8003c8e:	d501      	bpl.n	8003c94 <_printf_i+0xec>
 8003c90:	681d      	ldr	r5, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <_printf_i+0xf2>
 8003c94:	0669      	lsls	r1, r5, #25
 8003c96:	d5fb      	bpl.n	8003c90 <_printf_i+0xe8>
 8003c98:	881d      	ldrh	r5, [r3, #0]
 8003c9a:	4854      	ldr	r0, [pc, #336]	; (8003dec <_printf_i+0x244>)
 8003c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2308      	moveq	r3, #8
 8003ca2:	230a      	movne	r3, #10
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003caa:	6866      	ldr	r6, [r4, #4]
 8003cac:	60a6      	str	r6, [r4, #8]
 8003cae:	2e00      	cmp	r6, #0
 8003cb0:	bfa2      	ittt	ge
 8003cb2:	6821      	ldrge	r1, [r4, #0]
 8003cb4:	f021 0104 	bicge.w	r1, r1, #4
 8003cb8:	6021      	strge	r1, [r4, #0]
 8003cba:	b90d      	cbnz	r5, 8003cc0 <_printf_i+0x118>
 8003cbc:	2e00      	cmp	r6, #0
 8003cbe:	d04d      	beq.n	8003d5c <_printf_i+0x1b4>
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8003cca:	5dc7      	ldrb	r7, [r0, r7]
 8003ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cd0:	462f      	mov	r7, r5
 8003cd2:	42bb      	cmp	r3, r7
 8003cd4:	460d      	mov	r5, r1
 8003cd6:	d9f4      	bls.n	8003cc2 <_printf_i+0x11a>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d10b      	bne.n	8003cf4 <_printf_i+0x14c>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	07df      	lsls	r7, r3, #31
 8003ce0:	d508      	bpl.n	8003cf4 <_printf_i+0x14c>
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	6861      	ldr	r1, [r4, #4]
 8003ce6:	4299      	cmp	r1, r3
 8003ce8:	bfde      	ittt	le
 8003cea:	2330      	movle	r3, #48	; 0x30
 8003cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cf4:	1b92      	subs	r2, r2, r6
 8003cf6:	6122      	str	r2, [r4, #16]
 8003cf8:	f8cd a000 	str.w	sl, [sp]
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	aa03      	add	r2, sp, #12
 8003d00:	4621      	mov	r1, r4
 8003d02:	4640      	mov	r0, r8
 8003d04:	f7ff fee2 	bl	8003acc <_printf_common>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d14c      	bne.n	8003da6 <_printf_i+0x1fe>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	b004      	add	sp, #16
 8003d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d16:	4835      	ldr	r0, [pc, #212]	; (8003dec <_printf_i+0x244>)
 8003d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	680e      	ldr	r6, [r1, #0]
 8003d20:	061f      	lsls	r7, r3, #24
 8003d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d26:	600e      	str	r6, [r1, #0]
 8003d28:	d514      	bpl.n	8003d54 <_printf_i+0x1ac>
 8003d2a:	07d9      	lsls	r1, r3, #31
 8003d2c:	bf44      	itt	mi
 8003d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d32:	6023      	strmi	r3, [r4, #0]
 8003d34:	b91d      	cbnz	r5, 8003d3e <_printf_i+0x196>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	f023 0320 	bic.w	r3, r3, #32
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	2310      	movs	r3, #16
 8003d40:	e7b0      	b.n	8003ca4 <_printf_i+0xfc>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	f043 0320 	orr.w	r3, r3, #32
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	2378      	movs	r3, #120	; 0x78
 8003d4c:	4828      	ldr	r0, [pc, #160]	; (8003df0 <_printf_i+0x248>)
 8003d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d52:	e7e3      	b.n	8003d1c <_printf_i+0x174>
 8003d54:	065e      	lsls	r6, r3, #25
 8003d56:	bf48      	it	mi
 8003d58:	b2ad      	uxthmi	r5, r5
 8003d5a:	e7e6      	b.n	8003d2a <_printf_i+0x182>
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	e7bb      	b.n	8003cd8 <_printf_i+0x130>
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	6826      	ldr	r6, [r4, #0]
 8003d64:	6960      	ldr	r0, [r4, #20]
 8003d66:	1d1d      	adds	r5, r3, #4
 8003d68:	600d      	str	r5, [r1, #0]
 8003d6a:	0635      	lsls	r5, r6, #24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	d501      	bpl.n	8003d74 <_printf_i+0x1cc>
 8003d70:	6018      	str	r0, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <_printf_i+0x1d2>
 8003d74:	0671      	lsls	r1, r6, #25
 8003d76:	d5fb      	bpl.n	8003d70 <_printf_i+0x1c8>
 8003d78:	8018      	strh	r0, [r3, #0]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	4616      	mov	r6, r2
 8003d80:	e7ba      	b.n	8003cf8 <_printf_i+0x150>
 8003d82:	680b      	ldr	r3, [r1, #0]
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	600a      	str	r2, [r1, #0]
 8003d88:	681e      	ldr	r6, [r3, #0]
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f7fc fa26 	bl	80001e0 <memchr>
 8003d94:	b108      	cbz	r0, 8003d9a <_printf_i+0x1f2>
 8003d96:	1b80      	subs	r0, r0, r6
 8003d98:	6060      	str	r0, [r4, #4]
 8003d9a:	6863      	ldr	r3, [r4, #4]
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da4:	e7a8      	b.n	8003cf8 <_printf_i+0x150>
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	4632      	mov	r2, r6
 8003daa:	4649      	mov	r1, r9
 8003dac:	4640      	mov	r0, r8
 8003dae:	47d0      	blx	sl
 8003db0:	3001      	adds	r0, #1
 8003db2:	d0ab      	beq.n	8003d0c <_printf_i+0x164>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	079b      	lsls	r3, r3, #30
 8003db8:	d413      	bmi.n	8003de2 <_printf_i+0x23a>
 8003dba:	68e0      	ldr	r0, [r4, #12]
 8003dbc:	9b03      	ldr	r3, [sp, #12]
 8003dbe:	4298      	cmp	r0, r3
 8003dc0:	bfb8      	it	lt
 8003dc2:	4618      	movlt	r0, r3
 8003dc4:	e7a4      	b.n	8003d10 <_printf_i+0x168>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4632      	mov	r2, r6
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4640      	mov	r0, r8
 8003dce:	47d0      	blx	sl
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d09b      	beq.n	8003d0c <_printf_i+0x164>
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	9903      	ldr	r1, [sp, #12]
 8003dda:	1a5b      	subs	r3, r3, r1
 8003ddc:	42ab      	cmp	r3, r5
 8003dde:	dcf2      	bgt.n	8003dc6 <_printf_i+0x21e>
 8003de0:	e7eb      	b.n	8003dba <_printf_i+0x212>
 8003de2:	2500      	movs	r5, #0
 8003de4:	f104 0619 	add.w	r6, r4, #25
 8003de8:	e7f5      	b.n	8003dd6 <_printf_i+0x22e>
 8003dea:	bf00      	nop
 8003dec:	08004135 	.word	0x08004135
 8003df0:	08004146 	.word	0x08004146

08003df4 <memcpy>:
 8003df4:	440a      	add	r2, r1
 8003df6:	4291      	cmp	r1, r2
 8003df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dfc:	d100      	bne.n	8003e00 <memcpy+0xc>
 8003dfe:	4770      	bx	lr
 8003e00:	b510      	push	{r4, lr}
 8003e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	d1f9      	bne.n	8003e02 <memcpy+0xe>
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <memmove>:
 8003e10:	4288      	cmp	r0, r1
 8003e12:	b510      	push	{r4, lr}
 8003e14:	eb01 0402 	add.w	r4, r1, r2
 8003e18:	d902      	bls.n	8003e20 <memmove+0x10>
 8003e1a:	4284      	cmp	r4, r0
 8003e1c:	4623      	mov	r3, r4
 8003e1e:	d807      	bhi.n	8003e30 <memmove+0x20>
 8003e20:	1e43      	subs	r3, r0, #1
 8003e22:	42a1      	cmp	r1, r4
 8003e24:	d008      	beq.n	8003e38 <memmove+0x28>
 8003e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e2e:	e7f8      	b.n	8003e22 <memmove+0x12>
 8003e30:	4402      	add	r2, r0
 8003e32:	4601      	mov	r1, r0
 8003e34:	428a      	cmp	r2, r1
 8003e36:	d100      	bne.n	8003e3a <memmove+0x2a>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e42:	e7f7      	b.n	8003e34 <memmove+0x24>

08003e44 <_free_r>:
 8003e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e46:	2900      	cmp	r1, #0
 8003e48:	d048      	beq.n	8003edc <_free_r+0x98>
 8003e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e4e:	9001      	str	r0, [sp, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f1a1 0404 	sub.w	r4, r1, #4
 8003e56:	bfb8      	it	lt
 8003e58:	18e4      	addlt	r4, r4, r3
 8003e5a:	f000 f8d3 	bl	8004004 <__malloc_lock>
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <_free_r+0x9c>)
 8003e60:	9801      	ldr	r0, [sp, #4]
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	4615      	mov	r5, r2
 8003e66:	b933      	cbnz	r3, 8003e76 <_free_r+0x32>
 8003e68:	6063      	str	r3, [r4, #4]
 8003e6a:	6014      	str	r4, [r2, #0]
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e72:	f000 b8cd 	b.w	8004010 <__malloc_unlock>
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	d90b      	bls.n	8003e92 <_free_r+0x4e>
 8003e7a:	6821      	ldr	r1, [r4, #0]
 8003e7c:	1862      	adds	r2, r4, r1
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bf04      	itt	eq
 8003e82:	681a      	ldreq	r2, [r3, #0]
 8003e84:	685b      	ldreq	r3, [r3, #4]
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	bf04      	itt	eq
 8003e8a:	1852      	addeq	r2, r2, r1
 8003e8c:	6022      	streq	r2, [r4, #0]
 8003e8e:	602c      	str	r4, [r5, #0]
 8003e90:	e7ec      	b.n	8003e6c <_free_r+0x28>
 8003e92:	461a      	mov	r2, r3
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b10b      	cbz	r3, 8003e9c <_free_r+0x58>
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	d9fa      	bls.n	8003e92 <_free_r+0x4e>
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	1855      	adds	r5, r2, r1
 8003ea0:	42a5      	cmp	r5, r4
 8003ea2:	d10b      	bne.n	8003ebc <_free_r+0x78>
 8003ea4:	6824      	ldr	r4, [r4, #0]
 8003ea6:	4421      	add	r1, r4
 8003ea8:	1854      	adds	r4, r2, r1
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	6011      	str	r1, [r2, #0]
 8003eae:	d1dd      	bne.n	8003e6c <_free_r+0x28>
 8003eb0:	681c      	ldr	r4, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	6053      	str	r3, [r2, #4]
 8003eb6:	4421      	add	r1, r4
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	e7d7      	b.n	8003e6c <_free_r+0x28>
 8003ebc:	d902      	bls.n	8003ec4 <_free_r+0x80>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	6003      	str	r3, [r0, #0]
 8003ec2:	e7d3      	b.n	8003e6c <_free_r+0x28>
 8003ec4:	6825      	ldr	r5, [r4, #0]
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	bf04      	itt	eq
 8003ecc:	6819      	ldreq	r1, [r3, #0]
 8003ece:	685b      	ldreq	r3, [r3, #4]
 8003ed0:	6063      	str	r3, [r4, #4]
 8003ed2:	bf04      	itt	eq
 8003ed4:	1949      	addeq	r1, r1, r5
 8003ed6:	6021      	streq	r1, [r4, #0]
 8003ed8:	6054      	str	r4, [r2, #4]
 8003eda:	e7c7      	b.n	8003e6c <_free_r+0x28>
 8003edc:	b003      	add	sp, #12
 8003ede:	bd30      	pop	{r4, r5, pc}
 8003ee0:	20000090 	.word	0x20000090

08003ee4 <_malloc_r>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	1ccd      	adds	r5, r1, #3
 8003ee8:	f025 0503 	bic.w	r5, r5, #3
 8003eec:	3508      	adds	r5, #8
 8003eee:	2d0c      	cmp	r5, #12
 8003ef0:	bf38      	it	cc
 8003ef2:	250c      	movcc	r5, #12
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	db01      	blt.n	8003efe <_malloc_r+0x1a>
 8003efa:	42a9      	cmp	r1, r5
 8003efc:	d903      	bls.n	8003f06 <_malloc_r+0x22>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	2000      	movs	r0, #0
 8003f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f06:	f000 f87d 	bl	8004004 <__malloc_lock>
 8003f0a:	4921      	ldr	r1, [pc, #132]	; (8003f90 <_malloc_r+0xac>)
 8003f0c:	680a      	ldr	r2, [r1, #0]
 8003f0e:	4614      	mov	r4, r2
 8003f10:	b99c      	cbnz	r4, 8003f3a <_malloc_r+0x56>
 8003f12:	4f20      	ldr	r7, [pc, #128]	; (8003f94 <_malloc_r+0xb0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b923      	cbnz	r3, 8003f22 <_malloc_r+0x3e>
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f862 	bl	8003fe4 <_sbrk_r>
 8003f20:	6038      	str	r0, [r7, #0]
 8003f22:	4629      	mov	r1, r5
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f85d 	bl	8003fe4 <_sbrk_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d123      	bne.n	8003f76 <_malloc_r+0x92>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	6033      	str	r3, [r6, #0]
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 f86c 	bl	8004010 <__malloc_unlock>
 8003f38:	e7e3      	b.n	8003f02 <_malloc_r+0x1e>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	1b5b      	subs	r3, r3, r5
 8003f3e:	d417      	bmi.n	8003f70 <_malloc_r+0x8c>
 8003f40:	2b0b      	cmp	r3, #11
 8003f42:	d903      	bls.n	8003f4c <_malloc_r+0x68>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	441c      	add	r4, r3
 8003f48:	6025      	str	r5, [r4, #0]
 8003f4a:	e004      	b.n	8003f56 <_malloc_r+0x72>
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	42a2      	cmp	r2, r4
 8003f50:	bf0c      	ite	eq
 8003f52:	600b      	streq	r3, [r1, #0]
 8003f54:	6053      	strne	r3, [r2, #4]
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f85a 	bl	8004010 <__malloc_unlock>
 8003f5c:	f104 000b 	add.w	r0, r4, #11
 8003f60:	1d23      	adds	r3, r4, #4
 8003f62:	f020 0007 	bic.w	r0, r0, #7
 8003f66:	1ac2      	subs	r2, r0, r3
 8003f68:	d0cc      	beq.n	8003f04 <_malloc_r+0x20>
 8003f6a:	1a1b      	subs	r3, r3, r0
 8003f6c:	50a3      	str	r3, [r4, r2]
 8003f6e:	e7c9      	b.n	8003f04 <_malloc_r+0x20>
 8003f70:	4622      	mov	r2, r4
 8003f72:	6864      	ldr	r4, [r4, #4]
 8003f74:	e7cc      	b.n	8003f10 <_malloc_r+0x2c>
 8003f76:	1cc4      	adds	r4, r0, #3
 8003f78:	f024 0403 	bic.w	r4, r4, #3
 8003f7c:	42a0      	cmp	r0, r4
 8003f7e:	d0e3      	beq.n	8003f48 <_malloc_r+0x64>
 8003f80:	1a21      	subs	r1, r4, r0
 8003f82:	4630      	mov	r0, r6
 8003f84:	f000 f82e 	bl	8003fe4 <_sbrk_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d1dd      	bne.n	8003f48 <_malloc_r+0x64>
 8003f8c:	e7cf      	b.n	8003f2e <_malloc_r+0x4a>
 8003f8e:	bf00      	nop
 8003f90:	20000090 	.word	0x20000090
 8003f94:	20000094 	.word	0x20000094

08003f98 <_realloc_r>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	4607      	mov	r7, r0
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	b921      	cbnz	r1, 8003fac <_realloc_r+0x14>
 8003fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	f7ff bf9c 	b.w	8003ee4 <_malloc_r>
 8003fac:	b922      	cbnz	r2, 8003fb8 <_realloc_r+0x20>
 8003fae:	f7ff ff49 	bl	8003e44 <_free_r>
 8003fb2:	4625      	mov	r5, r4
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb8:	f000 f830 	bl	800401c <_malloc_usable_size_r>
 8003fbc:	42a0      	cmp	r0, r4
 8003fbe:	d20f      	bcs.n	8003fe0 <_realloc_r+0x48>
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f7ff ff8e 	bl	8003ee4 <_malloc_r>
 8003fc8:	4605      	mov	r5, r0
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d0f2      	beq.n	8003fb4 <_realloc_r+0x1c>
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	f7ff ff0f 	bl	8003df4 <memcpy>
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f7ff ff33 	bl	8003e44 <_free_r>
 8003fde:	e7e9      	b.n	8003fb4 <_realloc_r+0x1c>
 8003fe0:	4635      	mov	r5, r6
 8003fe2:	e7e7      	b.n	8003fb4 <_realloc_r+0x1c>

08003fe4 <_sbrk_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d06      	ldr	r5, [pc, #24]	; (8004000 <_sbrk_r+0x1c>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	f000 f81e 	bl	8004030 <_sbrk>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_sbrk_r+0x1a>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_sbrk_r+0x1a>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	20000170 	.word	0x20000170

08004004 <__malloc_lock>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__malloc_lock+0x8>)
 8004006:	f000 b811 	b.w	800402c <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	20000178 	.word	0x20000178

08004010 <__malloc_unlock>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__malloc_unlock+0x8>)
 8004012:	f000 b80c 	b.w	800402e <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	20000178 	.word	0x20000178

0800401c <_malloc_usable_size_r>:
 800401c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004020:	1f18      	subs	r0, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfbc      	itt	lt
 8004026:	580b      	ldrlt	r3, [r1, r0]
 8004028:	18c0      	addlt	r0, r0, r3
 800402a:	4770      	bx	lr

0800402c <__retarget_lock_acquire_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_release_recursive>:
 800402e:	4770      	bx	lr

08004030 <_sbrk>:
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <_sbrk+0x14>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	4602      	mov	r2, r0
 8004036:	b909      	cbnz	r1, 800403c <_sbrk+0xc>
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <_sbrk+0x18>)
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	4402      	add	r2, r0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	4770      	bx	lr
 8004044:	20000098 	.word	0x20000098
 8004048:	20000180 	.word	0x20000180

0800404c <_init>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

08004058 <_fini>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr
