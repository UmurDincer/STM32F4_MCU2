
021WFE_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002044  08002044  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800204c  0800204c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08002054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000000fc  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009501  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001446  00000000  00000000  000295cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e8  00000000  00000000  0002aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021362  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008340  00000000  00000000  0004c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdca4  00000000  00000000  000546a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122346  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000568  00000000  00000000  001223a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ad4  00000000  00000000  00122908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001fd0 	.word	0x08001fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08001fd0 	.word	0x08001fd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SysTick_Handler>:
#include"main.h"

extern TIM_HandleTypeDef htimer6;
extern UART_HandleTypeDef huart2;
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800057c:	f000 fa1a 	bl	80009b4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000580:	f000 fb8d 	bl	8000c9e <HAL_SYSTICK_IRQHandler>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <EXTI0_IRQHandler>:
}
*/


void EXTI0_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fd49 	bl	8001024 <HAL_GPIO_EXTI_IRQHandler>
 }
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <main>:
extern uint8_t some_data[];

char message[50];

int main()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_Init();
 800059c:	f000 f9b8 	bl	8000910 <HAL_Init>
	UART2_Init();
 80005a0:	f000 f8bc 	bl	800071c <UART2_Init>
	GPIO_Init();
 80005a4:	f000 f862 	bl	800066c <GPIO_Init>
	GPIO_AnalogConfig(); //set unused pins of configured GPIO as analog pin to save power.
 80005a8:	f000 f8de 	bl	8000768 <GPIO_AnalogConfig>

	while(1)
	{

		if(HAL_UART_Transmit(&huart2, (uint8_t *)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK)
 80005ac:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0xbc>)
 80005ae:	f7ff fe0f 	bl	80001d0 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	4926      	ldr	r1, [pc, #152]	; (8000654 <main+0xbc>)
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <main+0xc0>)
 80005be:	f000 fdd6 	bl	800116e <HAL_UART_Transmit>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <main+0x34>
		{
			Error_handler();
 80005c8:	f000 f8f2 	bl	80007b0 <Error_handler>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80005d2:	4822      	ldr	r0, [pc, #136]	; (800065c <main+0xc4>)
 80005d4:	f000 fd0c 	bl	8000ff0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80005d8:	2032      	movs	r0, #50	; 0x32
 80005da:	f000 fa0b 	bl	80009f4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80005e4:	481d      	ldr	r0, [pc, #116]	; (800065c <main+0xc4>)
 80005e6:	f000 fd03 	bl	8000ff0 <HAL_GPIO_WritePin>

		memset(message, 0, sizeof(message));
 80005ea:	2232      	movs	r2, #50	; 0x32
 80005ec:	2100      	movs	r1, #0
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xc8>)
 80005f0:	f001 f8aa 	bl	8001748 <memset>

		sprintf(message, "Going to sleep! \r\n");
 80005f4:	491b      	ldr	r1, [pc, #108]	; (8000664 <main+0xcc>)
 80005f6:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0xc8>)
 80005f8:	f001 f8ae 	bl	8001758 <siprintf>
		if(HAL_UART_Transmit(&huart2, (uint8_t *)message, (uint16_t)strlen((char*)message), HAL_MAX_DELAY) != HAL_OK)
 80005fc:	4818      	ldr	r0, [pc, #96]	; (8000660 <main+0xc8>)
 80005fe:	f7ff fde7 	bl	80001d0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	4915      	ldr	r1, [pc, #84]	; (8000660 <main+0xc8>)
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0xc0>)
 800060e:	f000 fdae 	bl	800116e <HAL_UART_Transmit>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <main+0x84>
		{
			Error_handler();
 8000618:	f000 f8ca 	bl	80007b0 <Error_handler>
		}

		/*Systic is not required so disabled it before going to sleep*/
		HAL_SuspendTick();
 800061c:	f000 fa0e 	bl	8000a3c <HAL_SuspendTick>
		//going to sleep
		__WFE();
 8000620:	bf20      	wfe
		__WFE(); // used __WFE instruction second times because of race condition.
 8000622:	bf20      	wfe
				//  systick interrupt is fired just before the instruction executed so WFE is immediately excited and wakes up again.
		//MCU resumes here when it wakes up

		/*Enable the Systick*/
		HAL_ResumeTick();
 8000624:	f000 fa1a 	bl	8000a5c <HAL_ResumeTick>
		sprintf(message, "Woke up! \r\n");
 8000628:	490f      	ldr	r1, [pc, #60]	; (8000668 <main+0xd0>)
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <main+0xc8>)
 800062c:	f001 f894 	bl	8001758 <siprintf>
		if(HAL_UART_Transmit(&huart2, (uint8_t *)message, (uint16_t)strlen((char*)message), HAL_MAX_DELAY) != HAL_OK)
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <main+0xc8>)
 8000632:	f7ff fdcd 	bl	80001d0 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <main+0xc8>)
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0xc0>)
 8000642:	f000 fd94 	bl	800116e <HAL_UART_Transmit>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0af      	beq.n	80005ac <main+0x14>
		{
			Error_handler();
 800064c:	f000 f8b0 	bl	80007b0 <Error_handler>
		if(HAL_UART_Transmit(&huart2, (uint8_t *)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK)
 8000650:	e7ac      	b.n	80005ac <main+0x14>
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	20000140 	.word	0x20000140
 800065c:	40020c00 	.word	0x40020c00
 8000660:	200000c4 	.word	0x200000c4
 8000664:	08001fe8 	.word	0x08001fe8
 8000668:	08001ffc 	.word	0x08001ffc

0800066c <GPIO_Init>:
	}
}


void GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;
	GPIO_InitTypeDef button;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <GPIO_Init+0xa4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a25      	ldr	r2, [pc, #148]	; (8000710 <GPIO_Init+0xa4>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <GPIO_Init+0xa4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <GPIO_Init+0xa4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <GPIO_Init+0xa4>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <GPIO_Init+0xa4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

	__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <GPIO_Init+0xa4>)
 80006ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <GPIO_Init+0xa4>)
 80006b0:	f023 0308 	bic.w	r3, r3, #8
 80006b4:	6513      	str	r3, [r2, #80]	; 0x50

	led.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
	led.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006be:	61fb      	str	r3, [r7, #28]
	led.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	led.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_Init(GPIOD, &led);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4811      	ldr	r0, [pc, #68]	; (8000714 <GPIO_Init+0xa8>)
 80006d0:	f000 faf2 	bl	8000cb8 <HAL_GPIO_Init>

	button.Mode = GPIO_MODE_EVT_FALLING;
 80006d4:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 80006d8:	60fb      	str	r3, [r7, #12]
	button.Pin = GPIO_PIN_0;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	button.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &button);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <GPIO_Init+0xac>)
 80006ea:	f000 fae5 	bl	8000cb8 <HAL_GPIO_Init>
#if 0
	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
#endif

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <GPIO_Init+0xa8>)
 80006f6:	f000 fc7b 	bl	8000ff0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <GPIO_Init+0xa8>)
 8000702:	f000 fc75 	bl	8000ff0 <HAL_GPIO_WritePin>
}
 8000706:	bf00      	nop
 8000708:	3730      	adds	r7, #48	; 0x30
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020c00 	.word	0x40020c00
 8000718:	40020000 	.word	0x40020000

0800071c <UART2_Init>:
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
}
*/

void UART2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <UART2_Init+0x44>)
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <UART2_Init+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 460800; // increasing baudrate decreases power consumption
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <UART2_Init+0x44>)
 8000728:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800072c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <UART2_Init+0x44>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <UART2_Init+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <UART2_Init+0x44>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <UART2_Init+0x44>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <UART2_Init+0x44>)
 8000748:	220c      	movs	r2, #12
 800074a:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <UART2_Init+0x44>)
 800074e:	f000 fcc1 	bl	80010d4 <HAL_UART_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 8000758:	f000 f82a 	bl	80007b0 <Error_handler>
	}

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000140 	.word	0x20000140
 8000764:	40004400 	.word	0x40004400

08000768 <GPIO_AnalogConfig>:

}
*/

void GPIO_AnalogConfig(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_analog1, gpio_analog2;
	uint32_t gpio_pins = GPIO_PIN_1 | GPIO_PIN_4 /
 800076e:	f249 2342 	movw	r3, #37442	; 0x9242
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
						 GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 /
						 GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 /
						 GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 /
						 GPIO_PIN_14 | GPIO_PIN_15;

	gpio_analog1.Pin = gpio_pins;
 8000774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000776:	61bb      	str	r3, [r7, #24]
	gpio_analog1.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_analog1);
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4619      	mov	r1, r3
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <GPIO_AnalogConfig+0x40>)
 8000784:	f000 fa98 	bl	8000cb8 <HAL_GPIO_Init>

	gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 /
 8000788:	f240 234f 	movw	r3, #591	; 0x24f
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
				GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 /
				GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 /
				GPIO_PIN_11 | GPIO_PIN_2| GPIO_PIN_3;


	gpio_analog2.Pin = gpio_pins;
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	607b      	str	r3, [r7, #4]
	gpio_analog2.Mode = GPIO_MODE_ANALOG;
 8000792:	2303      	movs	r3, #3
 8000794:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &gpio_analog2);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <GPIO_AnalogConfig+0x44>)
 800079c:	f000 fa8c 	bl	8000cb8 <HAL_GPIO_Init>


}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020c00 	.word	0x40020c00

080007b0 <Error_handler>:

void Error_handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	while(1);
 80007b4:	e7fe      	b.n	80007b4 <Error_handler+0x4>
	...

080007b8 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 fa2d 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_MspInit+0x40>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <HAL_MspInit+0x40>)
 80007c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	f06f 000b 	mvn.w	r0, #11
 80007d6:	f000 fa2c 	bl	8000c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	f06f 000a 	mvn.w	r0, #10
 80007e2:	f000 fa26 	bl	8000c32 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	f06f 0009 	mvn.w	r0, #9
 80007ee:	f000 fa20 	bl	8000c32 <HAL_NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <HAL_UART_MspInit+0x94>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <HAL_UART_MspInit+0x94>)
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000824:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000826:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800082a:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_UART_MspInit+0x94>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <HAL_UART_MspInit+0x98>)
 8000864:	f000 fa28 	bl	8000cb8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000868:	2308      	movs	r3, #8
 800086a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <HAL_UART_MspInit+0x98>)
 8000874:	f000 fa20 	bl	8000cb8 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000878:	2026      	movs	r0, #38	; 0x26
 800087a:	f000 f9f6 	bl	8000c6a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2026      	movs	r0, #38	; 0x26
 8000884:	f000 f9d5 	bl	8000c32 <HAL_NVIC_SetPriority>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemInit+0x20>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x20>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008e6:	f7ff ffd7 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f000 ff09 	bl	8001700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fe53 	bl	8000598 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000900:	08002054 	.word	0x08002054
  ldr r2, =_sbss
 8000904:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000908:	20000198 	.word	0x20000198

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_Init+0x40>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_Init+0x40>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x40>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f96f 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff ff38 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f987 	bl	8000c86 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f94f 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000002c 	.word	0x2000002c
 80009ac:	20000034 	.word	0x20000034
 80009b0:	20000030 	.word	0x20000030

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000034 	.word	0x20000034
 80009d8:	20000184 	.word	0x20000184

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000184 	.word	0x20000184

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffde 	bl	80009dc <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000034 	.word	0x20000034

08000a3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_SuspendTick+0x1c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_SuspendTick+0x1c>)
 8000a46:	f023 0302 	bic.w	r3, r3, #2
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_ResumeTick+0x1c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_ResumeTick+0x1c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ca2:	f000 f802 	bl	8000caa <HAL_SYSTICK_Callback>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5b      	ldr	r2, [pc, #364]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f22:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40021c00 	.word	0x40021c00
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800100c:	e003      	b.n	8001016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f806 	bl	8001054 <HAL_GPIO_EXTI_Callback>
  }
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_RCC_GetHCLKFreq+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000002c 	.word	0x2000002c

08001084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001088:	f7ff fff0 	bl	800106c <HAL_RCC_GetHCLKFreq>
 800108c:	4602      	mov	r2, r0
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	0a9b      	lsrs	r3, r3, #10
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	08002008 	.word	0x08002008

080010ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010b0:	f7ff ffdc 	bl	800106c <HAL_RCC_GetHCLKFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	0b5b      	lsrs	r3, r3, #13
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4903      	ldr	r1, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	08002008 	.word	0x08002008

080010d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e03f      	b.n	8001166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fb7e 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2224      	movs	r2, #36	; 0x24
 8001104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f929 	bl	8001370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800112c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800113c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800114c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2220      	movs	r2, #32
 8001160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b08a      	sub	sp, #40	; 0x28
 8001172:	af02      	add	r7, sp, #8
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b20      	cmp	r3, #32
 800118c:	d17c      	bne.n	8001288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_UART_Transmit+0x2c>
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e075      	b.n	800128a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_UART_Transmit+0x3e>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e06e      	b.n	800128a <HAL_UART_Transmit+0x11c>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2221      	movs	r2, #33	; 0x21
 80011be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fc0b 	bl	80009dc <HAL_GetTick>
 80011c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	88fa      	ldrh	r2, [r7, #6]
 80011cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011dc:	d108      	bne.n	80011f0 <HAL_UART_Transmit+0x82>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d104      	bne.n	80011f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e003      	b.n	80011f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001200:	e02a      	b.n	8001258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f840 	bl	8001292 <UART_WaitOnFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e036      	b.n	800128a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10b      	bne.n	800123a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	3302      	adds	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	e007      	b.n	800124a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1cf      	bne.n	8001202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2200      	movs	r2, #0
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f810 	bl	8001292 <UART_WaitOnFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e006      	b.n	800128a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2220      	movs	r2, #32
 8001280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	e000      	b.n	800128a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001288:	2302      	movs	r3, #2
  }
}
 800128a:	4618      	mov	r0, r3
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b090      	sub	sp, #64	; 0x40
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4613      	mov	r3, r2
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012a2:	e050      	b.n	8001346 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012aa:	d04c      	beq.n	8001346 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80012b2:	f7ff fb93 	bl	80009dc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012be:	429a      	cmp	r2, r3
 80012c0:	d241      	bcs.n	8001346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	330c      	adds	r3, #12
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	e853 3f00 	ldrex	r3, [r3]
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	330c      	adds	r3, #12
 80012e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e2:	637a      	str	r2, [r7, #52]	; 0x34
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ea:	e841 2300 	strex	r3, r2, [r1]
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e5      	bne.n	80012c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3314      	adds	r3, #20
 80012fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	e853 3f00 	ldrex	r3, [r3]
 8001304:	613b      	str	r3, [r7, #16]
   return(result);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3314      	adds	r3, #20
 8001314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001316:	623a      	str	r2, [r7, #32]
 8001318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800131a:	69f9      	ldr	r1, [r7, #28]
 800131c:	6a3a      	ldr	r2, [r7, #32]
 800131e:	e841 2300 	strex	r3, r2, [r1]
 8001322:	61bb      	str	r3, [r7, #24]
   return(result);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e5      	bne.n	80012f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2220      	movs	r2, #32
 800132e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e00f      	b.n	8001366 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4013      	ands	r3, r2
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	429a      	cmp	r2, r3
 8001362:	d09f      	beq.n	80012a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3740      	adds	r7, #64	; 0x40
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	b09f      	sub	sp, #124	; 0x7c
 8001376:	af00      	add	r7, sp, #0
 8001378:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800137a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001386:	68d9      	ldr	r1, [r3, #12]
 8001388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	ea40 0301 	orr.w	r3, r0, r1
 8001390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	431a      	orrs	r2, r3
 800139c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80013aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80013b4:	f021 010c 	bic.w	r1, r1, #12
 80013b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013be:	430b      	orrs	r3, r1
 80013c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80013cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ce:	6999      	ldr	r1, [r3, #24]
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	ea40 0301 	orr.w	r3, r0, r1
 80013d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4bc5      	ldr	r3, [pc, #788]	; (80016f4 <UART_SetConfig+0x384>)
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d004      	beq.n	80013ee <UART_SetConfig+0x7e>
 80013e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4bc3      	ldr	r3, [pc, #780]	; (80016f8 <UART_SetConfig+0x388>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d103      	bne.n	80013f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80013ee:	f7ff fe5d 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 80013f2:	6778      	str	r0, [r7, #116]	; 0x74
 80013f4:	e002      	b.n	80013fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80013f6:	f7ff fe45 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 80013fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001404:	f040 80b6 	bne.w	8001574 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800140a:	461c      	mov	r4, r3
 800140c:	f04f 0500 	mov.w	r5, #0
 8001410:	4622      	mov	r2, r4
 8001412:	462b      	mov	r3, r5
 8001414:	1891      	adds	r1, r2, r2
 8001416:	6439      	str	r1, [r7, #64]	; 0x40
 8001418:	415b      	adcs	r3, r3
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
 800141c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001420:	1912      	adds	r2, r2, r4
 8001422:	eb45 0303 	adc.w	r3, r5, r3
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	00d9      	lsls	r1, r3, #3
 8001430:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001434:	00d0      	lsls	r0, r2, #3
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	1911      	adds	r1, r2, r4
 800143c:	6639      	str	r1, [r7, #96]	; 0x60
 800143e:	416b      	adcs	r3, r5
 8001440:	667b      	str	r3, [r7, #100]	; 0x64
 8001442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	1891      	adds	r1, r2, r2
 800144e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001450:	415b      	adcs	r3, r3
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001458:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800145c:	f7fe ff10 	bl	8000280 <__aeabi_uldivmod>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4ba5      	ldr	r3, [pc, #660]	; (80016fc <UART_SetConfig+0x38c>)
 8001466:	fba3 2302 	umull	r2, r3, r3, r2
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	011e      	lsls	r6, r3, #4
 800146e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001470:	461c      	mov	r4, r3
 8001472:	f04f 0500 	mov.w	r5, #0
 8001476:	4622      	mov	r2, r4
 8001478:	462b      	mov	r3, r5
 800147a:	1891      	adds	r1, r2, r2
 800147c:	6339      	str	r1, [r7, #48]	; 0x30
 800147e:	415b      	adcs	r3, r3
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
 8001482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001486:	1912      	adds	r2, r2, r4
 8001488:	eb45 0303 	adc.w	r3, r5, r3
 800148c:	f04f 0000 	mov.w	r0, #0
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	00d9      	lsls	r1, r3, #3
 8001496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800149a:	00d0      	lsls	r0, r2, #3
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	1911      	adds	r1, r2, r4
 80014a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80014a4:	416b      	adcs	r3, r5
 80014a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	461a      	mov	r2, r3
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	1891      	adds	r1, r2, r2
 80014b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80014b6:	415b      	adcs	r3, r3
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80014c2:	f7fe fedd 	bl	8000280 <__aeabi_uldivmod>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <UART_SetConfig+0x38c>)
 80014cc:	fba3 1302 	umull	r1, r3, r3, r2
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	2164      	movs	r1, #100	; 0x64
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	3332      	adds	r3, #50	; 0x32
 80014de:	4a87      	ldr	r2, [pc, #540]	; (80016fc <UART_SetConfig+0x38c>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80014ec:	441e      	add	r6, r3
 80014ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014f0:	4618      	mov	r0, r3
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	1894      	adds	r4, r2, r2
 80014fc:	623c      	str	r4, [r7, #32]
 80014fe:	415b      	adcs	r3, r3
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001506:	1812      	adds	r2, r2, r0
 8001508:	eb41 0303 	adc.w	r3, r1, r3
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	f04f 0500 	mov.w	r5, #0
 8001514:	00dd      	lsls	r5, r3, #3
 8001516:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800151a:	00d4      	lsls	r4, r2, #3
 800151c:	4622      	mov	r2, r4
 800151e:	462b      	mov	r3, r5
 8001520:	1814      	adds	r4, r2, r0
 8001522:	653c      	str	r4, [r7, #80]	; 0x50
 8001524:	414b      	adcs	r3, r1
 8001526:	657b      	str	r3, [r7, #84]	; 0x54
 8001528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	1891      	adds	r1, r2, r2
 8001534:	61b9      	str	r1, [r7, #24]
 8001536:	415b      	adcs	r3, r3
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001542:	f7fe fe9d 	bl	8000280 <__aeabi_uldivmod>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4b6c      	ldr	r3, [pc, #432]	; (80016fc <UART_SetConfig+0x38c>)
 800154c:	fba3 1302 	umull	r1, r3, r3, r2
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	2164      	movs	r1, #100	; 0x64
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	3332      	adds	r3, #50	; 0x32
 800155e:	4a67      	ldr	r2, [pc, #412]	; (80016fc <UART_SetConfig+0x38c>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	f003 0207 	and.w	r2, r3, #7
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4432      	add	r2, r6
 8001570:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001572:	e0b9      	b.n	80016e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001576:	461c      	mov	r4, r3
 8001578:	f04f 0500 	mov.w	r5, #0
 800157c:	4622      	mov	r2, r4
 800157e:	462b      	mov	r3, r5
 8001580:	1891      	adds	r1, r2, r2
 8001582:	6139      	str	r1, [r7, #16]
 8001584:	415b      	adcs	r3, r3
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800158c:	1912      	adds	r2, r2, r4
 800158e:	eb45 0303 	adc.w	r3, r5, r3
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	00d9      	lsls	r1, r3, #3
 800159c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015a0:	00d0      	lsls	r0, r2, #3
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	eb12 0804 	adds.w	r8, r2, r4
 80015aa:	eb43 0905 	adc.w	r9, r3, r5
 80015ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	008b      	lsls	r3, r1, #2
 80015c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80015c6:	0082      	lsls	r2, r0, #2
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f7fe fe58 	bl	8000280 <__aeabi_uldivmod>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4b49      	ldr	r3, [pc, #292]	; (80016fc <UART_SetConfig+0x38c>)
 80015d6:	fba3 2302 	umull	r2, r3, r3, r2
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	011e      	lsls	r6, r3, #4
 80015de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015e0:	4618      	mov	r0, r3
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	1894      	adds	r4, r2, r2
 80015ec:	60bc      	str	r4, [r7, #8]
 80015ee:	415b      	adcs	r3, r3
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f6:	1812      	adds	r2, r2, r0
 80015f8:	eb41 0303 	adc.w	r3, r1, r3
 80015fc:	f04f 0400 	mov.w	r4, #0
 8001600:	f04f 0500 	mov.w	r5, #0
 8001604:	00dd      	lsls	r5, r3, #3
 8001606:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800160a:	00d4      	lsls	r4, r2, #3
 800160c:	4622      	mov	r2, r4
 800160e:	462b      	mov	r3, r5
 8001610:	1814      	adds	r4, r2, r0
 8001612:	64bc      	str	r4, [r7, #72]	; 0x48
 8001614:	414b      	adcs	r3, r1
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	008b      	lsls	r3, r1, #2
 800162c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001630:	0082      	lsls	r2, r0, #2
 8001632:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001636:	f7fe fe23 	bl	8000280 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <UART_SetConfig+0x38c>)
 8001640:	fba3 1302 	umull	r1, r3, r3, r2
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	2164      	movs	r1, #100	; 0x64
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	3332      	adds	r3, #50	; 0x32
 8001652:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <UART_SetConfig+0x38c>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165e:	441e      	add	r6, r3
 8001660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001662:	4618      	mov	r0, r3
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	1894      	adds	r4, r2, r2
 800166e:	603c      	str	r4, [r7, #0]
 8001670:	415b      	adcs	r3, r3
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001678:	1812      	adds	r2, r2, r0
 800167a:	eb41 0303 	adc.w	r3, r1, r3
 800167e:	f04f 0400 	mov.w	r4, #0
 8001682:	f04f 0500 	mov.w	r5, #0
 8001686:	00dd      	lsls	r5, r3, #3
 8001688:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800168c:	00d4      	lsls	r4, r2, #3
 800168e:	4622      	mov	r2, r4
 8001690:	462b      	mov	r3, r5
 8001692:	eb12 0a00 	adds.w	sl, r2, r0
 8001696:	eb43 0b01 	adc.w	fp, r3, r1
 800169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	008b      	lsls	r3, r1, #2
 80016ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80016b2:	0082      	lsls	r2, r0, #2
 80016b4:	4650      	mov	r0, sl
 80016b6:	4659      	mov	r1, fp
 80016b8:	f7fe fde2 	bl	8000280 <__aeabi_uldivmod>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <UART_SetConfig+0x38c>)
 80016c2:	fba3 1302 	umull	r1, r3, r3, r2
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2164      	movs	r1, #100	; 0x64
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	3332      	adds	r3, #50	; 0x32
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <UART_SetConfig+0x38c>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	f003 020f 	and.w	r2, r3, #15
 80016e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4432      	add	r2, r6
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	377c      	adds	r7, #124	; 0x7c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	51eb851f 	.word	0x51eb851f

08001700 <__libc_init_array>:
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	4d0d      	ldr	r5, [pc, #52]	; (8001738 <__libc_init_array+0x38>)
 8001704:	4c0d      	ldr	r4, [pc, #52]	; (800173c <__libc_init_array+0x3c>)
 8001706:	1b64      	subs	r4, r4, r5
 8001708:	10a4      	asrs	r4, r4, #2
 800170a:	2600      	movs	r6, #0
 800170c:	42a6      	cmp	r6, r4
 800170e:	d109      	bne.n	8001724 <__libc_init_array+0x24>
 8001710:	4d0b      	ldr	r5, [pc, #44]	; (8001740 <__libc_init_array+0x40>)
 8001712:	4c0c      	ldr	r4, [pc, #48]	; (8001744 <__libc_init_array+0x44>)
 8001714:	f000 fc5c 	bl	8001fd0 <_init>
 8001718:	1b64      	subs	r4, r4, r5
 800171a:	10a4      	asrs	r4, r4, #2
 800171c:	2600      	movs	r6, #0
 800171e:	42a6      	cmp	r6, r4
 8001720:	d105      	bne.n	800172e <__libc_init_array+0x2e>
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	f855 3b04 	ldr.w	r3, [r5], #4
 8001728:	4798      	blx	r3
 800172a:	3601      	adds	r6, #1
 800172c:	e7ee      	b.n	800170c <__libc_init_array+0xc>
 800172e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001732:	4798      	blx	r3
 8001734:	3601      	adds	r6, #1
 8001736:	e7f2      	b.n	800171e <__libc_init_array+0x1e>
 8001738:	0800204c 	.word	0x0800204c
 800173c:	0800204c 	.word	0x0800204c
 8001740:	0800204c 	.word	0x0800204c
 8001744:	08002050 	.word	0x08002050

08001748 <memset>:
 8001748:	4402      	add	r2, r0
 800174a:	4603      	mov	r3, r0
 800174c:	4293      	cmp	r3, r2
 800174e:	d100      	bne.n	8001752 <memset+0xa>
 8001750:	4770      	bx	lr
 8001752:	f803 1b01 	strb.w	r1, [r3], #1
 8001756:	e7f9      	b.n	800174c <memset+0x4>

08001758 <siprintf>:
 8001758:	b40e      	push	{r1, r2, r3}
 800175a:	b500      	push	{lr}
 800175c:	b09c      	sub	sp, #112	; 0x70
 800175e:	ab1d      	add	r3, sp, #116	; 0x74
 8001760:	9002      	str	r0, [sp, #8]
 8001762:	9006      	str	r0, [sp, #24]
 8001764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <siprintf+0x38>)
 800176a:	9107      	str	r1, [sp, #28]
 800176c:	9104      	str	r1, [sp, #16]
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <siprintf+0x3c>)
 8001770:	f853 2b04 	ldr.w	r2, [r3], #4
 8001774:	9105      	str	r1, [sp, #20]
 8001776:	6800      	ldr	r0, [r0, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	a902      	add	r1, sp, #8
 800177c:	f000 f868 	bl	8001850 <_svfiprintf_r>
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	b01c      	add	sp, #112	; 0x70
 8001788:	f85d eb04 	ldr.w	lr, [sp], #4
 800178c:	b003      	add	sp, #12
 800178e:	4770      	bx	lr
 8001790:	20000038 	.word	0x20000038
 8001794:	ffff0208 	.word	0xffff0208

08001798 <__ssputs_r>:
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	688e      	ldr	r6, [r1, #8]
 800179e:	429e      	cmp	r6, r3
 80017a0:	4682      	mov	sl, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	4690      	mov	r8, r2
 80017a6:	461f      	mov	r7, r3
 80017a8:	d838      	bhi.n	800181c <__ssputs_r+0x84>
 80017aa:	898a      	ldrh	r2, [r1, #12]
 80017ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017b0:	d032      	beq.n	8001818 <__ssputs_r+0x80>
 80017b2:	6825      	ldr	r5, [r4, #0]
 80017b4:	6909      	ldr	r1, [r1, #16]
 80017b6:	eba5 0901 	sub.w	r9, r5, r1
 80017ba:	6965      	ldr	r5, [r4, #20]
 80017bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017c4:	3301      	adds	r3, #1
 80017c6:	444b      	add	r3, r9
 80017c8:	106d      	asrs	r5, r5, #1
 80017ca:	429d      	cmp	r5, r3
 80017cc:	bf38      	it	cc
 80017ce:	461d      	movcc	r5, r3
 80017d0:	0553      	lsls	r3, r2, #21
 80017d2:	d531      	bpl.n	8001838 <__ssputs_r+0xa0>
 80017d4:	4629      	mov	r1, r5
 80017d6:	f000 fb47 	bl	8001e68 <_malloc_r>
 80017da:	4606      	mov	r6, r0
 80017dc:	b950      	cbnz	r0, 80017f4 <__ssputs_r+0x5c>
 80017de:	230c      	movs	r3, #12
 80017e0:	f8ca 3000 	str.w	r3, [sl]
 80017e4:	89a3      	ldrh	r3, [r4, #12]
 80017e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ea:	81a3      	strh	r3, [r4, #12]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f4:	6921      	ldr	r1, [r4, #16]
 80017f6:	464a      	mov	r2, r9
 80017f8:	f000 fabe 	bl	8001d78 <memcpy>
 80017fc:	89a3      	ldrh	r3, [r4, #12]
 80017fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001806:	81a3      	strh	r3, [r4, #12]
 8001808:	6126      	str	r6, [r4, #16]
 800180a:	6165      	str	r5, [r4, #20]
 800180c:	444e      	add	r6, r9
 800180e:	eba5 0509 	sub.w	r5, r5, r9
 8001812:	6026      	str	r6, [r4, #0]
 8001814:	60a5      	str	r5, [r4, #8]
 8001816:	463e      	mov	r6, r7
 8001818:	42be      	cmp	r6, r7
 800181a:	d900      	bls.n	800181e <__ssputs_r+0x86>
 800181c:	463e      	mov	r6, r7
 800181e:	4632      	mov	r2, r6
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	4641      	mov	r1, r8
 8001824:	f000 fab6 	bl	8001d94 <memmove>
 8001828:	68a3      	ldr	r3, [r4, #8]
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	1b9b      	subs	r3, r3, r6
 800182e:	4432      	add	r2, r6
 8001830:	60a3      	str	r3, [r4, #8]
 8001832:	6022      	str	r2, [r4, #0]
 8001834:	2000      	movs	r0, #0
 8001836:	e7db      	b.n	80017f0 <__ssputs_r+0x58>
 8001838:	462a      	mov	r2, r5
 800183a:	f000 fb6f 	bl	8001f1c <_realloc_r>
 800183e:	4606      	mov	r6, r0
 8001840:	2800      	cmp	r0, #0
 8001842:	d1e1      	bne.n	8001808 <__ssputs_r+0x70>
 8001844:	6921      	ldr	r1, [r4, #16]
 8001846:	4650      	mov	r0, sl
 8001848:	f000 fabe 	bl	8001dc8 <_free_r>
 800184c:	e7c7      	b.n	80017de <__ssputs_r+0x46>
	...

08001850 <_svfiprintf_r>:
 8001850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001854:	4698      	mov	r8, r3
 8001856:	898b      	ldrh	r3, [r1, #12]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	b09d      	sub	sp, #116	; 0x74
 800185c:	4607      	mov	r7, r0
 800185e:	460d      	mov	r5, r1
 8001860:	4614      	mov	r4, r2
 8001862:	d50e      	bpl.n	8001882 <_svfiprintf_r+0x32>
 8001864:	690b      	ldr	r3, [r1, #16]
 8001866:	b963      	cbnz	r3, 8001882 <_svfiprintf_r+0x32>
 8001868:	2140      	movs	r1, #64	; 0x40
 800186a:	f000 fafd 	bl	8001e68 <_malloc_r>
 800186e:	6028      	str	r0, [r5, #0]
 8001870:	6128      	str	r0, [r5, #16]
 8001872:	b920      	cbnz	r0, 800187e <_svfiprintf_r+0x2e>
 8001874:	230c      	movs	r3, #12
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	e0d1      	b.n	8001a22 <_svfiprintf_r+0x1d2>
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	616b      	str	r3, [r5, #20]
 8001882:	2300      	movs	r3, #0
 8001884:	9309      	str	r3, [sp, #36]	; 0x24
 8001886:	2320      	movs	r3, #32
 8001888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800188c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001890:	2330      	movs	r3, #48	; 0x30
 8001892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a3c <_svfiprintf_r+0x1ec>
 8001896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800189a:	f04f 0901 	mov.w	r9, #1
 800189e:	4623      	mov	r3, r4
 80018a0:	469a      	mov	sl, r3
 80018a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018a6:	b10a      	cbz	r2, 80018ac <_svfiprintf_r+0x5c>
 80018a8:	2a25      	cmp	r2, #37	; 0x25
 80018aa:	d1f9      	bne.n	80018a0 <_svfiprintf_r+0x50>
 80018ac:	ebba 0b04 	subs.w	fp, sl, r4
 80018b0:	d00b      	beq.n	80018ca <_svfiprintf_r+0x7a>
 80018b2:	465b      	mov	r3, fp
 80018b4:	4622      	mov	r2, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	4638      	mov	r0, r7
 80018ba:	f7ff ff6d 	bl	8001798 <__ssputs_r>
 80018be:	3001      	adds	r0, #1
 80018c0:	f000 80aa 	beq.w	8001a18 <_svfiprintf_r+0x1c8>
 80018c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018c6:	445a      	add	r2, fp
 80018c8:	9209      	str	r2, [sp, #36]	; 0x24
 80018ca:	f89a 3000 	ldrb.w	r3, [sl]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a2 	beq.w	8001a18 <_svfiprintf_r+0x1c8>
 80018d4:	2300      	movs	r3, #0
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018de:	f10a 0a01 	add.w	sl, sl, #1
 80018e2:	9304      	str	r3, [sp, #16]
 80018e4:	9307      	str	r3, [sp, #28]
 80018e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018ea:	931a      	str	r3, [sp, #104]	; 0x68
 80018ec:	4654      	mov	r4, sl
 80018ee:	2205      	movs	r2, #5
 80018f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018f4:	4851      	ldr	r0, [pc, #324]	; (8001a3c <_svfiprintf_r+0x1ec>)
 80018f6:	f7fe fc73 	bl	80001e0 <memchr>
 80018fa:	9a04      	ldr	r2, [sp, #16]
 80018fc:	b9d8      	cbnz	r0, 8001936 <_svfiprintf_r+0xe6>
 80018fe:	06d0      	lsls	r0, r2, #27
 8001900:	bf44      	itt	mi
 8001902:	2320      	movmi	r3, #32
 8001904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001908:	0711      	lsls	r1, r2, #28
 800190a:	bf44      	itt	mi
 800190c:	232b      	movmi	r3, #43	; 0x2b
 800190e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001912:	f89a 3000 	ldrb.w	r3, [sl]
 8001916:	2b2a      	cmp	r3, #42	; 0x2a
 8001918:	d015      	beq.n	8001946 <_svfiprintf_r+0xf6>
 800191a:	9a07      	ldr	r2, [sp, #28]
 800191c:	4654      	mov	r4, sl
 800191e:	2000      	movs	r0, #0
 8001920:	f04f 0c0a 	mov.w	ip, #10
 8001924:	4621      	mov	r1, r4
 8001926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800192a:	3b30      	subs	r3, #48	; 0x30
 800192c:	2b09      	cmp	r3, #9
 800192e:	d94e      	bls.n	80019ce <_svfiprintf_r+0x17e>
 8001930:	b1b0      	cbz	r0, 8001960 <_svfiprintf_r+0x110>
 8001932:	9207      	str	r2, [sp, #28]
 8001934:	e014      	b.n	8001960 <_svfiprintf_r+0x110>
 8001936:	eba0 0308 	sub.w	r3, r0, r8
 800193a:	fa09 f303 	lsl.w	r3, r9, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	9304      	str	r3, [sp, #16]
 8001942:	46a2      	mov	sl, r4
 8001944:	e7d2      	b.n	80018ec <_svfiprintf_r+0x9c>
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	1d19      	adds	r1, r3, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	9103      	str	r1, [sp, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	bfbb      	ittet	lt
 8001952:	425b      	neglt	r3, r3
 8001954:	f042 0202 	orrlt.w	r2, r2, #2
 8001958:	9307      	strge	r3, [sp, #28]
 800195a:	9307      	strlt	r3, [sp, #28]
 800195c:	bfb8      	it	lt
 800195e:	9204      	strlt	r2, [sp, #16]
 8001960:	7823      	ldrb	r3, [r4, #0]
 8001962:	2b2e      	cmp	r3, #46	; 0x2e
 8001964:	d10c      	bne.n	8001980 <_svfiprintf_r+0x130>
 8001966:	7863      	ldrb	r3, [r4, #1]
 8001968:	2b2a      	cmp	r3, #42	; 0x2a
 800196a:	d135      	bne.n	80019d8 <_svfiprintf_r+0x188>
 800196c:	9b03      	ldr	r3, [sp, #12]
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	9203      	str	r2, [sp, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bfb8      	it	lt
 8001978:	f04f 33ff 	movlt.w	r3, #4294967295
 800197c:	3402      	adds	r4, #2
 800197e:	9305      	str	r3, [sp, #20]
 8001980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001a4c <_svfiprintf_r+0x1fc>
 8001984:	7821      	ldrb	r1, [r4, #0]
 8001986:	2203      	movs	r2, #3
 8001988:	4650      	mov	r0, sl
 800198a:	f7fe fc29 	bl	80001e0 <memchr>
 800198e:	b140      	cbz	r0, 80019a2 <_svfiprintf_r+0x152>
 8001990:	2340      	movs	r3, #64	; 0x40
 8001992:	eba0 000a 	sub.w	r0, r0, sl
 8001996:	fa03 f000 	lsl.w	r0, r3, r0
 800199a:	9b04      	ldr	r3, [sp, #16]
 800199c:	4303      	orrs	r3, r0
 800199e:	3401      	adds	r4, #1
 80019a0:	9304      	str	r3, [sp, #16]
 80019a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019a6:	4826      	ldr	r0, [pc, #152]	; (8001a40 <_svfiprintf_r+0x1f0>)
 80019a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019ac:	2206      	movs	r2, #6
 80019ae:	f7fe fc17 	bl	80001e0 <memchr>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d038      	beq.n	8001a28 <_svfiprintf_r+0x1d8>
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <_svfiprintf_r+0x1f4>)
 80019b8:	bb1b      	cbnz	r3, 8001a02 <_svfiprintf_r+0x1b2>
 80019ba:	9b03      	ldr	r3, [sp, #12]
 80019bc:	3307      	adds	r3, #7
 80019be:	f023 0307 	bic.w	r3, r3, #7
 80019c2:	3308      	adds	r3, #8
 80019c4:	9303      	str	r3, [sp, #12]
 80019c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019c8:	4433      	add	r3, r6
 80019ca:	9309      	str	r3, [sp, #36]	; 0x24
 80019cc:	e767      	b.n	800189e <_svfiprintf_r+0x4e>
 80019ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80019d2:	460c      	mov	r4, r1
 80019d4:	2001      	movs	r0, #1
 80019d6:	e7a5      	b.n	8001924 <_svfiprintf_r+0xd4>
 80019d8:	2300      	movs	r3, #0
 80019da:	3401      	adds	r4, #1
 80019dc:	9305      	str	r3, [sp, #20]
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0c0a 	mov.w	ip, #10
 80019e4:	4620      	mov	r0, r4
 80019e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019ea:	3a30      	subs	r2, #48	; 0x30
 80019ec:	2a09      	cmp	r2, #9
 80019ee:	d903      	bls.n	80019f8 <_svfiprintf_r+0x1a8>
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0c5      	beq.n	8001980 <_svfiprintf_r+0x130>
 80019f4:	9105      	str	r1, [sp, #20]
 80019f6:	e7c3      	b.n	8001980 <_svfiprintf_r+0x130>
 80019f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80019fc:	4604      	mov	r4, r0
 80019fe:	2301      	movs	r3, #1
 8001a00:	e7f0      	b.n	80019e4 <_svfiprintf_r+0x194>
 8001a02:	ab03      	add	r3, sp, #12
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	462a      	mov	r2, r5
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <_svfiprintf_r+0x1f8>)
 8001a0a:	a904      	add	r1, sp, #16
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	f3af 8000 	nop.w
 8001a12:	1c42      	adds	r2, r0, #1
 8001a14:	4606      	mov	r6, r0
 8001a16:	d1d6      	bne.n	80019c6 <_svfiprintf_r+0x176>
 8001a18:	89ab      	ldrh	r3, [r5, #12]
 8001a1a:	065b      	lsls	r3, r3, #25
 8001a1c:	f53f af2c 	bmi.w	8001878 <_svfiprintf_r+0x28>
 8001a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a22:	b01d      	add	sp, #116	; 0x74
 8001a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a28:	ab03      	add	r3, sp, #12
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	462a      	mov	r2, r5
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <_svfiprintf_r+0x1f8>)
 8001a30:	a904      	add	r1, sp, #16
 8001a32:	4638      	mov	r0, r7
 8001a34:	f000 f87a 	bl	8001b2c <_printf_i>
 8001a38:	e7eb      	b.n	8001a12 <_svfiprintf_r+0x1c2>
 8001a3a:	bf00      	nop
 8001a3c:	08002010 	.word	0x08002010
 8001a40:	0800201a 	.word	0x0800201a
 8001a44:	00000000 	.word	0x00000000
 8001a48:	08001799 	.word	0x08001799
 8001a4c:	08002016 	.word	0x08002016

08001a50 <_printf_common>:
 8001a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a54:	4616      	mov	r6, r2
 8001a56:	4699      	mov	r9, r3
 8001a58:	688a      	ldr	r2, [r1, #8]
 8001a5a:	690b      	ldr	r3, [r1, #16]
 8001a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bfb8      	it	lt
 8001a64:	4613      	movlt	r3, r2
 8001a66:	6033      	str	r3, [r6, #0]
 8001a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a6c:	4607      	mov	r7, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	b10a      	cbz	r2, 8001a76 <_printf_common+0x26>
 8001a72:	3301      	adds	r3, #1
 8001a74:	6033      	str	r3, [r6, #0]
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	0699      	lsls	r1, r3, #26
 8001a7a:	bf42      	ittt	mi
 8001a7c:	6833      	ldrmi	r3, [r6, #0]
 8001a7e:	3302      	addmi	r3, #2
 8001a80:	6033      	strmi	r3, [r6, #0]
 8001a82:	6825      	ldr	r5, [r4, #0]
 8001a84:	f015 0506 	ands.w	r5, r5, #6
 8001a88:	d106      	bne.n	8001a98 <_printf_common+0x48>
 8001a8a:	f104 0a19 	add.w	sl, r4, #25
 8001a8e:	68e3      	ldr	r3, [r4, #12]
 8001a90:	6832      	ldr	r2, [r6, #0]
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	42ab      	cmp	r3, r5
 8001a96:	dc26      	bgt.n	8001ae6 <_printf_common+0x96>
 8001a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a9c:	1e13      	subs	r3, r2, #0
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	bf18      	it	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	0692      	lsls	r2, r2, #26
 8001aa6:	d42b      	bmi.n	8001b00 <_printf_common+0xb0>
 8001aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aac:	4649      	mov	r1, r9
 8001aae:	4638      	mov	r0, r7
 8001ab0:	47c0      	blx	r8
 8001ab2:	3001      	adds	r0, #1
 8001ab4:	d01e      	beq.n	8001af4 <_printf_common+0xa4>
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	68e5      	ldr	r5, [r4, #12]
 8001aba:	6832      	ldr	r2, [r6, #0]
 8001abc:	f003 0306 	and.w	r3, r3, #6
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	bf08      	it	eq
 8001ac4:	1aad      	subeq	r5, r5, r2
 8001ac6:	68a3      	ldr	r3, [r4, #8]
 8001ac8:	6922      	ldr	r2, [r4, #16]
 8001aca:	bf0c      	ite	eq
 8001acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ad0:	2500      	movne	r5, #0
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	bfc4      	itt	gt
 8001ad6:	1a9b      	subgt	r3, r3, r2
 8001ad8:	18ed      	addgt	r5, r5, r3
 8001ada:	2600      	movs	r6, #0
 8001adc:	341a      	adds	r4, #26
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d11a      	bne.n	8001b18 <_printf_common+0xc8>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e008      	b.n	8001af8 <_printf_common+0xa8>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4652      	mov	r2, sl
 8001aea:	4649      	mov	r1, r9
 8001aec:	4638      	mov	r0, r7
 8001aee:	47c0      	blx	r8
 8001af0:	3001      	adds	r0, #1
 8001af2:	d103      	bne.n	8001afc <_printf_common+0xac>
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001afc:	3501      	adds	r5, #1
 8001afe:	e7c6      	b.n	8001a8e <_printf_common+0x3e>
 8001b00:	18e1      	adds	r1, r4, r3
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	2030      	movs	r0, #48	; 0x30
 8001b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b0a:	4422      	add	r2, r4
 8001b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b14:	3302      	adds	r3, #2
 8001b16:	e7c7      	b.n	8001aa8 <_printf_common+0x58>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	4638      	mov	r0, r7
 8001b20:	47c0      	blx	r8
 8001b22:	3001      	adds	r0, #1
 8001b24:	d0e6      	beq.n	8001af4 <_printf_common+0xa4>
 8001b26:	3601      	adds	r6, #1
 8001b28:	e7d9      	b.n	8001ade <_printf_common+0x8e>
	...

08001b2c <_printf_i>:
 8001b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b30:	460c      	mov	r4, r1
 8001b32:	4691      	mov	r9, r2
 8001b34:	7e27      	ldrb	r7, [r4, #24]
 8001b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b38:	2f78      	cmp	r7, #120	; 0x78
 8001b3a:	4680      	mov	r8, r0
 8001b3c:	469a      	mov	sl, r3
 8001b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b42:	d807      	bhi.n	8001b54 <_printf_i+0x28>
 8001b44:	2f62      	cmp	r7, #98	; 0x62
 8001b46:	d80a      	bhi.n	8001b5e <_printf_i+0x32>
 8001b48:	2f00      	cmp	r7, #0
 8001b4a:	f000 80d8 	beq.w	8001cfe <_printf_i+0x1d2>
 8001b4e:	2f58      	cmp	r7, #88	; 0x58
 8001b50:	f000 80a3 	beq.w	8001c9a <_printf_i+0x16e>
 8001b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b5c:	e03a      	b.n	8001bd4 <_printf_i+0xa8>
 8001b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b62:	2b15      	cmp	r3, #21
 8001b64:	d8f6      	bhi.n	8001b54 <_printf_i+0x28>
 8001b66:	a001      	add	r0, pc, #4	; (adr r0, 8001b6c <_printf_i+0x40>)
 8001b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001b6c:	08001bc5 	.word	0x08001bc5
 8001b70:	08001bd9 	.word	0x08001bd9
 8001b74:	08001b55 	.word	0x08001b55
 8001b78:	08001b55 	.word	0x08001b55
 8001b7c:	08001b55 	.word	0x08001b55
 8001b80:	08001b55 	.word	0x08001b55
 8001b84:	08001bd9 	.word	0x08001bd9
 8001b88:	08001b55 	.word	0x08001b55
 8001b8c:	08001b55 	.word	0x08001b55
 8001b90:	08001b55 	.word	0x08001b55
 8001b94:	08001b55 	.word	0x08001b55
 8001b98:	08001ce5 	.word	0x08001ce5
 8001b9c:	08001c09 	.word	0x08001c09
 8001ba0:	08001cc7 	.word	0x08001cc7
 8001ba4:	08001b55 	.word	0x08001b55
 8001ba8:	08001b55 	.word	0x08001b55
 8001bac:	08001d07 	.word	0x08001d07
 8001bb0:	08001b55 	.word	0x08001b55
 8001bb4:	08001c09 	.word	0x08001c09
 8001bb8:	08001b55 	.word	0x08001b55
 8001bbc:	08001b55 	.word	0x08001b55
 8001bc0:	08001ccf 	.word	0x08001ccf
 8001bc4:	680b      	ldr	r3, [r1, #0]
 8001bc6:	1d1a      	adds	r2, r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	600a      	str	r2, [r1, #0]
 8001bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0a3      	b.n	8001d20 <_printf_i+0x1f4>
 8001bd8:	6825      	ldr	r5, [r4, #0]
 8001bda:	6808      	ldr	r0, [r1, #0]
 8001bdc:	062e      	lsls	r6, r5, #24
 8001bde:	f100 0304 	add.w	r3, r0, #4
 8001be2:	d50a      	bpl.n	8001bfa <_printf_i+0xce>
 8001be4:	6805      	ldr	r5, [r0, #0]
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	2d00      	cmp	r5, #0
 8001bea:	da03      	bge.n	8001bf4 <_printf_i+0xc8>
 8001bec:	232d      	movs	r3, #45	; 0x2d
 8001bee:	426d      	negs	r5, r5
 8001bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf4:	485e      	ldr	r0, [pc, #376]	; (8001d70 <_printf_i+0x244>)
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	e019      	b.n	8001c2e <_printf_i+0x102>
 8001bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001bfe:	6805      	ldr	r5, [r0, #0]
 8001c00:	600b      	str	r3, [r1, #0]
 8001c02:	bf18      	it	ne
 8001c04:	b22d      	sxthne	r5, r5
 8001c06:	e7ef      	b.n	8001be8 <_printf_i+0xbc>
 8001c08:	680b      	ldr	r3, [r1, #0]
 8001c0a:	6825      	ldr	r5, [r4, #0]
 8001c0c:	1d18      	adds	r0, r3, #4
 8001c0e:	6008      	str	r0, [r1, #0]
 8001c10:	0628      	lsls	r0, r5, #24
 8001c12:	d501      	bpl.n	8001c18 <_printf_i+0xec>
 8001c14:	681d      	ldr	r5, [r3, #0]
 8001c16:	e002      	b.n	8001c1e <_printf_i+0xf2>
 8001c18:	0669      	lsls	r1, r5, #25
 8001c1a:	d5fb      	bpl.n	8001c14 <_printf_i+0xe8>
 8001c1c:	881d      	ldrh	r5, [r3, #0]
 8001c1e:	4854      	ldr	r0, [pc, #336]	; (8001d70 <_printf_i+0x244>)
 8001c20:	2f6f      	cmp	r7, #111	; 0x6f
 8001c22:	bf0c      	ite	eq
 8001c24:	2308      	moveq	r3, #8
 8001c26:	230a      	movne	r3, #10
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c2e:	6866      	ldr	r6, [r4, #4]
 8001c30:	60a6      	str	r6, [r4, #8]
 8001c32:	2e00      	cmp	r6, #0
 8001c34:	bfa2      	ittt	ge
 8001c36:	6821      	ldrge	r1, [r4, #0]
 8001c38:	f021 0104 	bicge.w	r1, r1, #4
 8001c3c:	6021      	strge	r1, [r4, #0]
 8001c3e:	b90d      	cbnz	r5, 8001c44 <_printf_i+0x118>
 8001c40:	2e00      	cmp	r6, #0
 8001c42:	d04d      	beq.n	8001ce0 <_printf_i+0x1b4>
 8001c44:	4616      	mov	r6, r2
 8001c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8001c4e:	5dc7      	ldrb	r7, [r0, r7]
 8001c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c54:	462f      	mov	r7, r5
 8001c56:	42bb      	cmp	r3, r7
 8001c58:	460d      	mov	r5, r1
 8001c5a:	d9f4      	bls.n	8001c46 <_printf_i+0x11a>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d10b      	bne.n	8001c78 <_printf_i+0x14c>
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	07df      	lsls	r7, r3, #31
 8001c64:	d508      	bpl.n	8001c78 <_printf_i+0x14c>
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	6861      	ldr	r1, [r4, #4]
 8001c6a:	4299      	cmp	r1, r3
 8001c6c:	bfde      	ittt	le
 8001c6e:	2330      	movle	r3, #48	; 0x30
 8001c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c78:	1b92      	subs	r2, r2, r6
 8001c7a:	6122      	str	r2, [r4, #16]
 8001c7c:	f8cd a000 	str.w	sl, [sp]
 8001c80:	464b      	mov	r3, r9
 8001c82:	aa03      	add	r2, sp, #12
 8001c84:	4621      	mov	r1, r4
 8001c86:	4640      	mov	r0, r8
 8001c88:	f7ff fee2 	bl	8001a50 <_printf_common>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	d14c      	bne.n	8001d2a <_printf_i+0x1fe>
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	b004      	add	sp, #16
 8001c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9a:	4835      	ldr	r0, [pc, #212]	; (8001d70 <_printf_i+0x244>)
 8001c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	680e      	ldr	r6, [r1, #0]
 8001ca4:	061f      	lsls	r7, r3, #24
 8001ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8001caa:	600e      	str	r6, [r1, #0]
 8001cac:	d514      	bpl.n	8001cd8 <_printf_i+0x1ac>
 8001cae:	07d9      	lsls	r1, r3, #31
 8001cb0:	bf44      	itt	mi
 8001cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb6:	6023      	strmi	r3, [r4, #0]
 8001cb8:	b91d      	cbnz	r5, 8001cc2 <_printf_i+0x196>
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f023 0320 	bic.w	r3, r3, #32
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	2310      	movs	r3, #16
 8001cc4:	e7b0      	b.n	8001c28 <_printf_i+0xfc>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	2378      	movs	r3, #120	; 0x78
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <_printf_i+0x248>)
 8001cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cd6:	e7e3      	b.n	8001ca0 <_printf_i+0x174>
 8001cd8:	065e      	lsls	r6, r3, #25
 8001cda:	bf48      	it	mi
 8001cdc:	b2ad      	uxthmi	r5, r5
 8001cde:	e7e6      	b.n	8001cae <_printf_i+0x182>
 8001ce0:	4616      	mov	r6, r2
 8001ce2:	e7bb      	b.n	8001c5c <_printf_i+0x130>
 8001ce4:	680b      	ldr	r3, [r1, #0]
 8001ce6:	6826      	ldr	r6, [r4, #0]
 8001ce8:	6960      	ldr	r0, [r4, #20]
 8001cea:	1d1d      	adds	r5, r3, #4
 8001cec:	600d      	str	r5, [r1, #0]
 8001cee:	0635      	lsls	r5, r6, #24
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	d501      	bpl.n	8001cf8 <_printf_i+0x1cc>
 8001cf4:	6018      	str	r0, [r3, #0]
 8001cf6:	e002      	b.n	8001cfe <_printf_i+0x1d2>
 8001cf8:	0671      	lsls	r1, r6, #25
 8001cfa:	d5fb      	bpl.n	8001cf4 <_printf_i+0x1c8>
 8001cfc:	8018      	strh	r0, [r3, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	6123      	str	r3, [r4, #16]
 8001d02:	4616      	mov	r6, r2
 8001d04:	e7ba      	b.n	8001c7c <_printf_i+0x150>
 8001d06:	680b      	ldr	r3, [r1, #0]
 8001d08:	1d1a      	adds	r2, r3, #4
 8001d0a:	600a      	str	r2, [r1, #0]
 8001d0c:	681e      	ldr	r6, [r3, #0]
 8001d0e:	6862      	ldr	r2, [r4, #4]
 8001d10:	2100      	movs	r1, #0
 8001d12:	4630      	mov	r0, r6
 8001d14:	f7fe fa64 	bl	80001e0 <memchr>
 8001d18:	b108      	cbz	r0, 8001d1e <_printf_i+0x1f2>
 8001d1a:	1b80      	subs	r0, r0, r6
 8001d1c:	6060      	str	r0, [r4, #4]
 8001d1e:	6863      	ldr	r3, [r4, #4]
 8001d20:	6123      	str	r3, [r4, #16]
 8001d22:	2300      	movs	r3, #0
 8001d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d28:	e7a8      	b.n	8001c7c <_printf_i+0x150>
 8001d2a:	6923      	ldr	r3, [r4, #16]
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	4649      	mov	r1, r9
 8001d30:	4640      	mov	r0, r8
 8001d32:	47d0      	blx	sl
 8001d34:	3001      	adds	r0, #1
 8001d36:	d0ab      	beq.n	8001c90 <_printf_i+0x164>
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	079b      	lsls	r3, r3, #30
 8001d3c:	d413      	bmi.n	8001d66 <_printf_i+0x23a>
 8001d3e:	68e0      	ldr	r0, [r4, #12]
 8001d40:	9b03      	ldr	r3, [sp, #12]
 8001d42:	4298      	cmp	r0, r3
 8001d44:	bfb8      	it	lt
 8001d46:	4618      	movlt	r0, r3
 8001d48:	e7a4      	b.n	8001c94 <_printf_i+0x168>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4632      	mov	r2, r6
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4640      	mov	r0, r8
 8001d52:	47d0      	blx	sl
 8001d54:	3001      	adds	r0, #1
 8001d56:	d09b      	beq.n	8001c90 <_printf_i+0x164>
 8001d58:	3501      	adds	r5, #1
 8001d5a:	68e3      	ldr	r3, [r4, #12]
 8001d5c:	9903      	ldr	r1, [sp, #12]
 8001d5e:	1a5b      	subs	r3, r3, r1
 8001d60:	42ab      	cmp	r3, r5
 8001d62:	dcf2      	bgt.n	8001d4a <_printf_i+0x21e>
 8001d64:	e7eb      	b.n	8001d3e <_printf_i+0x212>
 8001d66:	2500      	movs	r5, #0
 8001d68:	f104 0619 	add.w	r6, r4, #25
 8001d6c:	e7f5      	b.n	8001d5a <_printf_i+0x22e>
 8001d6e:	bf00      	nop
 8001d70:	08002021 	.word	0x08002021
 8001d74:	08002032 	.word	0x08002032

08001d78 <memcpy>:
 8001d78:	440a      	add	r2, r1
 8001d7a:	4291      	cmp	r1, r2
 8001d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d80:	d100      	bne.n	8001d84 <memcpy+0xc>
 8001d82:	4770      	bx	lr
 8001d84:	b510      	push	{r4, lr}
 8001d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d8e:	4291      	cmp	r1, r2
 8001d90:	d1f9      	bne.n	8001d86 <memcpy+0xe>
 8001d92:	bd10      	pop	{r4, pc}

08001d94 <memmove>:
 8001d94:	4288      	cmp	r0, r1
 8001d96:	b510      	push	{r4, lr}
 8001d98:	eb01 0402 	add.w	r4, r1, r2
 8001d9c:	d902      	bls.n	8001da4 <memmove+0x10>
 8001d9e:	4284      	cmp	r4, r0
 8001da0:	4623      	mov	r3, r4
 8001da2:	d807      	bhi.n	8001db4 <memmove+0x20>
 8001da4:	1e43      	subs	r3, r0, #1
 8001da6:	42a1      	cmp	r1, r4
 8001da8:	d008      	beq.n	8001dbc <memmove+0x28>
 8001daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001db2:	e7f8      	b.n	8001da6 <memmove+0x12>
 8001db4:	4402      	add	r2, r0
 8001db6:	4601      	mov	r1, r0
 8001db8:	428a      	cmp	r2, r1
 8001dba:	d100      	bne.n	8001dbe <memmove+0x2a>
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001dc6:	e7f7      	b.n	8001db8 <memmove+0x24>

08001dc8 <_free_r>:
 8001dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d048      	beq.n	8001e60 <_free_r+0x98>
 8001dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd2:	9001      	str	r0, [sp, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dda:	bfb8      	it	lt
 8001ddc:	18e4      	addlt	r4, r4, r3
 8001dde:	f000 f8d3 	bl	8001f88 <__malloc_lock>
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <_free_r+0x9c>)
 8001de4:	9801      	ldr	r0, [sp, #4]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	4615      	mov	r5, r2
 8001dea:	b933      	cbnz	r3, 8001dfa <_free_r+0x32>
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	6014      	str	r4, [r2, #0]
 8001df0:	b003      	add	sp, #12
 8001df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001df6:	f000 b8cd 	b.w	8001f94 <__malloc_unlock>
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	d90b      	bls.n	8001e16 <_free_r+0x4e>
 8001dfe:	6821      	ldr	r1, [r4, #0]
 8001e00:	1862      	adds	r2, r4, r1
 8001e02:	4293      	cmp	r3, r2
 8001e04:	bf04      	itt	eq
 8001e06:	681a      	ldreq	r2, [r3, #0]
 8001e08:	685b      	ldreq	r3, [r3, #4]
 8001e0a:	6063      	str	r3, [r4, #4]
 8001e0c:	bf04      	itt	eq
 8001e0e:	1852      	addeq	r2, r2, r1
 8001e10:	6022      	streq	r2, [r4, #0]
 8001e12:	602c      	str	r4, [r5, #0]
 8001e14:	e7ec      	b.n	8001df0 <_free_r+0x28>
 8001e16:	461a      	mov	r2, r3
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	b10b      	cbz	r3, 8001e20 <_free_r+0x58>
 8001e1c:	42a3      	cmp	r3, r4
 8001e1e:	d9fa      	bls.n	8001e16 <_free_r+0x4e>
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	1855      	adds	r5, r2, r1
 8001e24:	42a5      	cmp	r5, r4
 8001e26:	d10b      	bne.n	8001e40 <_free_r+0x78>
 8001e28:	6824      	ldr	r4, [r4, #0]
 8001e2a:	4421      	add	r1, r4
 8001e2c:	1854      	adds	r4, r2, r1
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	d1dd      	bne.n	8001df0 <_free_r+0x28>
 8001e34:	681c      	ldr	r4, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	6053      	str	r3, [r2, #4]
 8001e3a:	4421      	add	r1, r4
 8001e3c:	6011      	str	r1, [r2, #0]
 8001e3e:	e7d7      	b.n	8001df0 <_free_r+0x28>
 8001e40:	d902      	bls.n	8001e48 <_free_r+0x80>
 8001e42:	230c      	movs	r3, #12
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	e7d3      	b.n	8001df0 <_free_r+0x28>
 8001e48:	6825      	ldr	r5, [r4, #0]
 8001e4a:	1961      	adds	r1, r4, r5
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	bf04      	itt	eq
 8001e50:	6819      	ldreq	r1, [r3, #0]
 8001e52:	685b      	ldreq	r3, [r3, #4]
 8001e54:	6063      	str	r3, [r4, #4]
 8001e56:	bf04      	itt	eq
 8001e58:	1949      	addeq	r1, r1, r5
 8001e5a:	6021      	streq	r1, [r4, #0]
 8001e5c:	6054      	str	r4, [r2, #4]
 8001e5e:	e7c7      	b.n	8001df0 <_free_r+0x28>
 8001e60:	b003      	add	sp, #12
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	200000b8 	.word	0x200000b8

08001e68 <_malloc_r>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	1ccd      	adds	r5, r1, #3
 8001e6c:	f025 0503 	bic.w	r5, r5, #3
 8001e70:	3508      	adds	r5, #8
 8001e72:	2d0c      	cmp	r5, #12
 8001e74:	bf38      	it	cc
 8001e76:	250c      	movcc	r5, #12
 8001e78:	2d00      	cmp	r5, #0
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	db01      	blt.n	8001e82 <_malloc_r+0x1a>
 8001e7e:	42a9      	cmp	r1, r5
 8001e80:	d903      	bls.n	8001e8a <_malloc_r+0x22>
 8001e82:	230c      	movs	r3, #12
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	2000      	movs	r0, #0
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8a:	f000 f87d 	bl	8001f88 <__malloc_lock>
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <_malloc_r+0xac>)
 8001e90:	680a      	ldr	r2, [r1, #0]
 8001e92:	4614      	mov	r4, r2
 8001e94:	b99c      	cbnz	r4, 8001ebe <_malloc_r+0x56>
 8001e96:	4f20      	ldr	r7, [pc, #128]	; (8001f18 <_malloc_r+0xb0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b923      	cbnz	r3, 8001ea6 <_malloc_r+0x3e>
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f000 f862 	bl	8001f68 <_sbrk_r>
 8001ea4:	6038      	str	r0, [r7, #0]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 f85d 	bl	8001f68 <_sbrk_r>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	d123      	bne.n	8001efa <_malloc_r+0x92>
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	6033      	str	r3, [r6, #0]
 8001eb6:	4630      	mov	r0, r6
 8001eb8:	f000 f86c 	bl	8001f94 <__malloc_unlock>
 8001ebc:	e7e3      	b.n	8001e86 <_malloc_r+0x1e>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	1b5b      	subs	r3, r3, r5
 8001ec2:	d417      	bmi.n	8001ef4 <_malloc_r+0x8c>
 8001ec4:	2b0b      	cmp	r3, #11
 8001ec6:	d903      	bls.n	8001ed0 <_malloc_r+0x68>
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	441c      	add	r4, r3
 8001ecc:	6025      	str	r5, [r4, #0]
 8001ece:	e004      	b.n	8001eda <_malloc_r+0x72>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	bf0c      	ite	eq
 8001ed6:	600b      	streq	r3, [r1, #0]
 8001ed8:	6053      	strne	r3, [r2, #4]
 8001eda:	4630      	mov	r0, r6
 8001edc:	f000 f85a 	bl	8001f94 <__malloc_unlock>
 8001ee0:	f104 000b 	add.w	r0, r4, #11
 8001ee4:	1d23      	adds	r3, r4, #4
 8001ee6:	f020 0007 	bic.w	r0, r0, #7
 8001eea:	1ac2      	subs	r2, r0, r3
 8001eec:	d0cc      	beq.n	8001e88 <_malloc_r+0x20>
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	50a3      	str	r3, [r4, r2]
 8001ef2:	e7c9      	b.n	8001e88 <_malloc_r+0x20>
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	6864      	ldr	r4, [r4, #4]
 8001ef8:	e7cc      	b.n	8001e94 <_malloc_r+0x2c>
 8001efa:	1cc4      	adds	r4, r0, #3
 8001efc:	f024 0403 	bic.w	r4, r4, #3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	d0e3      	beq.n	8001ecc <_malloc_r+0x64>
 8001f04:	1a21      	subs	r1, r4, r0
 8001f06:	4630      	mov	r0, r6
 8001f08:	f000 f82e 	bl	8001f68 <_sbrk_r>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d1dd      	bne.n	8001ecc <_malloc_r+0x64>
 8001f10:	e7cf      	b.n	8001eb2 <_malloc_r+0x4a>
 8001f12:	bf00      	nop
 8001f14:	200000b8 	.word	0x200000b8
 8001f18:	200000bc 	.word	0x200000bc

08001f1c <_realloc_r>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	4607      	mov	r7, r0
 8001f20:	4614      	mov	r4, r2
 8001f22:	460e      	mov	r6, r1
 8001f24:	b921      	cbnz	r1, 8001f30 <_realloc_r+0x14>
 8001f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	f7ff bf9c 	b.w	8001e68 <_malloc_r>
 8001f30:	b922      	cbnz	r2, 8001f3c <_realloc_r+0x20>
 8001f32:	f7ff ff49 	bl	8001dc8 <_free_r>
 8001f36:	4625      	mov	r5, r4
 8001f38:	4628      	mov	r0, r5
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3c:	f000 f830 	bl	8001fa0 <_malloc_usable_size_r>
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	d20f      	bcs.n	8001f64 <_realloc_r+0x48>
 8001f44:	4621      	mov	r1, r4
 8001f46:	4638      	mov	r0, r7
 8001f48:	f7ff ff8e 	bl	8001e68 <_malloc_r>
 8001f4c:	4605      	mov	r5, r0
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d0f2      	beq.n	8001f38 <_realloc_r+0x1c>
 8001f52:	4631      	mov	r1, r6
 8001f54:	4622      	mov	r2, r4
 8001f56:	f7ff ff0f 	bl	8001d78 <memcpy>
 8001f5a:	4631      	mov	r1, r6
 8001f5c:	4638      	mov	r0, r7
 8001f5e:	f7ff ff33 	bl	8001dc8 <_free_r>
 8001f62:	e7e9      	b.n	8001f38 <_realloc_r+0x1c>
 8001f64:	4635      	mov	r5, r6
 8001f66:	e7e7      	b.n	8001f38 <_realloc_r+0x1c>

08001f68 <_sbrk_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4d06      	ldr	r5, [pc, #24]	; (8001f84 <_sbrk_r+0x1c>)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	602b      	str	r3, [r5, #0]
 8001f74:	f000 f81e 	bl	8001fb4 <_sbrk>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_sbrk_r+0x1a>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_sbrk_r+0x1a>
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	20000188 	.word	0x20000188

08001f88 <__malloc_lock>:
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <__malloc_lock+0x8>)
 8001f8a:	f000 b811 	b.w	8001fb0 <__retarget_lock_acquire_recursive>
 8001f8e:	bf00      	nop
 8001f90:	20000190 	.word	0x20000190

08001f94 <__malloc_unlock>:
 8001f94:	4801      	ldr	r0, [pc, #4]	; (8001f9c <__malloc_unlock+0x8>)
 8001f96:	f000 b80c 	b.w	8001fb2 <__retarget_lock_release_recursive>
 8001f9a:	bf00      	nop
 8001f9c:	20000190 	.word	0x20000190

08001fa0 <_malloc_usable_size_r>:
 8001fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fa4:	1f18      	subs	r0, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bfbc      	itt	lt
 8001faa:	580b      	ldrlt	r3, [r1, r0]
 8001fac:	18c0      	addlt	r0, r0, r3
 8001fae:	4770      	bx	lr

08001fb0 <__retarget_lock_acquire_recursive>:
 8001fb0:	4770      	bx	lr

08001fb2 <__retarget_lock_release_recursive>:
 8001fb2:	4770      	bx	lr

08001fb4 <_sbrk>:
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <_sbrk+0x14>)
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	4602      	mov	r2, r0
 8001fba:	b909      	cbnz	r1, 8001fc0 <_sbrk+0xc>
 8001fbc:	4903      	ldr	r1, [pc, #12]	; (8001fcc <_sbrk+0x18>)
 8001fbe:	6019      	str	r1, [r3, #0]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	4402      	add	r2, r0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	4770      	bx	lr
 8001fc8:	200000c0 	.word	0x200000c0
 8001fcc:	20000198 	.word	0x20000198

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
