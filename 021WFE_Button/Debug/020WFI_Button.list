
020WFI_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001820  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080019a8  080019a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019b0  080019b0  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  080019b0  080019b0  000119b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019b8  080019b8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019bc  080019bc  000119bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080019c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          000000ac  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d901  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001924  00000000  00000000  0002d969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021779  00000000  00000000  0002fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d48e  00000000  00000000  00051539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf004  00000000  00000000  0005e9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d9cb  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000a90  00000000  00000000  0012da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ef8  00000000  00000000  0012e4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001990 	.word	0x08001990

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08001990 	.word	0x08001990

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SysTick_Handler>:
#include"main.h"

extern TIM_HandleTypeDef htimer6;
extern UART_HandleTypeDef huart2;
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d4:	f000 fa00 	bl	80008d8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d8:	f000 fb53 	bl	8000b82 <HAL_SYSTICK_IRQHandler>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <TIM6_DAC_IRQHandler+0x10>)
 80004e6:	f000 fdcb 	bl	8001080 <HAL_TIM_IRQHandler>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000054 	.word	0x20000054

080004f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <EXTI0_IRQHandler+0x14>)
 80004fa:	f000 fd51 	bl	8000fa0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fd02 	bl	8000f08 <HAL_GPIO_EXTI_IRQHandler>
 }
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000054 	.word	0x20000054

0800050c <main>:
TIM_HandleTypeDef htimer6;
UART_HandleTypeDef huart2;
extern uint8_t some_data[];

int main()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000510:	f000 f990 	bl	8000834 <HAL_Init>
	UART2_Init();
 8000514:	f000 f866 	bl	80005e4 <UART2_Init>
	GPIO_Init();
 8000518:	f000 f804 	bl	8000524 <GPIO_Init>
	GPIO_AnalogConfig(); //set unused pins of configured GPIO as analog pin to save power.
 800051c:	f000 f8b6 	bl	800068c <GPIO_AnalogConfig>

	while(1)
	{
		//going to sleep
		__WFI();
 8000520:	bf30      	wfi
 8000522:	e7fd      	b.n	8000520 <main+0x14>

08000524 <GPIO_Init>:
	}
}


void GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08c      	sub	sp, #48	; 0x30
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;
	GPIO_InitTypeDef button;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <GPIO_Init+0xb4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <GPIO_Init+0xb4>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <GPIO_Init+0xb4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <GPIO_Init+0xb4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <GPIO_Init+0xb4>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <GPIO_Init+0xb4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

	__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <GPIO_Init+0xb4>)
 8000564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <GPIO_Init+0xb4>)
 8000568:	f023 0308 	bic.w	r3, r3, #8
 800056c:	6513      	str	r3, [r2, #80]	; 0x50

	led.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	623b      	str	r3, [r7, #32]
	led.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000572:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000576:	61fb      	str	r3, [r7, #28]
	led.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
	led.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	2302      	movs	r3, #2
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_Init(GPIOD, &led);
 8000580:	f107 031c 	add.w	r3, r7, #28
 8000584:	4619      	mov	r1, r3
 8000586:	4815      	ldr	r0, [pc, #84]	; (80005dc <GPIO_Init+0xb8>)
 8000588:	f000 fb08 	bl	8000b9c <HAL_GPIO_Init>

	button.Mode = GPIO_MODE_IT_FALLING;
 800058c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000590:	60fb      	str	r3, [r7, #12]
	button.Pin = GPIO_PIN_0;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
	button.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &button);
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	4619      	mov	r1, r3
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <GPIO_Init+0xbc>)
 80005a2:	f000 fafb 	bl	8000b9c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	210f      	movs	r1, #15
 80005aa:	2006      	movs	r0, #6
 80005ac:	f000 fab3 	bl	8000b16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005b0:	2006      	movs	r0, #6
 80005b2:	f000 facc 	bl	8000b4e <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <GPIO_Init+0xb8>)
 80005be:	f000 fc89 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <GPIO_Init+0xb8>)
 80005ca:	f000 fc83 	bl	8000ed4 <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	3730      	adds	r7, #48	; 0x30
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40020000 	.word	0x40020000

080005e4 <UART2_Init>:
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
}
*/

void UART2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <UART2_Init+0x44>)
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <UART2_Init+0x48>)
 80005ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 460800; // increasing baudrate decreases power consumption
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <UART2_Init+0x44>)
 80005f0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80005f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <UART2_Init+0x44>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <UART2_Init+0x44>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <UART2_Init+0x44>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <UART2_Init+0x44>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <UART2_Init+0x44>)
 8000610:	220c      	movs	r2, #12
 8000612:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <UART2_Init+0x44>)
 8000616:	f000 fe81 	bl	800131c <HAL_UART_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 8000620:	f000 f858 	bl	80006d4 <Error_handler>
	}


}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000009c 	.word	0x2000009c
 800062c:	40004400 	.word	0x40004400

08000630 <HAL_GPIO_EXTI_Callback>:
}
*/


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK)
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <HAL_GPIO_EXTI_Callback+0x50>)
 800063c:	f7ff fdc4 	bl	80001c8 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	490d      	ldr	r1, [pc, #52]	; (8000680 <HAL_GPIO_EXTI_Callback+0x50>)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <HAL_GPIO_EXTI_Callback+0x54>)
 800064c:	f000 feb3 	bl	80013b6 <HAL_UART_Transmit>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Error_handler();
 8000656:	f000 f83d 	bl	80006d4 <Error_handler>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <HAL_GPIO_EXTI_Callback+0x58>)
 8000662:	f000 fc37 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f000 f956 	bl	8000918 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_GPIO_EXTI_Callback+0x58>)
 8000674:	f000 fc2e 	bl	8000ed4 <HAL_GPIO_WritePin>


}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	2000009c 	.word	0x2000009c
 8000688:	40020c00 	.word	0x40020c00

0800068c <GPIO_AnalogConfig>:


void GPIO_AnalogConfig(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_analog1, gpio_analog2;
	uint32_t gpio_pins = GPIO_PIN_1 | GPIO_PIN_4 /
 8000692:	f249 2342 	movw	r3, #37442	; 0x9242
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
						 GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 /
						 GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 /
						 GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 /
						 GPIO_PIN_14 | GPIO_PIN_15;

	gpio_analog1.Pin = gpio_pins;
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	61bb      	str	r3, [r7, #24]
	gpio_analog1.Mode = GPIO_MODE_ANALOG;
 800069c:	2303      	movs	r3, #3
 800069e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_analog1);
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <GPIO_AnalogConfig+0x40>)
 80006a8:	f000 fa78 	bl	8000b9c <HAL_GPIO_Init>

	gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 /
 80006ac:	f240 234f 	movw	r3, #591	; 0x24f
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
				GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 /
				GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 /
				GPIO_PIN_11 | GPIO_PIN_2| GPIO_PIN_3;


	gpio_analog2.Pin = gpio_pins;
 80006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b4:	607b      	str	r3, [r7, #4]
	gpio_analog2.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &gpio_analog2);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <GPIO_AnalogConfig+0x44>)
 80006c0:	f000 fa6c 	bl	8000b9c <HAL_GPIO_Init>


}
 80006c4:	bf00      	nop
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <Error_handler>:

void Error_handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	while(1);
 80006d8:	e7fe      	b.n	80006d8 <Error_handler+0x4>
	...

080006dc <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 fa0d 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_MspInit+0x40>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_MspInit+0x40>)
 80006ec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006f0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	f06f 000b 	mvn.w	r0, #11
 80006fa:	f000 fa0c 	bl	8000b16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	f06f 000a 	mvn.w	r0, #10
 8000706:	f000 fa06 	bl	8000b16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	f06f 0009 	mvn.w	r0, #9
 8000712:	f000 fa00 	bl	8000b16 <HAL_NVIC_SetPriority>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <HAL_UART_MspInit+0x94>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <HAL_UART_MspInit+0x94>)
 8000732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <HAL_UART_MspInit+0x94>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <HAL_UART_MspInit+0x94>)
 8000746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000748:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <HAL_UART_MspInit+0x94>)
 800074a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800074e:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <HAL_UART_MspInit+0x94>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <HAL_UART_MspInit+0x94>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_UART_MspInit+0x94>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 800076c:	2304      	movs	r3, #4
 800076e:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 800077c:	2307      	movs	r3, #7
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000788:	f000 fa08 	bl	8000b9c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800078c:	2308      	movs	r3, #8
 800078e:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000798:	f000 fa00 	bl	8000b9c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079c:	2026      	movs	r0, #38	; 0x26
 800079e:	f000 f9d6 	bl	8000b4e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	2026      	movs	r0, #38	; 0x26
 80007a8:	f000 f9b5 	bl	8000b16 <HAL_NVIC_SetPriority>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopFillZerobss+0x26>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800080a:	f7ff ffd7 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f001 f89b 	bl	8001948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000812:	f7ff fe7b 	bl	800050c <main>
  bx  lr    
 8000816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000824:	080019c0 	.word	0x080019c0
  ldr r2, =_sbss
 8000828:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800082c:	200000e4 	.word	0x200000e4

08000830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_Init+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_Init+0x40>)
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_Init+0x40>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x40>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f94f 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff ff38 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023c00 	.word	0x40023c00

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f967 	bl	8000b6a <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f92f 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	20000034 	.word	0x20000034
 80008d4:	20000030 	.word	0x20000030

080008d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000034 	.word	0x20000034
 80008fc:	200000e0 	.word	0x200000e0

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200000e0 	.word	0x200000e0

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffde 	bl	8000900 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000034 	.word	0x20000034

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff29 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff3e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff31 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b86:	f000 f802 	bl	8000b8e <HAL_SYSTICK_Callback>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e16b      	b.n	8000e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 815a 	bne.w	8000e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d005      	beq.n	8000bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d130      	bne.n	8000c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d017      	beq.n	8000c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d123      	bne.n	8000ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	69b9      	ldr	r1, [r7, #24]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80b4 	beq.w	8000e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a5b      	ldr	r2, [pc, #364]	; (8000eac <HAL_GPIO_Init+0x310>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_GPIO_Init+0x314>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x226>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x318>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d025      	beq.n	8000dbe <HAL_GPIO_Init+0x222>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_GPIO_Init+0x31c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01f      	beq.n	8000dba <HAL_GPIO_Init+0x21e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x320>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x21a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x216>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4d      	ldr	r2, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x328>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x212>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x32c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x20e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <HAL_GPIO_Init+0x330>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x20a>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e00e      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000da6:	2308      	movs	r3, #8
 8000da8:	e00c      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e00a      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dae:	2305      	movs	r3, #5
 8000db0:	e008      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000db2:	2304      	movs	r3, #4
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x228>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	f002 0203 	and.w	r2, r2, #3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4935      	ldr	r1, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x310>)
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e06:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_GPIO_Init+0x334>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	f67f ae90 	bls.w	8000bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40021400 	.word	0x40021400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021c00 	.word	0x40021c00
 8000ed0:	40013c00 	.word	0x40013c00

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef0:	e003      	b.n	8000efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	041a      	lsls	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb82 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013c00 	.word	0x40013c00

08000f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f54:	f7ff fff0 	bl	8000f38 <HAL_RCC_GetHCLKFreq>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	0a9b      	lsrs	r3, r3, #10
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	4903      	ldr	r1, [pc, #12]	; (8000f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f66:	5ccb      	ldrb	r3, [r1, r3]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	080019a8 	.word	0x080019a8

08000f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f7c:	f7ff ffdc 	bl	8000f38 <HAL_RCC_GetHCLKFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	0b5b      	lsrs	r3, r3, #13
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	4903      	ldr	r1, [pc, #12]	; (8000f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	080019a8 	.word	0x080019a8

08000fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d001      	beq.n	8000fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e04e      	b.n	8001056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_TIM_Base_Start_IT+0xc4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d022      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe2:	d01d      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_TIM_Base_Start_IT+0xc8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d018      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_TIM_Base_Start_IT+0xcc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <HAL_TIM_Base_Start_IT+0xd0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00e      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_TIM_Base_Start_IT+0xd4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d009      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_TIM_Base_Start_IT+0xd8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d004      	beq.n	8001020 <HAL_TIM_Base_Start_IT+0x80>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <HAL_TIM_Base_Start_IT+0xdc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d111      	bne.n	8001044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b06      	cmp	r3, #6
 8001030:	d010      	beq.n	8001054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0201 	orr.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001042:	e007      	b.n	8001054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000
 8001068:	40000400 	.word	0x40000400
 800106c:	40000800 	.word	0x40000800
 8001070:	40000c00 	.word	0x40000c00
 8001074:	40010400 	.word	0x40010400
 8001078:	40014000 	.word	0x40014000
 800107c:	40001800 	.word	0x40001800

08001080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b02      	cmp	r3, #2
 8001094:	d122      	bne.n	80010dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d11b      	bne.n	80010dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f06f 0202 	mvn.w	r2, #2
 80010ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f8f8 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80010c8:	e005      	b.n	80010d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f8ea 	bl	80012a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f8fb 	bl	80012cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d122      	bne.n	8001130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d11b      	bne.n	8001130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f06f 0204 	mvn.w	r2, #4
 8001100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2202      	movs	r2, #2
 8001106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f8ce 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 800111c:	e005      	b.n	800112a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f8c0 	bl	80012a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f8d1 	bl	80012cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b08      	cmp	r3, #8
 800113c:	d122      	bne.n	8001184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b08      	cmp	r3, #8
 800114a:	d11b      	bne.n	8001184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f06f 0208 	mvn.w	r2, #8
 8001154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f8a4 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 8001170:	e005      	b.n	800117e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f896 	bl	80012a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f8a7 	bl	80012cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b10      	cmp	r3, #16
 8001190:	d122      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b10      	cmp	r3, #16
 800119e:	d11b      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f06f 0210 	mvn.w	r2, #16
 80011a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2208      	movs	r2, #8
 80011ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f87a 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80011c4:	e005      	b.n	80011d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f86c 	bl	80012a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f87d 	bl	80012cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d10e      	bne.n	8001204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 0201 	mvn.w	r2, #1
 80011fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f846 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	2b80      	cmp	r3, #128	; 0x80
 8001210:	d10e      	bne.n	8001230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121c:	2b80      	cmp	r3, #128	; 0x80
 800121e:	d107      	bne.n	8001230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f86c 	bl	8001308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d10e      	bne.n	800125c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001248:	2b40      	cmp	r3, #64	; 0x40
 800124a:	d107      	bne.n	800125c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f842 	bl	80012e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	2b20      	cmp	r3, #32
 8001268:	d10e      	bne.n	8001288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b20      	cmp	r3, #32
 8001276:	d107      	bne.n	8001288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f06f 0220 	mvn.w	r2, #32
 8001280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f836 	bl	80012f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e03f      	b.n	80013ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f9ec 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800135e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f929 	bl	80015b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b08a      	sub	sp, #40	; 0x28
 80013ba:	af02      	add	r7, sp, #8
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d17c      	bne.n	80014d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_UART_Transmit+0x2c>
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e075      	b.n	80014d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_UART_Transmit+0x3e>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e06e      	b.n	80014d2 <HAL_UART_Transmit+0x11c>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2221      	movs	r2, #33	; 0x21
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800140a:	f7ff fa79 	bl	8000900 <HAL_GetTick>
 800140e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001424:	d108      	bne.n	8001438 <HAL_UART_Transmit+0x82>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d104      	bne.n	8001438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	e003      	b.n	8001440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001448:	e02a      	b.n	80014a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2200      	movs	r2, #0
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f840 	bl	80014da <UART_WaitOnFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e036      	b.n	80014d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10b      	bne.n	8001482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	3302      	adds	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	e007      	b.n	8001492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3301      	adds	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1cf      	bne.n	800144a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2200      	movs	r2, #0
 80014b2:	2140      	movs	r1, #64	; 0x40
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f810 	bl	80014da <UART_WaitOnFlagUntilTimeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e006      	b.n	80014d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014d0:	2302      	movs	r3, #2
  }
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b090      	sub	sp, #64	; 0x40
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014ea:	e050      	b.n	800158e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f2:	d04c      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <UART_WaitOnFlagUntilTimeout+0x30>
 80014fa:	f7ff fa01 	bl	8000900 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001506:	429a      	cmp	r2, r3
 8001508:	d241      	bcs.n	800158e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	330c      	adds	r3, #12
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	e853 3f00 	ldrex	r3, [r3]
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	330c      	adds	r3, #12
 8001528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152a:	637a      	str	r2, [r7, #52]	; 0x34
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800152e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001532:	e841 2300 	strex	r3, r2, [r1]
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e5      	bne.n	800150a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3314      	adds	r3, #20
 8001544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	e853 3f00 	ldrex	r3, [r3]
 800154c:	613b      	str	r3, [r7, #16]
   return(result);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3314      	adds	r3, #20
 800155c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800155e:	623a      	str	r2, [r7, #32]
 8001560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001562:	69f9      	ldr	r1, [r7, #28]
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	e841 2300 	strex	r3, r2, [r1]
 800156a:	61bb      	str	r3, [r7, #24]
   return(result);
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e5      	bne.n	800153e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e00f      	b.n	80015ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4013      	ands	r3, r2
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	429a      	cmp	r2, r3
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d09f      	beq.n	80014ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3740      	adds	r7, #64	; 0x40
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:	b09f      	sub	sp, #124	; 0x7c
 80015be:	af00      	add	r7, sp, #0
 80015c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	68d9      	ldr	r1, [r3, #12]
 80015d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	ea40 0301 	orr.w	r3, r0, r1
 80015d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80015f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80015fc:	f021 010c 	bic.w	r1, r1, #12
 8001600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001606:	430b      	orrs	r3, r1
 8001608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800160a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001616:	6999      	ldr	r1, [r3, #24]
 8001618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	ea40 0301 	orr.w	r3, r0, r1
 8001620:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4bc5      	ldr	r3, [pc, #788]	; (800193c <UART_SetConfig+0x384>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d004      	beq.n	8001636 <UART_SetConfig+0x7e>
 800162c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4bc3      	ldr	r3, [pc, #780]	; (8001940 <UART_SetConfig+0x388>)
 8001632:	429a      	cmp	r2, r3
 8001634:	d103      	bne.n	800163e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001636:	f7ff fc9f 	bl	8000f78 <HAL_RCC_GetPCLK2Freq>
 800163a:	6778      	str	r0, [r7, #116]	; 0x74
 800163c:	e002      	b.n	8001644 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800163e:	f7ff fc87 	bl	8000f50 <HAL_RCC_GetPCLK1Freq>
 8001642:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164c:	f040 80b6 	bne.w	80017bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001652:	461c      	mov	r4, r3
 8001654:	f04f 0500 	mov.w	r5, #0
 8001658:	4622      	mov	r2, r4
 800165a:	462b      	mov	r3, r5
 800165c:	1891      	adds	r1, r2, r2
 800165e:	6439      	str	r1, [r7, #64]	; 0x40
 8001660:	415b      	adcs	r3, r3
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
 8001664:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001668:	1912      	adds	r2, r2, r4
 800166a:	eb45 0303 	adc.w	r3, r5, r3
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	00d9      	lsls	r1, r3, #3
 8001678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800167c:	00d0      	lsls	r0, r2, #3
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	1911      	adds	r1, r2, r4
 8001684:	6639      	str	r1, [r7, #96]	; 0x60
 8001686:	416b      	adcs	r3, r5
 8001688:	667b      	str	r3, [r7, #100]	; 0x64
 800168a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	461a      	mov	r2, r3
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	1891      	adds	r1, r2, r2
 8001696:	63b9      	str	r1, [r7, #56]	; 0x38
 8001698:	415b      	adcs	r3, r3
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800169c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016a4:	f7fe fd98 	bl	80001d8 <__aeabi_uldivmod>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4ba5      	ldr	r3, [pc, #660]	; (8001944 <UART_SetConfig+0x38c>)
 80016ae:	fba3 2302 	umull	r2, r3, r3, r2
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	011e      	lsls	r6, r3, #4
 80016b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016b8:	461c      	mov	r4, r3
 80016ba:	f04f 0500 	mov.w	r5, #0
 80016be:	4622      	mov	r2, r4
 80016c0:	462b      	mov	r3, r5
 80016c2:	1891      	adds	r1, r2, r2
 80016c4:	6339      	str	r1, [r7, #48]	; 0x30
 80016c6:	415b      	adcs	r3, r3
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
 80016ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ce:	1912      	adds	r2, r2, r4
 80016d0:	eb45 0303 	adc.w	r3, r5, r3
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	00d9      	lsls	r1, r3, #3
 80016de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016e2:	00d0      	lsls	r0, r2, #3
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	1911      	adds	r1, r2, r4
 80016ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80016ec:	416b      	adcs	r3, r5
 80016ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	461a      	mov	r2, r3
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	1891      	adds	r1, r2, r2
 80016fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80016fe:	415b      	adcs	r3, r3
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001706:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800170a:	f7fe fd65 	bl	80001d8 <__aeabi_uldivmod>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <UART_SetConfig+0x38c>)
 8001714:	fba3 1302 	umull	r1, r3, r3, r2
 8001718:	095b      	lsrs	r3, r3, #5
 800171a:	2164      	movs	r1, #100	; 0x64
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	3332      	adds	r3, #50	; 0x32
 8001726:	4a87      	ldr	r2, [pc, #540]	; (8001944 <UART_SetConfig+0x38c>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001734:	441e      	add	r6, r3
 8001736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001738:	4618      	mov	r0, r3
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	1894      	adds	r4, r2, r2
 8001744:	623c      	str	r4, [r7, #32]
 8001746:	415b      	adcs	r3, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800174e:	1812      	adds	r2, r2, r0
 8001750:	eb41 0303 	adc.w	r3, r1, r3
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	f04f 0500 	mov.w	r5, #0
 800175c:	00dd      	lsls	r5, r3, #3
 800175e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001762:	00d4      	lsls	r4, r2, #3
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	1814      	adds	r4, r2, r0
 800176a:	653c      	str	r4, [r7, #80]	; 0x50
 800176c:	414b      	adcs	r3, r1
 800176e:	657b      	str	r3, [r7, #84]	; 0x54
 8001770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	461a      	mov	r2, r3
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	1891      	adds	r1, r2, r2
 800177c:	61b9      	str	r1, [r7, #24]
 800177e:	415b      	adcs	r3, r3
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001786:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800178a:	f7fe fd25 	bl	80001d8 <__aeabi_uldivmod>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <UART_SetConfig+0x38c>)
 8001794:	fba3 1302 	umull	r1, r3, r3, r2
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	2164      	movs	r1, #100	; 0x64
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	3332      	adds	r3, #50	; 0x32
 80017a6:	4a67      	ldr	r2, [pc, #412]	; (8001944 <UART_SetConfig+0x38c>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	f003 0207 	and.w	r2, r3, #7
 80017b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4432      	add	r2, r6
 80017b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80017ba:	e0b9      	b.n	8001930 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017be:	461c      	mov	r4, r3
 80017c0:	f04f 0500 	mov.w	r5, #0
 80017c4:	4622      	mov	r2, r4
 80017c6:	462b      	mov	r3, r5
 80017c8:	1891      	adds	r1, r2, r2
 80017ca:	6139      	str	r1, [r7, #16]
 80017cc:	415b      	adcs	r3, r3
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d4:	1912      	adds	r2, r2, r4
 80017d6:	eb45 0303 	adc.w	r3, r5, r3
 80017da:	f04f 0000 	mov.w	r0, #0
 80017de:	f04f 0100 	mov.w	r1, #0
 80017e2:	00d9      	lsls	r1, r3, #3
 80017e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017e8:	00d0      	lsls	r0, r2, #3
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	eb12 0804 	adds.w	r8, r2, r4
 80017f2:	eb43 0905 	adc.w	r9, r3, r5
 80017f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	008b      	lsls	r3, r1, #2
 800180a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800180e:	0082      	lsls	r2, r0, #2
 8001810:	4640      	mov	r0, r8
 8001812:	4649      	mov	r1, r9
 8001814:	f7fe fce0 	bl	80001d8 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4b49      	ldr	r3, [pc, #292]	; (8001944 <UART_SetConfig+0x38c>)
 800181e:	fba3 2302 	umull	r2, r3, r3, r2
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	011e      	lsls	r6, r3, #4
 8001826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001828:	4618      	mov	r0, r3
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	1894      	adds	r4, r2, r2
 8001834:	60bc      	str	r4, [r7, #8]
 8001836:	415b      	adcs	r3, r3
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800183e:	1812      	adds	r2, r2, r0
 8001840:	eb41 0303 	adc.w	r3, r1, r3
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	f04f 0500 	mov.w	r5, #0
 800184c:	00dd      	lsls	r5, r3, #3
 800184e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001852:	00d4      	lsls	r4, r2, #3
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	1814      	adds	r4, r2, r0
 800185a:	64bc      	str	r4, [r7, #72]	; 0x48
 800185c:	414b      	adcs	r3, r1
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	008b      	lsls	r3, r1, #2
 8001874:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001878:	0082      	lsls	r2, r0, #2
 800187a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800187e:	f7fe fcab 	bl	80001d8 <__aeabi_uldivmod>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <UART_SetConfig+0x38c>)
 8001888:	fba3 1302 	umull	r1, r3, r3, r2
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	2164      	movs	r1, #100	; 0x64
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	3332      	adds	r3, #50	; 0x32
 800189a:	4a2a      	ldr	r2, [pc, #168]	; (8001944 <UART_SetConfig+0x38c>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a6:	441e      	add	r6, r3
 80018a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018aa:	4618      	mov	r0, r3
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	1894      	adds	r4, r2, r2
 80018b6:	603c      	str	r4, [r7, #0]
 80018b8:	415b      	adcs	r3, r3
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c0:	1812      	adds	r2, r2, r0
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	f04f 0400 	mov.w	r4, #0
 80018ca:	f04f 0500 	mov.w	r5, #0
 80018ce:	00dd      	lsls	r5, r3, #3
 80018d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80018d4:	00d4      	lsls	r4, r2, #3
 80018d6:	4622      	mov	r2, r4
 80018d8:	462b      	mov	r3, r5
 80018da:	eb12 0a00 	adds.w	sl, r2, r0
 80018de:	eb43 0b01 	adc.w	fp, r3, r1
 80018e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	008b      	lsls	r3, r1, #2
 80018f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80018fa:	0082      	lsls	r2, r0, #2
 80018fc:	4650      	mov	r0, sl
 80018fe:	4659      	mov	r1, fp
 8001900:	f7fe fc6a 	bl	80001d8 <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <UART_SetConfig+0x38c>)
 800190a:	fba3 1302 	umull	r1, r3, r3, r2
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2164      	movs	r1, #100	; 0x64
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	3332      	adds	r3, #50	; 0x32
 800191c:	4a09      	ldr	r2, [pc, #36]	; (8001944 <UART_SetConfig+0x38c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	f003 020f 	and.w	r2, r3, #15
 8001928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4432      	add	r2, r6
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	377c      	adds	r7, #124	; 0x7c
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193a:	bf00      	nop
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <__libc_init_array>:
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4d0d      	ldr	r5, [pc, #52]	; (8001980 <__libc_init_array+0x38>)
 800194c:	4c0d      	ldr	r4, [pc, #52]	; (8001984 <__libc_init_array+0x3c>)
 800194e:	1b64      	subs	r4, r4, r5
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	2600      	movs	r6, #0
 8001954:	42a6      	cmp	r6, r4
 8001956:	d109      	bne.n	800196c <__libc_init_array+0x24>
 8001958:	4d0b      	ldr	r5, [pc, #44]	; (8001988 <__libc_init_array+0x40>)
 800195a:	4c0c      	ldr	r4, [pc, #48]	; (800198c <__libc_init_array+0x44>)
 800195c:	f000 f818 	bl	8001990 <_init>
 8001960:	1b64      	subs	r4, r4, r5
 8001962:	10a4      	asrs	r4, r4, #2
 8001964:	2600      	movs	r6, #0
 8001966:	42a6      	cmp	r6, r4
 8001968:	d105      	bne.n	8001976 <__libc_init_array+0x2e>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001970:	4798      	blx	r3
 8001972:	3601      	adds	r6, #1
 8001974:	e7ee      	b.n	8001954 <__libc_init_array+0xc>
 8001976:	f855 3b04 	ldr.w	r3, [r5], #4
 800197a:	4798      	blx	r3
 800197c:	3601      	adds	r6, #1
 800197e:	e7f2      	b.n	8001966 <__libc_init_array+0x1e>
 8001980:	080019b8 	.word	0x080019b8
 8001984:	080019b8 	.word	0x080019b8
 8001988:	080019b8 	.word	0x080019b8
 800198c:	080019bc 	.word	0x080019bc

08001990 <_init>:
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001992:	bf00      	nop
 8001994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001996:	bc08      	pop	{r3}
 8001998:	469e      	mov	lr, r3
 800199a:	4770      	bx	lr

0800199c <_fini>:
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199e:	bf00      	nop
 80019a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a2:	bc08      	pop	{r3}
 80019a4:	469e      	mov	lr, r3
 80019a6:	4770      	bx	lr
