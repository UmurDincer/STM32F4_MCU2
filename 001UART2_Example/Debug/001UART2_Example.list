
001UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001600  08001600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001628  08001628  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001630  08001630  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001634  08001634  00011634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000064  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fd3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001249  00000000  00000000  00028013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c0  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000558  00000000  00000000  00029820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7fa  00000000  00000000  00029d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006edd  00000000  00000000  00049572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c15c4  00000000  00000000  0005044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00111a13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001688  00000000  00000000  00111a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015e8 	.word	0x080015e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080015e8 	.word	0x080015e8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SysTick_Handler>:
 *      Author: umurd
 */


void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d4:	f000 f99e 	bl	8000814 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d8:	f000 facd 	bl	8000a76 <HAL_SYSTICK_IRQHandler>

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <main>:
UART_HandleTypeDef huart2;

char *user_data = "The application is running\r\n";

int main(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b09d      	sub	sp, #116	; 0x74
 80004e4:	af00      	add	r7, sp, #0
	 HAL_Init();
 80004e6:	f000 f943 	bl	8000770 <HAL_Init>
	 SystemClockConfig();
 80004ea:	f000 f86a 	bl	80005c2 <SystemClockConfig>
	 UART2_Init();
 80004ee:	f000 f86f 	bl	80005d0 <UART2_Init>

	 if(HAL_UART_Transmit(&huart2, (uint8_t*)user_data, (uint16_t)strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <main+0xb0>)
 80004f4:	681c      	ldr	r4, [r3, #0]
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <main+0xb0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe64 	bl	80001c8 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	4621      	mov	r1, r4
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <main+0xb4>)
 800050c:	f000 fcdd 	bl	8000eca <HAL_UART_Transmit>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <main+0x3a>
	 {
		 Error_handler();
 8000516:	f000 f881 	bl	800061c <Error_handler>
	 }

	 uint8_t received_data;
	 uint8_t data_buffer[100];
	 uint32_t count = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	66fb      	str	r3, [r7, #108]	; 0x6c
	 while(1)
	 {
		 HAL_UART_Receive(&huart2, &received_data, 1, HAL_MAX_DELAY);
 800051e:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	2201      	movs	r2, #1
 8000528:	481a      	ldr	r0, [pc, #104]	; (8000594 <main+0xb4>)
 800052a:	f000 fd60 	bl	8000fee <HAL_UART_Receive>
		 if(received_data == '\r')
 800052e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000532:	2b0d      	cmp	r3, #13
 8000534:	d00f      	beq.n	8000556 <main+0x76>
		 {
			break;
		 }
		 else
		 {
			 data_buffer[count++] = convert_to_capital(received_data);
 8000536:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800053a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800053c:	1c63      	adds	r3, r4, #1
 800053e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000540:	4610      	mov	r0, r2
 8000542:	f000 f829 	bl	8000598 <convert_to_capital>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054e:	4423      	add	r3, r4
 8000550:	f803 2c6c 	strb.w	r2, [r3, #-108]
		 HAL_UART_Receive(&huart2, &received_data, 1, HAL_MAX_DELAY);
 8000554:	e7e3      	b.n	800051e <main+0x3e>
			break;
 8000556:	bf00      	nop
		 }
	 }

	 data_buffer[count++] = '\r';
 8000558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800055e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000562:	4413      	add	r3, r2
 8000564:	220d      	movs	r2, #13
 8000566:	f803 2c6c 	strb.w	r2, [r3, #-108]
	 if(HAL_UART_Transmit(&huart2, (uint8_t*)data_buffer,count, HAL_MAX_DELAY) != HAL_OK)
 800056a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800056c:	b29a      	uxth	r2, r3
 800056e:	1d39      	adds	r1, r7, #4
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <main+0xb4>)
 8000576:	f000 fca8 	bl	8000eca <HAL_UART_Transmit>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0xa4>
	 	 {
	 		 Error_handler();
 8000580:	f000 f84c 	bl	800061c <Error_handler>
 8000584:	2300      	movs	r3, #0
	 	 }

}
 8000586:	4618      	mov	r0, r3
 8000588:	3774      	adds	r7, #116	; 0x74
 800058a:	46bd      	mov	sp, r7
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000
 8000594:	2000002c 	.word	0x2000002c

08000598 <convert_to_capital>:


uint8_t convert_to_capital(uint8_t data)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	if(data >= 'a' && data <= 'z')
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b60      	cmp	r3, #96	; 0x60
 80005a6:	d905      	bls.n	80005b4 <convert_to_capital+0x1c>
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b7a      	cmp	r3, #122	; 0x7a
 80005ac:	d802      	bhi.n	80005b4 <convert_to_capital+0x1c>
	{
		data -= 32;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b20      	subs	r3, #32
 80005b2:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <SystemClockConfig>:

void SystemClockConfig(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <UART2_Init>:

void UART2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <UART2_Init+0x44>)
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <UART2_Init+0x48>)
 80005d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <UART2_Init+0x44>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <UART2_Init+0x44>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <UART2_Init+0x44>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <UART2_Init+0x44>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <UART2_Init+0x44>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <UART2_Init+0x44>)
 80005fc:	220c      	movs	r2, #12
 80005fe:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <UART2_Init+0x44>)
 8000602:	f000 fc15 	bl	8000e30 <HAL_UART_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 800060c:	f000 f806 	bl	800061c <Error_handler>
	}

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000002c 	.word	0x2000002c
 8000618:	40004400 	.word	0x40004400

0800061c <Error_handler>:

void Error_handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	while(1);
 8000620:	e7fe      	b.n	8000620 <Error_handler+0x4>
	...

08000624 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	// low level processor specific initialization
	//1. Set up the priority groupingf of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f9e3 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0x7 << 16); // 0x7 = 111 so 16. 17. and 18. bits are enabled
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_MspInit+0x40>)
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <HAL_MspInit+0x40>)
 8000634:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000638:	6253      	str	r3, [r2, #36]	; 0x24
							   // which are MEMFAULTENA, BUSFAULTENA, ,USGFAULTENA

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	f06f 000b 	mvn.w	r0, #11
 8000642:	f000 f9e2 	bl	8000a0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	f06f 000a 	mvn.w	r0, #10
 800064e:	f000 f9dc 	bl	8000a0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	f06f 0009 	mvn.w	r0, #9
 800065a:	f000 f9d6 	bl	8000a0a <HAL_NVIC_SetPriority>

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	// here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <HAL_UART_MspInit+0x88>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0x88>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configuration
	gpio_uart.Pin = GPIO_PIN_2;
 80006a8:	2304      	movs	r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; // UART2_TX
 80006b8:	2307      	movs	r3, #7
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <HAL_UART_MspInit+0x8c>)
 80006c4:	f000 f9e4 	bl	8000a90 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;			  //UART2_RX
 80006c8:	2308      	movs	r3, #8
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <HAL_UART_MspInit+0x8c>)
 80006d4:	f000 f9dc 	bl	8000a90 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority(NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006d8:	2026      	movs	r0, #38	; 0x26
 80006da:	f000 f9b2 	bl	8000a42 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	210f      	movs	r1, #15
 80006e2:	2026      	movs	r0, #38	; 0x26
 80006e4:	f000 f991 	bl	8000a0a <HAL_NVIC_SetPriority>


}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SystemInit+0x20>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <SystemInit+0x20>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000722:	490e      	ldr	r1, [pc, #56]	; (800075c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000724:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000738:	4c0b      	ldr	r4, [pc, #44]	; (8000768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000746:	f7ff ffd7 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074a:	f000 ff29 	bl	80015a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800074e:	f7ff fec7 	bl	80004e0 <main>
  bx  lr    
 8000752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000760:	08001638 	.word	0x08001638
  ldr r2, =_sbss
 8000764:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000768:	20000074 	.word	0x20000074

0800076c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC_IRQHandler>
	...

08000770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <HAL_Init+0x40>)
 800077a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_Init+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_Init+0x40>)
 8000786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800078a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x40>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x40>)
 8000792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f92b 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff ff3e 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023c00 	.word	0x40023c00

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f943 	bl	8000a5e <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f90b 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000008 	.word	0x20000008

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000070 	.word	0x20000070

0800083c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000070 	.word	0x20000070

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff29 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff3e 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff31 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a7a:	f000 f802 	bl	8000a82 <HAL_SYSTICK_Callback>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e16b      	b.n	8000d84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aac:	2201      	movs	r2, #1
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f040 815a 	bne.w	8000d7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d005      	beq.n	8000ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d130      	bne.n	8000b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	f003 0201 	and.w	r2, r3, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d017      	beq.n	8000b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d123      	bne.n	8000bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	69b9      	ldr	r1, [r7, #24]
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0203 	and.w	r2, r3, #3
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80b4 	beq.w	8000d7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b60      	ldr	r3, [pc, #384]	; (8000d9c <HAL_GPIO_Init+0x30c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a5f      	ldr	r2, [pc, #380]	; (8000d9c <HAL_GPIO_Init+0x30c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b5d      	ldr	r3, [pc, #372]	; (8000d9c <HAL_GPIO_Init+0x30c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c32:	4a5b      	ldr	r2, [pc, #364]	; (8000da0 <HAL_GPIO_Init+0x310>)
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <HAL_GPIO_Init+0x314>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d02b      	beq.n	8000cb6 <HAL_GPIO_Init+0x226>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <HAL_GPIO_Init+0x318>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d025      	beq.n	8000cb2 <HAL_GPIO_Init+0x222>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a50      	ldr	r2, [pc, #320]	; (8000dac <HAL_GPIO_Init+0x31c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d01f      	beq.n	8000cae <HAL_GPIO_Init+0x21e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4f      	ldr	r2, [pc, #316]	; (8000db0 <HAL_GPIO_Init+0x320>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d019      	beq.n	8000caa <HAL_GPIO_Init+0x21a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4e      	ldr	r2, [pc, #312]	; (8000db4 <HAL_GPIO_Init+0x324>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d013      	beq.n	8000ca6 <HAL_GPIO_Init+0x216>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4d      	ldr	r2, [pc, #308]	; (8000db8 <HAL_GPIO_Init+0x328>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d00d      	beq.n	8000ca2 <HAL_GPIO_Init+0x212>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4c      	ldr	r2, [pc, #304]	; (8000dbc <HAL_GPIO_Init+0x32c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d007      	beq.n	8000c9e <HAL_GPIO_Init+0x20e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4b      	ldr	r2, [pc, #300]	; (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_GPIO_Init+0x20a>
 8000c96:	2307      	movs	r3, #7
 8000c98:	e00e      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	e00c      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	e00a      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	f002 0203 	and.w	r2, r2, #3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc8:	4935      	ldr	r1, [pc, #212]	; (8000da0 <HAL_GPIO_Init+0x310>)
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cfa:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3301      	adds	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	f67f ae90 	bls.w	8000aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40021400 	.word	0x40021400
 8000dbc:	40021800 	.word	0x40021800
 8000dc0:	40021c00 	.word	0x40021c00
 8000dc4:	40013c00 	.word	0x40013c00

08000dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000de4:	f7ff fff0 	bl	8000dc8 <HAL_RCC_GetHCLKFreq>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	0a9b      	lsrs	r3, r3, #10
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	4903      	ldr	r1, [pc, #12]	; (8000e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000df6:	5ccb      	ldrb	r3, [r1, r3]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	08001620 	.word	0x08001620

08000e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e0c:	f7ff ffdc 	bl	8000dc8 <HAL_RCC_GetHCLKFreq>
 8000e10:	4602      	mov	r2, r0
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	0b5b      	lsrs	r3, r3, #13
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	4903      	ldr	r1, [pc, #12]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e1e:	5ccb      	ldrb	r3, [r1, r3]
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	08001620 	.word	0x08001620

08000e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e03f      	b.n	8000ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fc06 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2224      	movs	r2, #36	; 0x24
 8000e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f9cb 	bl	8001210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2220      	movs	r2, #32
 8000ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b08a      	sub	sp, #40	; 0x28
 8000ece:	af02      	add	r7, sp, #8
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b20      	cmp	r3, #32
 8000ee8:	d17c      	bne.n	8000fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_UART_Transmit+0x2c>
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e075      	b.n	8000fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_UART_Transmit+0x3e>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e06e      	b.n	8000fe6 <HAL_UART_Transmit+0x11c>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2221      	movs	r2, #33	; 0x21
 8000f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000f1e:	f7ff fc8d 	bl	800083c <HAL_GetTick>
 8000f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	88fa      	ldrh	r2, [r7, #6]
 8000f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f38:	d108      	bne.n	8000f4c <HAL_UART_Transmit+0x82>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d104      	bne.n	8000f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	e003      	b.n	8000f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000f5c:	e02a      	b.n	8000fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2200      	movs	r2, #0
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f8e2 	bl	8001132 <UART_WaitOnFlagUntilTimeout>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e036      	b.n	8000fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10b      	bne.n	8000f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	3302      	adds	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	e007      	b.n	8000fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1cf      	bne.n	8000f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 f8b2 	bl	8001132 <UART_WaitOnFlagUntilTimeout>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e006      	b.n	8000fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2220      	movs	r2, #32
 8000fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b08a      	sub	sp, #40	; 0x28
 8000ff2:	af02      	add	r7, sp, #8
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b20      	cmp	r3, #32
 800100c:	f040 808c 	bne.w	8001128 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_UART_Receive+0x2e>
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e084      	b.n	800112a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_UART_Receive+0x40>
 800102a:	2302      	movs	r3, #2
 800102c:	e07d      	b.n	800112a <HAL_UART_Receive+0x13c>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2222      	movs	r2, #34	; 0x22
 8001040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800104a:	f7ff fbf7 	bl	800083c <HAL_GetTick>
 800104e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001064:	d108      	bne.n	8001078 <HAL_UART_Receive+0x8a>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d104      	bne.n	8001078 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	e003      	b.n	8001080 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001088:	e043      	b.n	8001112 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2200      	movs	r2, #0
 8001092:	2120      	movs	r1, #32
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f84c 	bl	8001132 <UART_WaitOnFlagUntilTimeout>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e042      	b.n	800112a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	3302      	adds	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e01f      	b.n	8001104 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010cc:	d007      	beq.n	80010de <HAL_UART_Receive+0xf0>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10a      	bne.n	80010ec <HAL_UART_Receive+0xfe>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e008      	b.n	80010fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3b01      	subs	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001116:	b29b      	uxth	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1b6      	bne.n	800108a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2220      	movs	r2, #32
 8001120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001128:	2302      	movs	r3, #2
  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b090      	sub	sp, #64	; 0x40
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001142:	e050      	b.n	80011e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114a:	d04c      	beq.n	80011e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800114c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <UART_WaitOnFlagUntilTimeout+0x30>
 8001152:	f7ff fb73 	bl	800083c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800115e:	429a      	cmp	r2, r3
 8001160:	d241      	bcs.n	80011e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	330c      	adds	r3, #12
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	e853 3f00 	ldrex	r3, [r3]
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	330c      	adds	r3, #12
 8001180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001182:	637a      	str	r2, [r7, #52]	; 0x34
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800118a:	e841 2300 	strex	r3, r2, [r1]
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1e5      	bne.n	8001162 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3314      	adds	r3, #20
 800119c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	e853 3f00 	ldrex	r3, [r3]
 80011a4:	613b      	str	r3, [r7, #16]
   return(result);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3314      	adds	r3, #20
 80011b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011b6:	623a      	str	r2, [r7, #32]
 80011b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ba:	69f9      	ldr	r1, [r7, #28]
 80011bc:	6a3a      	ldr	r2, [r7, #32]
 80011be:	e841 2300 	strex	r3, r2, [r1]
 80011c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1e5      	bne.n	8001196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2220      	movs	r2, #32
 80011ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e00f      	b.n	8001206 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4013      	ands	r3, r2
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	429a      	cmp	r2, r3
 8001202:	d09f      	beq.n	8001144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001214:	b09f      	sub	sp, #124	; 0x7c
 8001216:	af00      	add	r7, sp, #0
 8001218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800121a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	ea40 0301 	orr.w	r3, r0, r1
 8001230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	431a      	orrs	r2, r3
 800123c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	431a      	orrs	r2, r3
 8001242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4313      	orrs	r3, r2
 8001248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800124a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001254:	f021 010c 	bic.w	r1, r1, #12
 8001258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800125e:	430b      	orrs	r3, r1
 8001260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800126c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800126e:	6999      	ldr	r1, [r3, #24]
 8001270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	ea40 0301 	orr.w	r3, r0, r1
 8001278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800127a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4bc5      	ldr	r3, [pc, #788]	; (8001594 <UART_SetConfig+0x384>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d004      	beq.n	800128e <UART_SetConfig+0x7e>
 8001284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4bc3      	ldr	r3, [pc, #780]	; (8001598 <UART_SetConfig+0x388>)
 800128a:	429a      	cmp	r2, r3
 800128c:	d103      	bne.n	8001296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800128e:	f7ff fdbb 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 8001292:	6778      	str	r0, [r7, #116]	; 0x74
 8001294:	e002      	b.n	800129c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001296:	f7ff fda3 	bl	8000de0 <HAL_RCC_GetPCLK1Freq>
 800129a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800129c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a4:	f040 80b6 	bne.w	8001414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012aa:	461c      	mov	r4, r3
 80012ac:	f04f 0500 	mov.w	r5, #0
 80012b0:	4622      	mov	r2, r4
 80012b2:	462b      	mov	r3, r5
 80012b4:	1891      	adds	r1, r2, r2
 80012b6:	6439      	str	r1, [r7, #64]	; 0x40
 80012b8:	415b      	adcs	r3, r3
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
 80012bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012c0:	1912      	adds	r2, r2, r4
 80012c2:	eb45 0303 	adc.w	r3, r5, r3
 80012c6:	f04f 0000 	mov.w	r0, #0
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	00d9      	lsls	r1, r3, #3
 80012d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80012d4:	00d0      	lsls	r0, r2, #3
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	1911      	adds	r1, r2, r4
 80012dc:	6639      	str	r1, [r7, #96]	; 0x60
 80012de:	416b      	adcs	r3, r5
 80012e0:	667b      	str	r3, [r7, #100]	; 0x64
 80012e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	1891      	adds	r1, r2, r2
 80012ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80012f0:	415b      	adcs	r3, r3
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80012fc:	f7fe ff6c 	bl	80001d8 <__aeabi_uldivmod>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4ba5      	ldr	r3, [pc, #660]	; (800159c <UART_SetConfig+0x38c>)
 8001306:	fba3 2302 	umull	r2, r3, r3, r2
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	011e      	lsls	r6, r3, #4
 800130e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001310:	461c      	mov	r4, r3
 8001312:	f04f 0500 	mov.w	r5, #0
 8001316:	4622      	mov	r2, r4
 8001318:	462b      	mov	r3, r5
 800131a:	1891      	adds	r1, r2, r2
 800131c:	6339      	str	r1, [r7, #48]	; 0x30
 800131e:	415b      	adcs	r3, r3
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
 8001322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001326:	1912      	adds	r2, r2, r4
 8001328:	eb45 0303 	adc.w	r3, r5, r3
 800132c:	f04f 0000 	mov.w	r0, #0
 8001330:	f04f 0100 	mov.w	r1, #0
 8001334:	00d9      	lsls	r1, r3, #3
 8001336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800133a:	00d0      	lsls	r0, r2, #3
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	1911      	adds	r1, r2, r4
 8001342:	65b9      	str	r1, [r7, #88]	; 0x58
 8001344:	416b      	adcs	r3, r5
 8001346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	461a      	mov	r2, r3
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	1891      	adds	r1, r2, r2
 8001354:	62b9      	str	r1, [r7, #40]	; 0x28
 8001356:	415b      	adcs	r3, r3
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800135e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001362:	f7fe ff39 	bl	80001d8 <__aeabi_uldivmod>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4b8c      	ldr	r3, [pc, #560]	; (800159c <UART_SetConfig+0x38c>)
 800136c:	fba3 1302 	umull	r1, r3, r3, r2
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	2164      	movs	r1, #100	; 0x64
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	3332      	adds	r3, #50	; 0x32
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <UART_SetConfig+0x38c>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800138c:	441e      	add	r6, r3
 800138e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001390:	4618      	mov	r0, r3
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	1894      	adds	r4, r2, r2
 800139c:	623c      	str	r4, [r7, #32]
 800139e:	415b      	adcs	r3, r3
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a6:	1812      	adds	r2, r2, r0
 80013a8:	eb41 0303 	adc.w	r3, r1, r3
 80013ac:	f04f 0400 	mov.w	r4, #0
 80013b0:	f04f 0500 	mov.w	r5, #0
 80013b4:	00dd      	lsls	r5, r3, #3
 80013b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80013ba:	00d4      	lsls	r4, r2, #3
 80013bc:	4622      	mov	r2, r4
 80013be:	462b      	mov	r3, r5
 80013c0:	1814      	adds	r4, r2, r0
 80013c2:	653c      	str	r4, [r7, #80]	; 0x50
 80013c4:	414b      	adcs	r3, r1
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
 80013c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	1891      	adds	r1, r2, r2
 80013d4:	61b9      	str	r1, [r7, #24]
 80013d6:	415b      	adcs	r3, r3
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013e2:	f7fe fef9 	bl	80001d8 <__aeabi_uldivmod>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <UART_SetConfig+0x38c>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	2164      	movs	r1, #100	; 0x64
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	3332      	adds	r3, #50	; 0x32
 80013fe:	4a67      	ldr	r2, [pc, #412]	; (800159c <UART_SetConfig+0x38c>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	f003 0207 	and.w	r2, r3, #7
 800140a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4432      	add	r2, r6
 8001410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001412:	e0b9      	b.n	8001588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001416:	461c      	mov	r4, r3
 8001418:	f04f 0500 	mov.w	r5, #0
 800141c:	4622      	mov	r2, r4
 800141e:	462b      	mov	r3, r5
 8001420:	1891      	adds	r1, r2, r2
 8001422:	6139      	str	r1, [r7, #16]
 8001424:	415b      	adcs	r3, r3
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800142c:	1912      	adds	r2, r2, r4
 800142e:	eb45 0303 	adc.w	r3, r5, r3
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	00d9      	lsls	r1, r3, #3
 800143c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001440:	00d0      	lsls	r0, r2, #3
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	eb12 0804 	adds.w	r8, r2, r4
 800144a:	eb43 0905 	adc.w	r9, r3, r5
 800144e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f04f 0100 	mov.w	r1, #0
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	008b      	lsls	r3, r1, #2
 8001462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001466:	0082      	lsls	r2, r0, #2
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7fe feb4 	bl	80001d8 <__aeabi_uldivmod>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <UART_SetConfig+0x38c>)
 8001476:	fba3 2302 	umull	r2, r3, r3, r2
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	011e      	lsls	r6, r3, #4
 800147e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001480:	4618      	mov	r0, r3
 8001482:	f04f 0100 	mov.w	r1, #0
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	1894      	adds	r4, r2, r2
 800148c:	60bc      	str	r4, [r7, #8]
 800148e:	415b      	adcs	r3, r3
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001496:	1812      	adds	r2, r2, r0
 8001498:	eb41 0303 	adc.w	r3, r1, r3
 800149c:	f04f 0400 	mov.w	r4, #0
 80014a0:	f04f 0500 	mov.w	r5, #0
 80014a4:	00dd      	lsls	r5, r3, #3
 80014a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80014aa:	00d4      	lsls	r4, r2, #3
 80014ac:	4622      	mov	r2, r4
 80014ae:	462b      	mov	r3, r5
 80014b0:	1814      	adds	r4, r2, r0
 80014b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80014b4:	414b      	adcs	r3, r1
 80014b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	008b      	lsls	r3, r1, #2
 80014cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80014d0:	0082      	lsls	r2, r0, #2
 80014d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80014d6:	f7fe fe7f 	bl	80001d8 <__aeabi_uldivmod>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <UART_SetConfig+0x38c>)
 80014e0:	fba3 1302 	umull	r1, r3, r3, r2
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	3332      	adds	r3, #50	; 0x32
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <UART_SetConfig+0x38c>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	095b      	lsrs	r3, r3, #5
 80014fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014fe:	441e      	add	r6, r3
 8001500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001502:	4618      	mov	r0, r3
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	1894      	adds	r4, r2, r2
 800150e:	603c      	str	r4, [r7, #0]
 8001510:	415b      	adcs	r3, r3
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001518:	1812      	adds	r2, r2, r0
 800151a:	eb41 0303 	adc.w	r3, r1, r3
 800151e:	f04f 0400 	mov.w	r4, #0
 8001522:	f04f 0500 	mov.w	r5, #0
 8001526:	00dd      	lsls	r5, r3, #3
 8001528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800152c:	00d4      	lsls	r4, r2, #3
 800152e:	4622      	mov	r2, r4
 8001530:	462b      	mov	r3, r5
 8001532:	eb12 0a00 	adds.w	sl, r2, r0
 8001536:	eb43 0b01 	adc.w	fp, r3, r1
 800153a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	008b      	lsls	r3, r1, #2
 800154e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001552:	0082      	lsls	r2, r0, #2
 8001554:	4650      	mov	r0, sl
 8001556:	4659      	mov	r1, fp
 8001558:	f7fe fe3e 	bl	80001d8 <__aeabi_uldivmod>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <UART_SetConfig+0x38c>)
 8001562:	fba3 1302 	umull	r1, r3, r3, r2
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2164      	movs	r1, #100	; 0x64
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	3332      	adds	r3, #50	; 0x32
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <UART_SetConfig+0x38c>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	f003 020f 	and.w	r2, r3, #15
 8001580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4432      	add	r2, r6
 8001586:	609a      	str	r2, [r3, #8]
}
 8001588:	bf00      	nop
 800158a:	377c      	adds	r7, #124	; 0x7c
 800158c:	46bd      	mov	sp, r7
 800158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001592:	bf00      	nop
 8001594:	40011000 	.word	0x40011000
 8001598:	40011400 	.word	0x40011400
 800159c:	51eb851f 	.word	0x51eb851f

080015a0 <__libc_init_array>:
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	4d0d      	ldr	r5, [pc, #52]	; (80015d8 <__libc_init_array+0x38>)
 80015a4:	4c0d      	ldr	r4, [pc, #52]	; (80015dc <__libc_init_array+0x3c>)
 80015a6:	1b64      	subs	r4, r4, r5
 80015a8:	10a4      	asrs	r4, r4, #2
 80015aa:	2600      	movs	r6, #0
 80015ac:	42a6      	cmp	r6, r4
 80015ae:	d109      	bne.n	80015c4 <__libc_init_array+0x24>
 80015b0:	4d0b      	ldr	r5, [pc, #44]	; (80015e0 <__libc_init_array+0x40>)
 80015b2:	4c0c      	ldr	r4, [pc, #48]	; (80015e4 <__libc_init_array+0x44>)
 80015b4:	f000 f818 	bl	80015e8 <_init>
 80015b8:	1b64      	subs	r4, r4, r5
 80015ba:	10a4      	asrs	r4, r4, #2
 80015bc:	2600      	movs	r6, #0
 80015be:	42a6      	cmp	r6, r4
 80015c0:	d105      	bne.n	80015ce <__libc_init_array+0x2e>
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
 80015c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c8:	4798      	blx	r3
 80015ca:	3601      	adds	r6, #1
 80015cc:	e7ee      	b.n	80015ac <__libc_init_array+0xc>
 80015ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d2:	4798      	blx	r3
 80015d4:	3601      	adds	r6, #1
 80015d6:	e7f2      	b.n	80015be <__libc_init_array+0x1e>
 80015d8:	08001630 	.word	0x08001630
 80015dc:	08001630 	.word	0x08001630
 80015e0:	08001630 	.word	0x08001630
 80015e4:	08001634 	.word	0x08001634

080015e8 <_init>:
 80015e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ea:	bf00      	nop
 80015ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ee:	bc08      	pop	{r3}
 80015f0:	469e      	mov	lr, r3
 80015f2:	4770      	bx	lr

080015f4 <_fini>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	bf00      	nop
 80015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fa:	bc08      	pop	{r3}
 80015fc:	469e      	mov	lr, r3
 80015fe:	4770      	bx	lr
