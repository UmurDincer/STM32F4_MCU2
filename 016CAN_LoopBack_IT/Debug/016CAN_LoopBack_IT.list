
016CAN_LoopBack_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003834  08003834  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800383c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a543  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001638  00000000  00000000  0002a5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  0002c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dee  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e96  00000000  00000000  0004d856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9456  00000000  00000000  000566ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011fb42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c0  00000000  00000000  0011fb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003730 	.word	0x08003730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003730 	.word	0x08003730

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SysTick_Handler>:
#include"main.h"

extern CAN_HandleTypeDef hcan1;

void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800057c:	f000 fbbc 	bl	8000cf8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000580:	f001 fb42 	bl	8001c08 <HAL_SYSTICK_IRQHandler>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <CAN1_TX_IRQHandler+0x10>)
 800058e:	f001 f806 	bl	800159e <HAL_CAN_IRQHandler>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000dc 	.word	0x200000dc

0800059c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <CAN1_RX0_IRQHandler+0x10>)
 80005a2:	f000 fffc 	bl	800159e <HAL_CAN_IRQHandler>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <CAN1_RX1_IRQHandler+0x10>)
 80005b6:	f000 fff2 	bl	800159e <HAL_CAN_IRQHandler>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000dc 	.word	0x200000dc

080005c4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <CAN1_SCE_IRQHandler+0x10>)
 80005ca:	f000 ffe8 	bl	800159e <HAL_CAN_IRQHandler>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000dc 	.word	0x200000dc

080005d8 <main>:
UART_HandleTypeDef huart2;
CAN_HandleTypeDef hcan1;


int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_Init();
 80005dc:	f000 fb3a 	bl	8000c54 <HAL_Init>
	SystemClock_ConfigHSE(SYS_CLOCK_FREQ_50_MHZ);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 f81f 	bl	8000624 <SystemClock_ConfigHSE>
	GPIO_Init();
 80005e6:	f000 f8ad 	bl	8000744 <GPIO_Init>
	UART2_Init();
 80005ea:	f000 f8d3 	bl	8000794 <UART2_Init>
	CAN_Init();
 80005ee:	f000 f8f7 	bl	80007e0 <CAN_Init>

	CAN_Filter_Config();
 80005f2:	f000 f92b 	bl	800084c <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 80005f6:	f240 4103 	movw	r1, #1027	; 0x403
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x48>)
 80005fc:	f000 ffa9 	bl	8001552 <HAL_CAN_ActivateNotification>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <main+0x32>
	{
		Error_handler();
 8000606:	f000 fa23 	bl	8000a50 <Error_handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x48>)
 800060c:	f000 fd70 	bl	80010f0 <HAL_CAN_Start>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0x42>
	{
		Error_handler();
 8000616:	f000 fa1b 	bl	8000a50 <Error_handler>
	}

	CAN1_Tx();
 800061a:	f000 f93d 	bl	8000898 <CAN1_Tx>


	while(1);
 800061e:	e7fe      	b.n	800061e <main+0x46>
 8000620:	200000dc 	.word	0x200000dc

08000624 <SystemClock_ConfigHSE>:
}

void SystemClock_ConfigHSE(uint8_t clock_freq)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38


	switch(clock_freq)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b78      	cmp	r3, #120	; 0x78
 800064c:	d036      	beq.n	80006bc <SystemClock_ConfigHSE+0x98>
 800064e:	2b78      	cmp	r3, #120	; 0x78
 8000650:	dc71      	bgt.n	8000736 <SystemClock_ConfigHSE+0x112>
 8000652:	2b32      	cmp	r3, #50	; 0x32
 8000654:	d002      	beq.n	800065c <SystemClock_ConfigHSE+0x38>
 8000656:	2b54      	cmp	r3, #84	; 0x54
 8000658:	d018      	beq.n	800068c <SystemClock_ConfigHSE+0x68>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		FLatency = FLASH_ACR_LATENCY_3WS;
		break;

	}
	default: return;
 800065a:	e06c      	b.n	8000736 <SystemClock_ConfigHSE+0x112>
		osc_init.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800066c:	230f      	movs	r3, #15
 800066e:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000684:	2301      	movs	r3, #1
 8000686:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 800068a:	e02f      	b.n	80006ec <SystemClock_ConfigHSE+0xc8>
		osc_init.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_2WS;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80006ba:	e017      	b.n	80006ec <SystemClock_ConfigHSE+0xc8>
		osc_init.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 80006c0:	23f0      	movs	r3, #240	; 0xf0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2; //default value
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]
		FLatency = FLASH_ACR_LATENCY_3WS;
 80006e4:	2303      	movs	r3, #3
 80006e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80006ea:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fc33 	bl	8001f5c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_ConfigHSE+0xdc>
	{
		Error_handler();
 80006fc:	f000 f9a8 	bl	8000a50 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init,FLatency ))
 8000700:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fe9e 	bl	800244c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_ConfigHSE+0xf6>
	{
		Error_handler();
 8000716:	f000 f99b 	bl	8000a50 <Error_handler>
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800071a:	f002 f85f 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 800071e:	4603      	mov	r3, r0
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <SystemClock_ConfigHSE+0x11c>)
 8000722:	fba2 2303 	umull	r2, r3, r2, r3
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fa44 	bl	8001bb6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800072e:	2004      	movs	r0, #4
 8000730:	f001 fa4e 	bl	8001bd0 <HAL_SYSTICK_CLKSourceConfig>
 8000734:	e000      	b.n	8000738 <SystemClock_ConfigHSE+0x114>
	default: return;
 8000736:	bf00      	nop
}
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	10624dd3 	.word	0x10624dd3

08000744 <GPIO_Init>:

void GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;

	led.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
	led.Pin = GPIO_PIN_12;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	607b      	str	r3, [r7, #4]
	led.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
	led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <GPIO_Init+0x48>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <GPIO_Init+0x48>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <GPIO_Init+0x48>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOD, &led);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <GPIO_Init+0x4c>)
 800077e:	f001 fa51 	bl	8001c24 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020c00 	.word	0x40020c00

08000794 <UART2_Init>:

void UART2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <UART2_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <UART2_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <UART2_Init+0x44>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <UART2_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <UART2_Init+0x44>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <UART2_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <UART2_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <UART2_Init+0x44>)
 80007c0:	220c      	movs	r2, #12
 80007c2:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <UART2_Init+0x44>)
 80007c6:	f002 f83d 	bl	8002844 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <UART2_Init+0x40>
	{
		//if there is a problem
		Error_handler();
 80007d0:	f000 f93e 	bl	8000a50 <Error_handler>
	}


}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000098 	.word	0x20000098
 80007dc:	40004400 	.word	0x40004400

080007e0 <CAN_Init>:

void CAN_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <CAN_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <CAN_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <CAN_Init+0x64>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f0:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <CAN_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <CAN_Init+0x64>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <CAN_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <CAN_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <CAN_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <CAN_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	775a      	strb	r2, [r3, #29]

	//Setting related CAN bit timing
	hcan1.Init.Prescaler = 5;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <CAN_Init+0x64>)
 8000818:	2205      	movs	r2, #5
 800081a:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <CAN_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <CAN_Init+0x64>)
 8000824:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000828:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <CAN_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]

	if( HAL_CAN_Init(&hcan1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <CAN_Init+0x64>)
 8000832:	f000 fa81 	bl	8000d38 <HAL_CAN_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <CAN_Init+0x60>
	{
		Error_handler();
 800083c:	f000 f908 	bl	8000a50 <Error_handler>
	}

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000dc 	.word	0x200000dc
 8000848:	40006400 	.word	0x40006400

0800084c <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter;

	can1_filter.FilterActivation = ENABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
	can1_filter.FilterBank = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
	can1_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
	can1_filter.FilterIdHigh = 0x0000;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
	can1_filter.FilterIdLow = 0x0000;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
	can1_filter.FilterMaskIdHigh = 0x0000;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
	can1_filter.FilterMaskIdLow = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	can1_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
	can1_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <CAN_Filter_Config+0x48>)
 800087c:	f000 fb58 	bl	8000f30 <HAL_CAN_ConfigFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <CAN_Filter_Config+0x3e>
	{
		Error_handler();
 8000886:	f000 f8e3 	bl	8000a50 <Error_handler>
	}
}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000dc 	.word	0x200000dc

08000898 <CAN1_Tx>:


void CAN1_Tx(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef can1_tx;
	uint32_t TxMailBox;
	uint8_t message[5] = { 'H','E','L','L','O'};
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <CAN1_Tx+0x48>)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	3304      	adds	r3, #4
 80008aa:	7019      	strb	r1, [r3, #0]

	can1_tx.DLC = 5;
 80008ac:	2305      	movs	r3, #5
 80008ae:	623b      	str	r3, [r7, #32]
	can1_tx.StdId = 0x65D;
 80008b0:	f240 635d 	movw	r3, #1629	; 0x65d
 80008b4:	613b      	str	r3, [r7, #16]
	can1_tx.IDE = CAN_ID_STD;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
	can1_tx.RTR = CAN_RTR_DATA;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &can1_tx, message, &TxMailBox) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	1d3a      	adds	r2, r7, #4
 80008c4:	f107 0110 	add.w	r1, r7, #16
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <CAN1_Tx+0x4c>)
 80008ca:	f000 fc55 	bl	8001178 <HAL_CAN_AddTxMessage>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <CAN1_Tx+0x40>
	{
		Error_handler();
 80008d4:	f000 f8bc 	bl	8000a50 <Error_handler>
	}

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08003748 	.word	0x08003748
 80008e4:	200000dc 	.word	0x200000dc

080008e8 <HAL_CAN_TxMailbox0CompleteCallback>:
}		We dont need Rx in this app. it is read by HAL_CAN_RxFifo0MsgPendingCallback
*/


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	; 0x40
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox0\r\n");
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	490a      	ldr	r1, [pc, #40]	; (8000920 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fade 	bl	8002eb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc65 	bl	80001d0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29a      	uxth	r2, r3
 800090a:	f107 010c 	add.w	r1, r7, #12
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000914:	f001 ffe3 	bl	80028de <HAL_UART_Transmit>

}
 8000918:	bf00      	nop
 800091a:	3740      	adds	r7, #64	; 0x40
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08003750 	.word	0x08003750
 8000924:	20000098 	.word	0x20000098

08000928 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b090      	sub	sp, #64	; 0x40
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox1\r\n");
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	490a      	ldr	r1, [pc, #40]	; (8000960 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fabe 	bl	8002eb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc45 	bl	80001d0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	f107 010c 	add.w	r1, r7, #12
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000954:	f001 ffc3 	bl	80028de <HAL_UART_Transmit>

}
 8000958:	bf00      	nop
 800095a:	3740      	adds	r7, #64	; 0x40
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	08003770 	.word	0x08003770
 8000964:	20000098 	.word	0x20000098

08000968 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b090      	sub	sp, #64	; 0x40
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "Message Transmitted:Mailbox2\r\n");
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	490a      	ldr	r1, [pc, #40]	; (80009a0 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fa9e 	bl	8002eb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fc25 	bl	80001d0 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	f107 010c 	add.w	r1, r7, #12
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000994:	f001 ffa3 	bl	80028de <HAL_UART_Transmit>

}
 8000998:	bf00      	nop
 800099a:	3740      	adds	r7, #64	; 0x40
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08003790 	.word	0x08003790
 80009a4:	20000098 	.word	0x20000098

080009a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b098      	sub	sp, #96	; 0x60
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef can1_rx;
	uint8_t received[5];

	char notification[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can1_rx, received) != HAL_OK)
 80009b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009b4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009b8:	2100      	movs	r1, #0
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009bc:	f000 fcb7 	bl	800132e <HAL_CAN_GetRxMessage>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_handler();
 80009c6:	f000 f843 	bl	8000a50 <Error_handler>
	}

	sprintf(notification, "Message Received: %s\r\n", received);
 80009ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	490c      	ldr	r1, [pc, #48]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fa6f 	bl	8002eb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fbf6 	bl	80001d0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f107 0108 	add.w	r1, r7, #8
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009f2:	f001 ff74 	bl	80028de <HAL_UART_Transmit>

}
 80009f6:	bf00      	nop
 80009f8:	3760      	adds	r7, #96	; 0x60
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc
 8000a04:	080037b0 	.word	0x080037b0
 8000a08:	20000098 	.word	0x20000098

08000a0c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b090      	sub	sp, #64	; 0x40
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	char notification[50];

	sprintf(notification, "CAN Error Detected!\r\n");
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	490b      	ldr	r1, [pc, #44]	; (8000a48 <HAL_CAN_ErrorCallback+0x3c>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fa4c 	bl	8002eb8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)notification, strlen(notification), HAL_MAX_DELAY);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbd3 	bl	80001d0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 010c 	add.w	r1, r7, #12
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_CAN_ErrorCallback+0x40>)
 8000a38:	f001 ff51 	bl	80028de <HAL_UART_Transmit>

	Error_handler();
 8000a3c:	f000 f808 	bl	8000a50 <Error_handler>
}
 8000a40:	bf00      	nop
 8000a42:	3740      	adds	r7, #64	; 0x40
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	080037c8 	.word	0x080037c8
 8000a4c:	20000098 	.word	0x20000098

08000a50 <Error_handler>:

void Error_handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	while(1);
 8000a54:	e7fe      	b.n	8000a54 <Error_handler+0x4>
	...

08000a58 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f001 f875 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_MspInit+0x40>)
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_MspInit+0x40>)
 8000a68:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a6c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	f06f 000b 	mvn.w	r0, #11
 8000a76:	f001 f874 	bl	8001b62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	f06f 000a 	mvn.w	r0, #10
 8000a82:	f001 f86e 	bl	8001b62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f06f 0009 	mvn.w	r0, #9
 8000a8e:	f001 f868 	bl	8001b62 <HAL_NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x88>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000adc:	2304      	movs	r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000aec:	2307      	movs	r3, #7
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <HAL_UART_MspInit+0x8c>)
 8000af8:	f001 f894 	bl	8001c24 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000afc:	2308      	movs	r3, #8
 8000afe:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <HAL_UART_MspInit+0x8c>)
 8000b08:	f001 f88c 	bl	8001c24 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b0c:	2026      	movs	r0, #38	; 0x26
 8000b0e:	f001 f844 	bl	8001b9a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210f      	movs	r1, #15
 8000b16:	2026      	movs	r0, #38	; 0x26
 8000b18:	f001 f823 	bl	8001b62 <HAL_NVIC_SetPriority>

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_CAN_MspInit+0xa8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

	// PD0 --> RX
	// PD1 --> TX

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <HAL_CAN_MspInit+0xac>)
 8000b88:	f001 f84c 	bl	8001c24 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	210f      	movs	r1, #15
 8000b90:	2013      	movs	r0, #19
 8000b92:	f000 ffe6 	bl	8001b62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	2014      	movs	r0, #20
 8000b9c:	f000 ffe1 	bl	8001b62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	2015      	movs	r0, #21
 8000ba6:	f000 ffdc 	bl	8001b62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	210f      	movs	r1, #15
 8000bae:	2016      	movs	r0, #22
 8000bb0:	f000 ffd7 	bl	8001b62 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bb4:	2013      	movs	r0, #19
 8000bb6:	f000 fff0 	bl	8001b9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f000 ffed 	bl	8001b9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bc0:	2015      	movs	r0, #21
 8000bc2:	f000 ffea 	bl	8001b9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bc6:	2016      	movs	r0, #22
 8000bc8:	f000 ffe7 	bl	8001b9a <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020c00 	.word	0x40020c00

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 f91f 	bl	8002e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fcd1 	bl	80005d8 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c44:	0800383c 	.word	0x0800383c
  ldr r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c4c:	20000118 	.word	0x20000118

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 ff65 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fee6 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 ff7d 	bl	8001bb6 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 ff45 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000104 	.word	0x20000104

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000104 	.word	0x20000104

08000d38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0ed      	b.n	8000f26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fee8 	bl	8000b2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0201 	orr.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff ffd8 	bl	8000d20 <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d72:	e012      	b.n	8000d9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d74:	f7ff ffd4 	bl	8000d20 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d90b      	bls.n	8000d9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0c5      	b.n	8000f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0202 	bic.w	r2, r2, #2
 8000db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db8:	f7ff ffb2 	bl	8000d20 <HAL_GetTick>
 8000dbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dbe:	e012      	b.n	8000de6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc0:	f7ff ffae 	bl	8000d20 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b0a      	cmp	r3, #10
 8000dcc:	d90b      	bls.n	8000de6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2205      	movs	r2, #5
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e09f      	b.n	8000f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1e5      	bne.n	8000dc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e1b      	ldrb	r3, [r3, #24]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7e5b      	ldrb	r3, [r3, #25]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7e9b      	ldrb	r3, [r3, #26]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0220 	orr.w	r2, r2, #32
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0220 	bic.w	r2, r2, #32
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7edb      	ldrb	r3, [r3, #27]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0210 	bic.w	r2, r2, #16
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0210 	orr.w	r2, r2, #16
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7f1b      	ldrb	r3, [r3, #28]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0208 	orr.w	r2, r2, #8
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0208 	bic.w	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7f5b      	ldrb	r3, [r3, #29]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0204 	bic.w	r2, r2, #4
 8000eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	ea42 0103 	orr.w	r1, r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f48:	7cfb      	ldrb	r3, [r7, #19]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d003      	beq.n	8000f56 <HAL_CAN_ConfigFilter+0x26>
 8000f4e:	7cfb      	ldrb	r3, [r7, #19]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	f040 80be 	bne.w	80010d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <HAL_CAN_ConfigFilter+0x1bc>)
 8000f58:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	431a      	orrs	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d123      	bne.n	8001000 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3248      	adds	r2, #72	; 0x48
 8000fe0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff6:	6979      	ldr	r1, [r7, #20]
 8000ff8:	3348      	adds	r3, #72	; 0x48
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d122      	bne.n	800104e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001028:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3248      	adds	r2, #72	; 0x48
 800102e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001042:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	3348      	adds	r3, #72	; 0x48
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001068:	e007      	b.n	800107a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d109      	bne.n	8001096 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	401a      	ands	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001094:	e007      	b.n	80010a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	431a      	orrs	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010c4:	f023 0201 	bic.w	r2, r3, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e006      	b.n	80010e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40006400 	.word	0x40006400

080010f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d12e      	bne.n	8001162 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800111c:	f7ff fe00 	bl	8000d20 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001122:	e012      	b.n	800114a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001124:	f7ff fdfc 	bl	8000d20 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d90b      	bls.n	800114a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2205      	movs	r2, #5
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e012      	b.n	8001170 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e5      	bne.n	8001124 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e006      	b.n	8001170 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
  }
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d003      	beq.n	80011a4 <HAL_CAN_AddTxMessage+0x2c>
 800119c:	7ffb      	ldrb	r3, [r7, #31]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	f040 80b8 	bne.w	8001314 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80a0 	beq.w	8001304 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	0e1b      	lsrs	r3, r3, #24
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d907      	bls.n	80011e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e09e      	b.n	8001322 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011e4:	2201      	movs	r2, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	409a      	lsls	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	6809      	ldr	r1, [r1, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3318      	adds	r3, #24
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	440b      	add	r3, r1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00f      	b.n	8001232 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800121c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001222:	68f9      	ldr	r1, [r7, #12]
 8001224:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001226:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3318      	adds	r3, #24
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	440b      	add	r3, r1
 8001230:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3318      	adds	r3, #24
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	7d1b      	ldrb	r3, [r3, #20]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d111      	bne.n	8001272 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3318      	adds	r3, #24
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	3304      	adds	r3, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	6811      	ldr	r1, [r2, #0]
 8001262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3318      	adds	r3, #24
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	3304      	adds	r3, #4
 8001270:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3307      	adds	r3, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	061a      	lsls	r2, r3, #24
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3306      	adds	r3, #6
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3305      	adds	r3, #5
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4313      	orrs	r3, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	3204      	adds	r2, #4
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4610      	mov	r0, r2
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	ea43 0200 	orr.w	r2, r3, r0
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3303      	adds	r3, #3
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	061a      	lsls	r2, r3, #24
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3302      	adds	r3, #2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4313      	orrs	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	4610      	mov	r0, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	6811      	ldr	r1, [r2, #0]
 80012d0:	ea43 0200 	orr.w	r2, r3, r0
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	440b      	add	r3, r1
 80012da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3318      	adds	r3, #24
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	6811      	ldr	r1, [r2, #0]
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3318      	adds	r3, #24
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	440b      	add	r3, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	e00e      	b.n	8001322 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e006      	b.n	8001322 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
  }
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800132e:	b480      	push	{r7}
 8001330:	b087      	sub	sp, #28
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <HAL_CAN_GetRxMessage+0x24>
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 80f3 	bne.w	8001538 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10e      	bne.n	8001376 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0e7      	b.n	8001546 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d107      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d8      	b.n	8001546 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0204 	and.w	r2, r3, #4
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0d5b      	lsrs	r3, r3, #21
 80013c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	331b      	adds	r3, #27
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0202 	and.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	331b      	adds	r3, #27
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 020f 	and.w	r2, r3, #15
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	b2da      	uxtb	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	331b      	adds	r3, #27
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0a1a      	lsrs	r2, r3, #8
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0c1a      	lsrs	r2, r3, #16
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3302      	adds	r3, #2
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0e1a      	lsrs	r2, r3, #24
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3303      	adds	r3, #3
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3304      	adds	r3, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0a1a      	lsrs	r2, r3, #8
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3305      	adds	r3, #5
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0c1a      	lsrs	r2, r3, #16
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3306      	adds	r3, #6
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0e1a      	lsrs	r2, r3, #24
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3307      	adds	r3, #7
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	e007      	b.n	8001534 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0220 	orr.w	r2, r2, #32
 8001532:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	e006      	b.n	8001546 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d002      	beq.n	8001570 <HAL_CAN_ActivateNotification+0x1e>
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d109      	bne.n	8001584 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6959      	ldr	r1, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e006      	b.n	8001592 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
  }
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b08a      	sub	sp, #40	; 0x28
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d07c      	beq.n	80016de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d023      	beq.n	8001636 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff f971 	bl	80008e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001606:	e016      	b.n	8001636 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	e00c      	b.n	8001636 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	e002      	b.n	8001636 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f96b 	bl	800190c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d024      	beq.n	800168a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff f967 	bl	8000928 <HAL_CAN_TxMailbox1CompleteCallback>
 800165a:	e016      	b.n	800168a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	e00c      	b.n	800168a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e002      	b.n	800168a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f94b 	bl	8001920 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d024      	beq.n	80016de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff f95d 	bl	8000968 <HAL_CAN_TxMailbox2CompleteCallback>
 80016ae:	e016      	b.n	80016de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e00c      	b.n	80016de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	e002      	b.n	80016de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f92b 	bl	8001934 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2210      	movs	r2, #16
 8001700:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2208      	movs	r2, #8
 800171c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f912 	bl	8001948 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f933 	bl	80009a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00c      	beq.n	8001766 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2210      	movs	r2, #16
 8001764:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00b      	beq.n	8001788 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2208      	movs	r2, #8
 8001780:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8f4 	bl	8001970 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f8db 	bl	800195c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00b      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2210      	movs	r2, #16
 80017c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8de 	bl	8001984 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2208      	movs	r2, #8
 80017e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8d7 	bl	8001998 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d07b      	beq.n	80018ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d072      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001858:	2b00      	cmp	r3, #0
 800185a:	d043      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03e      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800186c:	2b60      	cmp	r3, #96	; 0x60
 800186e:	d02b      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x32a>
 8001870:	2b60      	cmp	r3, #96	; 0x60
 8001872:	d82e      	bhi.n	80018d2 <HAL_CAN_IRQHandler+0x334>
 8001874:	2b50      	cmp	r3, #80	; 0x50
 8001876:	d022      	beq.n	80018be <HAL_CAN_IRQHandler+0x320>
 8001878:	2b50      	cmp	r3, #80	; 0x50
 800187a:	d82a      	bhi.n	80018d2 <HAL_CAN_IRQHandler+0x334>
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	d019      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x316>
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d826      	bhi.n	80018d2 <HAL_CAN_IRQHandler+0x334>
 8001884:	2b30      	cmp	r3, #48	; 0x30
 8001886:	d010      	beq.n	80018aa <HAL_CAN_IRQHandler+0x30c>
 8001888:	2b30      	cmp	r3, #48	; 0x30
 800188a:	d822      	bhi.n	80018d2 <HAL_CAN_IRQHandler+0x334>
 800188c:	2b10      	cmp	r3, #16
 800188e:	d002      	beq.n	8001896 <HAL_CAN_IRQHandler+0x2f8>
 8001890:	2b20      	cmp	r3, #32
 8001892:	d005      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001894:	e01d      	b.n	80018d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800189e:	e019      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a8:	e014      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b2:	e00f      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018bc:	e00a      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018c6:	e005      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018d0:	e000      	b.n	80018d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80018d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2204      	movs	r2, #4
 80018ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff f884 	bl	8000a0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d106      	bne.n	8001bec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001bea:	e005      	b.n	8001bf8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c0c:	f000 f802 	bl	8001c14 <HAL_SYSTICK_Callback>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e16b      	b.n	8001f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 815a 	bne.w	8001f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80b4 	beq.w	8001f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a5f      	ldr	r2, [pc, #380]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_GPIO_Init+0x314>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x318>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x31c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x320>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4d      	ldr	r2, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4b      	ldr	r2, [pc, #300]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00e      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e2e:	2308      	movs	r3, #8
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae90 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40021400 	.word	0x40021400
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40021c00 	.word	0x40021c00
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e264      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d075      	beq.n	8002066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	4ba3      	ldr	r3, [pc, #652]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4ba0      	ldr	r3, [pc, #640]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d112      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b99      	ldr	r3, [pc, #612]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d05b      	beq.n	8002064 <HAL_RCC_OscConfig+0x108>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d157      	bne.n	8002064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e23f      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x74>
 8001fc2:	4b91      	ldr	r3, [pc, #580]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a90      	ldr	r2, [pc, #576]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a8a      	ldr	r2, [pc, #552]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001ff4:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a83      	ldr	r2, [pc, #524]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a80      	ldr	r2, [pc, #512]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fe84 	bl	8000d20 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7fe fe80 	bl	8000d20 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e204      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xc0>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fe70 	bl	8000d20 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe fe6c 	bl	8000d20 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1f0      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0xe8>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1c4      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4952      	ldr	r1, [pc, #328]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b4f      	ldr	r3, [pc, #316]	; (800220c <HAL_RCC_OscConfig+0x2b0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fe25 	bl	8000d20 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020da:	f7fe fe21 	bl	8000d20 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1a5      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4940      	ldr	r1, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b3f      	ldr	r3, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x2b0>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fe04 	bl	8000d20 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7fe fe00 	bl	8000d20 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e184      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d030      	beq.n	80021a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x2b4>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fde4 	bl	8000d20 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe fde0 	bl	8000d20 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e164      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x200>
 800217a:	e015      	b.n	80021a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x2b4>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7fe fdcd 	bl	8000d20 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218a:	f7fe fdc9 	bl	8000d20 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e14d      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80a0 	beq.w	80022f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_RCC_OscConfig+0x2b8>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7fe fd8f 	bl	8000d20 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e011      	b.n	800222a <HAL_RCC_OscConfig+0x2ce>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	42470000 	.word	0x42470000
 8002210:	42470e80 	.word	0x42470e80
 8002214:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fd82 	bl	8000d20 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e106      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x4e4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x2f0>
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a80      	ldr	r2, [pc, #512]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x32a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002254:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x32a>
 800226e:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a74      	ldr	r2, [pc, #464]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe fd47 	bl	8000d20 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fd43 	bl	8000d20 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0c5      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x33a>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fd31 	bl	8000d20 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fd2d 	bl	8000d20 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0af      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a55      	ldr	r2, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 809b 	beq.w	8002436 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d05c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d141      	bne.n	8002398 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCC_OscConfig+0x4ec>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fd01 	bl	8000d20 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe fcfd 	bl	8000d20 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e081      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	061b      	lsls	r3, r3, #24
 8002364:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x4ec>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fcd6 	bl	8000d20 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fcd2 	bl	8000d20 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e056      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x41c>
 8002396:	e04e      	b.n	8002436 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x4ec>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fcbf 	bl	8000d20 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fcbb 	bl	8000d20 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03f      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x44a>
 80023c4:	e037      	b.n	8002436 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e032      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_OscConfig+0x4e8>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d028      	beq.n	8002432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d11a      	bne.n	8002432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002408:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240a:	4293      	cmp	r3, r2
 800240c:	d111      	bne.n	8002432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40007000 	.word	0x40007000
 8002444:	40023800 	.word	0x40023800
 8002448:	42470060 	.word	0x42470060

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cc      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b68      	ldr	r3, [pc, #416]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d90c      	bls.n	8002488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0b8      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b8:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	494d      	ldr	r1, [pc, #308]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d044      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d119      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e07f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e067      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4934      	ldr	r1, [pc, #208]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7fe fbf0 	bl	8000d20 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fbec 	bl	8000d20 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e04f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d20c      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e032      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4916      	ldr	r1, [pc, #88]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490e      	ldr	r1, [pc, #56]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	f000 f821 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	490a      	ldr	r1, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	5ccb      	ldrb	r3, [r1, r3]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb50 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00
 8002608:	40023800 	.word	0x40023800
 800260c:	080037e0 	.word	0x080037e0
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	2300      	movs	r3, #0
 800262a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002630:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d00d      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x40>
 800263c:	2b08      	cmp	r3, #8
 800263e:	f200 80bd 	bhi.w	80027bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x34>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x3a>
 800264a:	e0b7      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800264e:	60bb      	str	r3, [r7, #8]
       break;
 8002650:	e0b7      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002652:	4b61      	ldr	r3, [pc, #388]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002654:	60bb      	str	r3, [r7, #8]
      break;
 8002656:	e0b4      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002658:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002660:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d04d      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266e:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	461a      	mov	r2, r3
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	ea02 0800 	and.w	r8, r2, r0
 8002686:	ea03 0901 	and.w	r9, r3, r1
 800268a:	4640      	mov	r0, r8
 800268c:	4649      	mov	r1, r9
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	014b      	lsls	r3, r1, #5
 8002698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800269c:	0142      	lsls	r2, r0, #5
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	ebb0 0008 	subs.w	r0, r0, r8
 80026a6:	eb61 0109 	sbc.w	r1, r1, r9
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026b8:	0182      	lsls	r2, r0, #6
 80026ba:	1a12      	subs	r2, r2, r0
 80026bc:	eb63 0301 	sbc.w	r3, r3, r1
 80026c0:	f04f 0000 	mov.w	r0, #0
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	00d9      	lsls	r1, r3, #3
 80026ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ce:	00d0      	lsls	r0, r2, #3
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	eb12 0208 	adds.w	r2, r2, r8
 80026d8:	eb43 0309 	adc.w	r3, r3, r9
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	0259      	lsls	r1, r3, #9
 80026e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026ea:	0250      	lsls	r0, r2, #9
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f7fd fdc0 	bl	8000280 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e04a      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	461a      	mov	r2, r3
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	ea02 0400 	and.w	r4, r2, r0
 8002722:	ea03 0501 	and.w	r5, r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	014b      	lsls	r3, r1, #5
 8002734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002738:	0142      	lsls	r2, r0, #5
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	1b00      	subs	r0, r0, r4
 8002740:	eb61 0105 	sbc.w	r1, r1, r5
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	018b      	lsls	r3, r1, #6
 800274e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002752:	0182      	lsls	r2, r0, #6
 8002754:	1a12      	subs	r2, r2, r0
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	00d9      	lsls	r1, r3, #3
 8002764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002768:	00d0      	lsls	r0, r2, #3
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	1912      	adds	r2, r2, r4
 8002770:	eb45 0303 	adc.w	r3, r5, r3
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	0299      	lsls	r1, r3, #10
 800277e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002782:	0290      	lsls	r0, r2, #10
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	f7fd fd74 	bl	8000280 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	3301      	adds	r3, #1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	60bb      	str	r3, [r7, #8]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027be:	60bb      	str	r3, [r7, #8]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	68bb      	ldr	r3, [r7, #8]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f8:	f7ff fff0 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0a9b      	lsrs	r3, r3, #10
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	080037f0 	.word	0x080037f0

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002820:	f7ff ffdc 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0b5b      	lsrs	r3, r3, #13
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	080037f0 	.word	0x080037f0

08002844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e03f      	b.n	80028d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe f916 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f929 	bl	8002ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800289c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08a      	sub	sp, #40	; 0x28
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d17c      	bne.n	80029f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_UART_Transmit+0x2c>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e075      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x3e>
 8002918:	2302      	movs	r3, #2
 800291a:	e06e      	b.n	80029fa <HAL_UART_Transmit+0x11c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002932:	f7fe f9f5 	bl	8000d20 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x82>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002970:	e02a      	b.n	80029c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f840 	bl	8002a02 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e036      	b.n	80029fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e007      	b.n	80029ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1cf      	bne.n	8002972 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2140      	movs	r1, #64	; 0x40
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f810 	bl	8002a02 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b090      	sub	sp, #64	; 0x40
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a12:	e050      	b.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d04c      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a22:	f7fe f97d 	bl	8000d20 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d241      	bcs.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a52:	637a      	str	r2, [r7, #52]	; 0x34
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e5      	bne.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	613b      	str	r3, [r7, #16]
   return(result);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a86:	623a      	str	r2, [r7, #32]
 8002a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	69f9      	ldr	r1, [r7, #28]
 8002a8c:	6a3a      	ldr	r2, [r7, #32]
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e00f      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d09f      	beq.n	8002a14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3740      	adds	r7, #64	; 0x40
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	b09f      	sub	sp, #124	; 0x7c
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	ea40 0301 	orr.w	r3, r0, r1
 8002b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b24:	f021 010c 	bic.w	r1, r1, #12
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	6999      	ldr	r1, [r3, #24]
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	ea40 0301 	orr.w	r3, r0, r1
 8002b48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4bc5      	ldr	r3, [pc, #788]	; (8002e64 <UART_SetConfig+0x384>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d004      	beq.n	8002b5e <UART_SetConfig+0x7e>
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4bc3      	ldr	r3, [pc, #780]	; (8002e68 <UART_SetConfig+0x388>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d103      	bne.n	8002b66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b5e:	f7ff fe5d 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 8002b62:	6778      	str	r0, [r7, #116]	; 0x74
 8002b64:	e002      	b.n	8002b6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b66:	f7ff fe45 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8002b6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b74:	f040 80b6 	bne.w	8002ce4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	f04f 0500 	mov.w	r5, #0
 8002b80:	4622      	mov	r2, r4
 8002b82:	462b      	mov	r3, r5
 8002b84:	1891      	adds	r1, r2, r2
 8002b86:	6439      	str	r1, [r7, #64]	; 0x40
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b90:	1912      	adds	r2, r2, r4
 8002b92:	eb45 0303 	adc.w	r3, r5, r3
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	00d9      	lsls	r1, r3, #3
 8002ba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba4:	00d0      	lsls	r0, r2, #3
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	1911      	adds	r1, r2, r4
 8002bac:	6639      	str	r1, [r7, #96]	; 0x60
 8002bae:	416b      	adcs	r3, r5
 8002bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002bcc:	f7fd fb58 	bl	8000280 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4ba5      	ldr	r3, [pc, #660]	; (8002e6c <UART_SetConfig+0x38c>)
 8002bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	011e      	lsls	r6, r3, #4
 8002bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be0:	461c      	mov	r4, r3
 8002be2:	f04f 0500 	mov.w	r5, #0
 8002be6:	4622      	mov	r2, r4
 8002be8:	462b      	mov	r3, r5
 8002bea:	1891      	adds	r1, r2, r2
 8002bec:	6339      	str	r1, [r7, #48]	; 0x30
 8002bee:	415b      	adcs	r3, r3
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bf6:	1912      	adds	r2, r2, r4
 8002bf8:	eb45 0303 	adc.w	r3, r5, r3
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	00d9      	lsls	r1, r3, #3
 8002c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c0a:	00d0      	lsls	r0, r2, #3
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	1911      	adds	r1, r2, r4
 8002c12:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c14:	416b      	adcs	r3, r5
 8002c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	1891      	adds	r1, r2, r2
 8002c24:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c26:	415b      	adcs	r3, r3
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c32:	f7fd fb25 	bl	8000280 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4b8c      	ldr	r3, [pc, #560]	; (8002e6c <UART_SetConfig+0x38c>)
 8002c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	2164      	movs	r1, #100	; 0x64
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	3332      	adds	r3, #50	; 0x32
 8002c4e:	4a87      	ldr	r2, [pc, #540]	; (8002e6c <UART_SetConfig+0x38c>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c5c:	441e      	add	r6, r3
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	4618      	mov	r0, r3
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	1894      	adds	r4, r2, r2
 8002c6c:	623c      	str	r4, [r7, #32]
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c76:	1812      	adds	r2, r2, r0
 8002c78:	eb41 0303 	adc.w	r3, r1, r3
 8002c7c:	f04f 0400 	mov.w	r4, #0
 8002c80:	f04f 0500 	mov.w	r5, #0
 8002c84:	00dd      	lsls	r5, r3, #3
 8002c86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c8a:	00d4      	lsls	r4, r2, #3
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	462b      	mov	r3, r5
 8002c90:	1814      	adds	r4, r2, r0
 8002c92:	653c      	str	r4, [r7, #80]	; 0x50
 8002c94:	414b      	adcs	r3, r1
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
 8002c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	61b9      	str	r1, [r7, #24]
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cb2:	f7fd fae5 	bl	8000280 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <UART_SetConfig+0x38c>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <UART_SetConfig+0x38c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 0207 	and.w	r2, r3, #7
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4432      	add	r2, r6
 8002ce0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce2:	e0b9      	b.n	8002e58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	f04f 0500 	mov.w	r5, #0
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	6139      	str	r1, [r7, #16]
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cfc:	1912      	adds	r2, r2, r4
 8002cfe:	eb45 0303 	adc.w	r3, r5, r3
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	00d9      	lsls	r1, r3, #3
 8002d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d10:	00d0      	lsls	r0, r2, #3
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	eb12 0804 	adds.w	r8, r2, r4
 8002d1a:	eb43 0905 	adc.w	r9, r3, r5
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	008b      	lsls	r3, r1, #2
 8002d32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d36:	0082      	lsls	r2, r0, #2
 8002d38:	4640      	mov	r0, r8
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	f7fd faa0 	bl	8000280 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <UART_SetConfig+0x38c>)
 8002d46:	fba3 2302 	umull	r2, r3, r3, r2
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	011e      	lsls	r6, r3, #4
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	4618      	mov	r0, r3
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	1894      	adds	r4, r2, r2
 8002d5c:	60bc      	str	r4, [r7, #8]
 8002d5e:	415b      	adcs	r3, r3
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d66:	1812      	adds	r2, r2, r0
 8002d68:	eb41 0303 	adc.w	r3, r1, r3
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	f04f 0500 	mov.w	r5, #0
 8002d74:	00dd      	lsls	r5, r3, #3
 8002d76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d7a:	00d4      	lsls	r4, r2, #3
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	462b      	mov	r3, r5
 8002d80:	1814      	adds	r4, r2, r0
 8002d82:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d84:	414b      	adcs	r3, r1
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	008b      	lsls	r3, r1, #2
 8002d9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002da0:	0082      	lsls	r2, r0, #2
 8002da2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002da6:	f7fd fa6b 	bl	8000280 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <UART_SetConfig+0x38c>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2164      	movs	r1, #100	; 0x64
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	3332      	adds	r3, #50	; 0x32
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <UART_SetConfig+0x38c>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dce:	441e      	add	r6, r3
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	1894      	adds	r4, r2, r2
 8002dde:	603c      	str	r4, [r7, #0]
 8002de0:	415b      	adcs	r3, r3
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de8:	1812      	adds	r2, r2, r0
 8002dea:	eb41 0303 	adc.w	r3, r1, r3
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	f04f 0500 	mov.w	r5, #0
 8002df6:	00dd      	lsls	r5, r3, #3
 8002df8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dfc:	00d4      	lsls	r4, r2, #3
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	eb12 0a00 	adds.w	sl, r2, r0
 8002e06:	eb43 0b01 	adc.w	fp, r3, r1
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	008b      	lsls	r3, r1, #2
 8002e1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e22:	0082      	lsls	r2, r0, #2
 8002e24:	4650      	mov	r0, sl
 8002e26:	4659      	mov	r1, fp
 8002e28:	f7fd fa2a 	bl	8000280 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <UART_SetConfig+0x38c>)
 8002e32:	fba3 1302 	umull	r1, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2164      	movs	r1, #100	; 0x64
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	3332      	adds	r3, #50	; 0x32
 8002e44:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <UART_SetConfig+0x38c>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4432      	add	r2, r6
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	377c      	adds	r7, #124	; 0x7c
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	51eb851f 	.word	0x51eb851f

08002e70 <__libc_init_array>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4d0d      	ldr	r5, [pc, #52]	; (8002ea8 <__libc_init_array+0x38>)
 8002e74:	4c0d      	ldr	r4, [pc, #52]	; (8002eac <__libc_init_array+0x3c>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	42a6      	cmp	r6, r4
 8002e7e:	d109      	bne.n	8002e94 <__libc_init_array+0x24>
 8002e80:	4d0b      	ldr	r5, [pc, #44]	; (8002eb0 <__libc_init_array+0x40>)
 8002e82:	4c0c      	ldr	r4, [pc, #48]	; (8002eb4 <__libc_init_array+0x44>)
 8002e84:	f000 fc54 	bl	8003730 <_init>
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	42a6      	cmp	r6, r4
 8002e90:	d105      	bne.n	8002e9e <__libc_init_array+0x2e>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e98:	4798      	blx	r3
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7ee      	b.n	8002e7c <__libc_init_array+0xc>
 8002e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea2:	4798      	blx	r3
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	e7f2      	b.n	8002e8e <__libc_init_array+0x1e>
 8002ea8:	08003834 	.word	0x08003834
 8002eac:	08003834 	.word	0x08003834
 8002eb0:	08003834 	.word	0x08003834
 8002eb4:	08003838 	.word	0x08003838

08002eb8 <siprintf>:
 8002eb8:	b40e      	push	{r1, r2, r3}
 8002eba:	b500      	push	{lr}
 8002ebc:	b09c      	sub	sp, #112	; 0x70
 8002ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8002ec0:	9002      	str	r0, [sp, #8]
 8002ec2:	9006      	str	r0, [sp, #24]
 8002ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ec8:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <siprintf+0x38>)
 8002eca:	9107      	str	r1, [sp, #28]
 8002ecc:	9104      	str	r1, [sp, #16]
 8002ece:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <siprintf+0x3c>)
 8002ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ed4:	9105      	str	r1, [sp, #20]
 8002ed6:	6800      	ldr	r0, [r0, #0]
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	a902      	add	r1, sp, #8
 8002edc:	f000 f868 	bl	8002fb0 <_svfiprintf_r>
 8002ee0:	9b02      	ldr	r3, [sp, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	b01c      	add	sp, #112	; 0x70
 8002ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eec:	b003      	add	sp, #12
 8002eee:	4770      	bx	lr
 8002ef0:	2000000c 	.word	0x2000000c
 8002ef4:	ffff0208 	.word	0xffff0208

08002ef8 <__ssputs_r>:
 8002ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002efc:	688e      	ldr	r6, [r1, #8]
 8002efe:	429e      	cmp	r6, r3
 8002f00:	4682      	mov	sl, r0
 8002f02:	460c      	mov	r4, r1
 8002f04:	4690      	mov	r8, r2
 8002f06:	461f      	mov	r7, r3
 8002f08:	d838      	bhi.n	8002f7c <__ssputs_r+0x84>
 8002f0a:	898a      	ldrh	r2, [r1, #12]
 8002f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f10:	d032      	beq.n	8002f78 <__ssputs_r+0x80>
 8002f12:	6825      	ldr	r5, [r4, #0]
 8002f14:	6909      	ldr	r1, [r1, #16]
 8002f16:	eba5 0901 	sub.w	r9, r5, r1
 8002f1a:	6965      	ldr	r5, [r4, #20]
 8002f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f24:	3301      	adds	r3, #1
 8002f26:	444b      	add	r3, r9
 8002f28:	106d      	asrs	r5, r5, #1
 8002f2a:	429d      	cmp	r5, r3
 8002f2c:	bf38      	it	cc
 8002f2e:	461d      	movcc	r5, r3
 8002f30:	0553      	lsls	r3, r2, #21
 8002f32:	d531      	bpl.n	8002f98 <__ssputs_r+0xa0>
 8002f34:	4629      	mov	r1, r5
 8002f36:	f000 fb47 	bl	80035c8 <_malloc_r>
 8002f3a:	4606      	mov	r6, r0
 8002f3c:	b950      	cbnz	r0, 8002f54 <__ssputs_r+0x5c>
 8002f3e:	230c      	movs	r3, #12
 8002f40:	f8ca 3000 	str.w	r3, [sl]
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f54:	6921      	ldr	r1, [r4, #16]
 8002f56:	464a      	mov	r2, r9
 8002f58:	f000 fabe 	bl	80034d8 <memcpy>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	81a3      	strh	r3, [r4, #12]
 8002f68:	6126      	str	r6, [r4, #16]
 8002f6a:	6165      	str	r5, [r4, #20]
 8002f6c:	444e      	add	r6, r9
 8002f6e:	eba5 0509 	sub.w	r5, r5, r9
 8002f72:	6026      	str	r6, [r4, #0]
 8002f74:	60a5      	str	r5, [r4, #8]
 8002f76:	463e      	mov	r6, r7
 8002f78:	42be      	cmp	r6, r7
 8002f7a:	d900      	bls.n	8002f7e <__ssputs_r+0x86>
 8002f7c:	463e      	mov	r6, r7
 8002f7e:	4632      	mov	r2, r6
 8002f80:	6820      	ldr	r0, [r4, #0]
 8002f82:	4641      	mov	r1, r8
 8002f84:	f000 fab6 	bl	80034f4 <memmove>
 8002f88:	68a3      	ldr	r3, [r4, #8]
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	1b9b      	subs	r3, r3, r6
 8002f8e:	4432      	add	r2, r6
 8002f90:	60a3      	str	r3, [r4, #8]
 8002f92:	6022      	str	r2, [r4, #0]
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7db      	b.n	8002f50 <__ssputs_r+0x58>
 8002f98:	462a      	mov	r2, r5
 8002f9a:	f000 fb6f 	bl	800367c <_realloc_r>
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d1e1      	bne.n	8002f68 <__ssputs_r+0x70>
 8002fa4:	6921      	ldr	r1, [r4, #16]
 8002fa6:	4650      	mov	r0, sl
 8002fa8:	f000 fabe 	bl	8003528 <_free_r>
 8002fac:	e7c7      	b.n	8002f3e <__ssputs_r+0x46>
	...

08002fb0 <_svfiprintf_r>:
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	898b      	ldrh	r3, [r1, #12]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	b09d      	sub	sp, #116	; 0x74
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	460d      	mov	r5, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	d50e      	bpl.n	8002fe2 <_svfiprintf_r+0x32>
 8002fc4:	690b      	ldr	r3, [r1, #16]
 8002fc6:	b963      	cbnz	r3, 8002fe2 <_svfiprintf_r+0x32>
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	f000 fafd 	bl	80035c8 <_malloc_r>
 8002fce:	6028      	str	r0, [r5, #0]
 8002fd0:	6128      	str	r0, [r5, #16]
 8002fd2:	b920      	cbnz	r0, 8002fde <_svfiprintf_r+0x2e>
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	e0d1      	b.n	8003182 <_svfiprintf_r+0x1d2>
 8002fde:	2340      	movs	r3, #64	; 0x40
 8002fe0:	616b      	str	r3, [r5, #20]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff0:	2330      	movs	r3, #48	; 0x30
 8002ff2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800319c <_svfiprintf_r+0x1ec>
 8002ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ffa:	f04f 0901 	mov.w	r9, #1
 8002ffe:	4623      	mov	r3, r4
 8003000:	469a      	mov	sl, r3
 8003002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003006:	b10a      	cbz	r2, 800300c <_svfiprintf_r+0x5c>
 8003008:	2a25      	cmp	r2, #37	; 0x25
 800300a:	d1f9      	bne.n	8003000 <_svfiprintf_r+0x50>
 800300c:	ebba 0b04 	subs.w	fp, sl, r4
 8003010:	d00b      	beq.n	800302a <_svfiprintf_r+0x7a>
 8003012:	465b      	mov	r3, fp
 8003014:	4622      	mov	r2, r4
 8003016:	4629      	mov	r1, r5
 8003018:	4638      	mov	r0, r7
 800301a:	f7ff ff6d 	bl	8002ef8 <__ssputs_r>
 800301e:	3001      	adds	r0, #1
 8003020:	f000 80aa 	beq.w	8003178 <_svfiprintf_r+0x1c8>
 8003024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003026:	445a      	add	r2, fp
 8003028:	9209      	str	r2, [sp, #36]	; 0x24
 800302a:	f89a 3000 	ldrb.w	r3, [sl]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80a2 	beq.w	8003178 <_svfiprintf_r+0x1c8>
 8003034:	2300      	movs	r3, #0
 8003036:	f04f 32ff 	mov.w	r2, #4294967295
 800303a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800303e:	f10a 0a01 	add.w	sl, sl, #1
 8003042:	9304      	str	r3, [sp, #16]
 8003044:	9307      	str	r3, [sp, #28]
 8003046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800304a:	931a      	str	r3, [sp, #104]	; 0x68
 800304c:	4654      	mov	r4, sl
 800304e:	2205      	movs	r2, #5
 8003050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003054:	4851      	ldr	r0, [pc, #324]	; (800319c <_svfiprintf_r+0x1ec>)
 8003056:	f7fd f8c3 	bl	80001e0 <memchr>
 800305a:	9a04      	ldr	r2, [sp, #16]
 800305c:	b9d8      	cbnz	r0, 8003096 <_svfiprintf_r+0xe6>
 800305e:	06d0      	lsls	r0, r2, #27
 8003060:	bf44      	itt	mi
 8003062:	2320      	movmi	r3, #32
 8003064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003068:	0711      	lsls	r1, r2, #28
 800306a:	bf44      	itt	mi
 800306c:	232b      	movmi	r3, #43	; 0x2b
 800306e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003072:	f89a 3000 	ldrb.w	r3, [sl]
 8003076:	2b2a      	cmp	r3, #42	; 0x2a
 8003078:	d015      	beq.n	80030a6 <_svfiprintf_r+0xf6>
 800307a:	9a07      	ldr	r2, [sp, #28]
 800307c:	4654      	mov	r4, sl
 800307e:	2000      	movs	r0, #0
 8003080:	f04f 0c0a 	mov.w	ip, #10
 8003084:	4621      	mov	r1, r4
 8003086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800308a:	3b30      	subs	r3, #48	; 0x30
 800308c:	2b09      	cmp	r3, #9
 800308e:	d94e      	bls.n	800312e <_svfiprintf_r+0x17e>
 8003090:	b1b0      	cbz	r0, 80030c0 <_svfiprintf_r+0x110>
 8003092:	9207      	str	r2, [sp, #28]
 8003094:	e014      	b.n	80030c0 <_svfiprintf_r+0x110>
 8003096:	eba0 0308 	sub.w	r3, r0, r8
 800309a:	fa09 f303 	lsl.w	r3, r9, r3
 800309e:	4313      	orrs	r3, r2
 80030a0:	9304      	str	r3, [sp, #16]
 80030a2:	46a2      	mov	sl, r4
 80030a4:	e7d2      	b.n	800304c <_svfiprintf_r+0x9c>
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	1d19      	adds	r1, r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	9103      	str	r1, [sp, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfbb      	ittet	lt
 80030b2:	425b      	neglt	r3, r3
 80030b4:	f042 0202 	orrlt.w	r2, r2, #2
 80030b8:	9307      	strge	r3, [sp, #28]
 80030ba:	9307      	strlt	r3, [sp, #28]
 80030bc:	bfb8      	it	lt
 80030be:	9204      	strlt	r2, [sp, #16]
 80030c0:	7823      	ldrb	r3, [r4, #0]
 80030c2:	2b2e      	cmp	r3, #46	; 0x2e
 80030c4:	d10c      	bne.n	80030e0 <_svfiprintf_r+0x130>
 80030c6:	7863      	ldrb	r3, [r4, #1]
 80030c8:	2b2a      	cmp	r3, #42	; 0x2a
 80030ca:	d135      	bne.n	8003138 <_svfiprintf_r+0x188>
 80030cc:	9b03      	ldr	r3, [sp, #12]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	9203      	str	r2, [sp, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bfb8      	it	lt
 80030d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80030dc:	3402      	adds	r4, #2
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031ac <_svfiprintf_r+0x1fc>
 80030e4:	7821      	ldrb	r1, [r4, #0]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4650      	mov	r0, sl
 80030ea:	f7fd f879 	bl	80001e0 <memchr>
 80030ee:	b140      	cbz	r0, 8003102 <_svfiprintf_r+0x152>
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	eba0 000a 	sub.w	r0, r0, sl
 80030f6:	fa03 f000 	lsl.w	r0, r3, r0
 80030fa:	9b04      	ldr	r3, [sp, #16]
 80030fc:	4303      	orrs	r3, r0
 80030fe:	3401      	adds	r4, #1
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003106:	4826      	ldr	r0, [pc, #152]	; (80031a0 <_svfiprintf_r+0x1f0>)
 8003108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800310c:	2206      	movs	r2, #6
 800310e:	f7fd f867 	bl	80001e0 <memchr>
 8003112:	2800      	cmp	r0, #0
 8003114:	d038      	beq.n	8003188 <_svfiprintf_r+0x1d8>
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <_svfiprintf_r+0x1f4>)
 8003118:	bb1b      	cbnz	r3, 8003162 <_svfiprintf_r+0x1b2>
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	3307      	adds	r3, #7
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	3308      	adds	r3, #8
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003128:	4433      	add	r3, r6
 800312a:	9309      	str	r3, [sp, #36]	; 0x24
 800312c:	e767      	b.n	8002ffe <_svfiprintf_r+0x4e>
 800312e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003132:	460c      	mov	r4, r1
 8003134:	2001      	movs	r0, #1
 8003136:	e7a5      	b.n	8003084 <_svfiprintf_r+0xd4>
 8003138:	2300      	movs	r3, #0
 800313a:	3401      	adds	r4, #1
 800313c:	9305      	str	r3, [sp, #20]
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0c0a 	mov.w	ip, #10
 8003144:	4620      	mov	r0, r4
 8003146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800314a:	3a30      	subs	r2, #48	; 0x30
 800314c:	2a09      	cmp	r2, #9
 800314e:	d903      	bls.n	8003158 <_svfiprintf_r+0x1a8>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0c5      	beq.n	80030e0 <_svfiprintf_r+0x130>
 8003154:	9105      	str	r1, [sp, #20]
 8003156:	e7c3      	b.n	80030e0 <_svfiprintf_r+0x130>
 8003158:	fb0c 2101 	mla	r1, ip, r1, r2
 800315c:	4604      	mov	r4, r0
 800315e:	2301      	movs	r3, #1
 8003160:	e7f0      	b.n	8003144 <_svfiprintf_r+0x194>
 8003162:	ab03      	add	r3, sp, #12
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462a      	mov	r2, r5
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <_svfiprintf_r+0x1f8>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	4638      	mov	r0, r7
 800316e:	f3af 8000 	nop.w
 8003172:	1c42      	adds	r2, r0, #1
 8003174:	4606      	mov	r6, r0
 8003176:	d1d6      	bne.n	8003126 <_svfiprintf_r+0x176>
 8003178:	89ab      	ldrh	r3, [r5, #12]
 800317a:	065b      	lsls	r3, r3, #25
 800317c:	f53f af2c 	bmi.w	8002fd8 <_svfiprintf_r+0x28>
 8003180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003182:	b01d      	add	sp, #116	; 0x74
 8003184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003188:	ab03      	add	r3, sp, #12
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	462a      	mov	r2, r5
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <_svfiprintf_r+0x1f8>)
 8003190:	a904      	add	r1, sp, #16
 8003192:	4638      	mov	r0, r7
 8003194:	f000 f87a 	bl	800328c <_printf_i>
 8003198:	e7eb      	b.n	8003172 <_svfiprintf_r+0x1c2>
 800319a:	bf00      	nop
 800319c:	080037f8 	.word	0x080037f8
 80031a0:	08003802 	.word	0x08003802
 80031a4:	00000000 	.word	0x00000000
 80031a8:	08002ef9 	.word	0x08002ef9
 80031ac:	080037fe 	.word	0x080037fe

080031b0 <_printf_common>:
 80031b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b4:	4616      	mov	r6, r2
 80031b6:	4699      	mov	r9, r3
 80031b8:	688a      	ldr	r2, [r1, #8]
 80031ba:	690b      	ldr	r3, [r1, #16]
 80031bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bfb8      	it	lt
 80031c4:	4613      	movlt	r3, r2
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031cc:	4607      	mov	r7, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	b10a      	cbz	r2, 80031d6 <_printf_common+0x26>
 80031d2:	3301      	adds	r3, #1
 80031d4:	6033      	str	r3, [r6, #0]
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	0699      	lsls	r1, r3, #26
 80031da:	bf42      	ittt	mi
 80031dc:	6833      	ldrmi	r3, [r6, #0]
 80031de:	3302      	addmi	r3, #2
 80031e0:	6033      	strmi	r3, [r6, #0]
 80031e2:	6825      	ldr	r5, [r4, #0]
 80031e4:	f015 0506 	ands.w	r5, r5, #6
 80031e8:	d106      	bne.n	80031f8 <_printf_common+0x48>
 80031ea:	f104 0a19 	add.w	sl, r4, #25
 80031ee:	68e3      	ldr	r3, [r4, #12]
 80031f0:	6832      	ldr	r2, [r6, #0]
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	42ab      	cmp	r3, r5
 80031f6:	dc26      	bgt.n	8003246 <_printf_common+0x96>
 80031f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031fc:	1e13      	subs	r3, r2, #0
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	bf18      	it	ne
 8003202:	2301      	movne	r3, #1
 8003204:	0692      	lsls	r2, r2, #26
 8003206:	d42b      	bmi.n	8003260 <_printf_common+0xb0>
 8003208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800320c:	4649      	mov	r1, r9
 800320e:	4638      	mov	r0, r7
 8003210:	47c0      	blx	r8
 8003212:	3001      	adds	r0, #1
 8003214:	d01e      	beq.n	8003254 <_printf_common+0xa4>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	68e5      	ldr	r5, [r4, #12]
 800321a:	6832      	ldr	r2, [r6, #0]
 800321c:	f003 0306 	and.w	r3, r3, #6
 8003220:	2b04      	cmp	r3, #4
 8003222:	bf08      	it	eq
 8003224:	1aad      	subeq	r5, r5, r2
 8003226:	68a3      	ldr	r3, [r4, #8]
 8003228:	6922      	ldr	r2, [r4, #16]
 800322a:	bf0c      	ite	eq
 800322c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003230:	2500      	movne	r5, #0
 8003232:	4293      	cmp	r3, r2
 8003234:	bfc4      	itt	gt
 8003236:	1a9b      	subgt	r3, r3, r2
 8003238:	18ed      	addgt	r5, r5, r3
 800323a:	2600      	movs	r6, #0
 800323c:	341a      	adds	r4, #26
 800323e:	42b5      	cmp	r5, r6
 8003240:	d11a      	bne.n	8003278 <_printf_common+0xc8>
 8003242:	2000      	movs	r0, #0
 8003244:	e008      	b.n	8003258 <_printf_common+0xa8>
 8003246:	2301      	movs	r3, #1
 8003248:	4652      	mov	r2, sl
 800324a:	4649      	mov	r1, r9
 800324c:	4638      	mov	r0, r7
 800324e:	47c0      	blx	r8
 8003250:	3001      	adds	r0, #1
 8003252:	d103      	bne.n	800325c <_printf_common+0xac>
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	3501      	adds	r5, #1
 800325e:	e7c6      	b.n	80031ee <_printf_common+0x3e>
 8003260:	18e1      	adds	r1, r4, r3
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	2030      	movs	r0, #48	; 0x30
 8003266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800326a:	4422      	add	r2, r4
 800326c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003274:	3302      	adds	r3, #2
 8003276:	e7c7      	b.n	8003208 <_printf_common+0x58>
 8003278:	2301      	movs	r3, #1
 800327a:	4622      	mov	r2, r4
 800327c:	4649      	mov	r1, r9
 800327e:	4638      	mov	r0, r7
 8003280:	47c0      	blx	r8
 8003282:	3001      	adds	r0, #1
 8003284:	d0e6      	beq.n	8003254 <_printf_common+0xa4>
 8003286:	3601      	adds	r6, #1
 8003288:	e7d9      	b.n	800323e <_printf_common+0x8e>
	...

0800328c <_printf_i>:
 800328c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003290:	460c      	mov	r4, r1
 8003292:	4691      	mov	r9, r2
 8003294:	7e27      	ldrb	r7, [r4, #24]
 8003296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003298:	2f78      	cmp	r7, #120	; 0x78
 800329a:	4680      	mov	r8, r0
 800329c:	469a      	mov	sl, r3
 800329e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032a2:	d807      	bhi.n	80032b4 <_printf_i+0x28>
 80032a4:	2f62      	cmp	r7, #98	; 0x62
 80032a6:	d80a      	bhi.n	80032be <_printf_i+0x32>
 80032a8:	2f00      	cmp	r7, #0
 80032aa:	f000 80d8 	beq.w	800345e <_printf_i+0x1d2>
 80032ae:	2f58      	cmp	r7, #88	; 0x58
 80032b0:	f000 80a3 	beq.w	80033fa <_printf_i+0x16e>
 80032b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032bc:	e03a      	b.n	8003334 <_printf_i+0xa8>
 80032be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032c2:	2b15      	cmp	r3, #21
 80032c4:	d8f6      	bhi.n	80032b4 <_printf_i+0x28>
 80032c6:	a001      	add	r0, pc, #4	; (adr r0, 80032cc <_printf_i+0x40>)
 80032c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80032cc:	08003325 	.word	0x08003325
 80032d0:	08003339 	.word	0x08003339
 80032d4:	080032b5 	.word	0x080032b5
 80032d8:	080032b5 	.word	0x080032b5
 80032dc:	080032b5 	.word	0x080032b5
 80032e0:	080032b5 	.word	0x080032b5
 80032e4:	08003339 	.word	0x08003339
 80032e8:	080032b5 	.word	0x080032b5
 80032ec:	080032b5 	.word	0x080032b5
 80032f0:	080032b5 	.word	0x080032b5
 80032f4:	080032b5 	.word	0x080032b5
 80032f8:	08003445 	.word	0x08003445
 80032fc:	08003369 	.word	0x08003369
 8003300:	08003427 	.word	0x08003427
 8003304:	080032b5 	.word	0x080032b5
 8003308:	080032b5 	.word	0x080032b5
 800330c:	08003467 	.word	0x08003467
 8003310:	080032b5 	.word	0x080032b5
 8003314:	08003369 	.word	0x08003369
 8003318:	080032b5 	.word	0x080032b5
 800331c:	080032b5 	.word	0x080032b5
 8003320:	0800342f 	.word	0x0800342f
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	600a      	str	r2, [r1, #0]
 800332c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003334:	2301      	movs	r3, #1
 8003336:	e0a3      	b.n	8003480 <_printf_i+0x1f4>
 8003338:	6825      	ldr	r5, [r4, #0]
 800333a:	6808      	ldr	r0, [r1, #0]
 800333c:	062e      	lsls	r6, r5, #24
 800333e:	f100 0304 	add.w	r3, r0, #4
 8003342:	d50a      	bpl.n	800335a <_printf_i+0xce>
 8003344:	6805      	ldr	r5, [r0, #0]
 8003346:	600b      	str	r3, [r1, #0]
 8003348:	2d00      	cmp	r5, #0
 800334a:	da03      	bge.n	8003354 <_printf_i+0xc8>
 800334c:	232d      	movs	r3, #45	; 0x2d
 800334e:	426d      	negs	r5, r5
 8003350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003354:	485e      	ldr	r0, [pc, #376]	; (80034d0 <_printf_i+0x244>)
 8003356:	230a      	movs	r3, #10
 8003358:	e019      	b.n	800338e <_printf_i+0x102>
 800335a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800335e:	6805      	ldr	r5, [r0, #0]
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	bf18      	it	ne
 8003364:	b22d      	sxthne	r5, r5
 8003366:	e7ef      	b.n	8003348 <_printf_i+0xbc>
 8003368:	680b      	ldr	r3, [r1, #0]
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	1d18      	adds	r0, r3, #4
 800336e:	6008      	str	r0, [r1, #0]
 8003370:	0628      	lsls	r0, r5, #24
 8003372:	d501      	bpl.n	8003378 <_printf_i+0xec>
 8003374:	681d      	ldr	r5, [r3, #0]
 8003376:	e002      	b.n	800337e <_printf_i+0xf2>
 8003378:	0669      	lsls	r1, r5, #25
 800337a:	d5fb      	bpl.n	8003374 <_printf_i+0xe8>
 800337c:	881d      	ldrh	r5, [r3, #0]
 800337e:	4854      	ldr	r0, [pc, #336]	; (80034d0 <_printf_i+0x244>)
 8003380:	2f6f      	cmp	r7, #111	; 0x6f
 8003382:	bf0c      	ite	eq
 8003384:	2308      	moveq	r3, #8
 8003386:	230a      	movne	r3, #10
 8003388:	2100      	movs	r1, #0
 800338a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800338e:	6866      	ldr	r6, [r4, #4]
 8003390:	60a6      	str	r6, [r4, #8]
 8003392:	2e00      	cmp	r6, #0
 8003394:	bfa2      	ittt	ge
 8003396:	6821      	ldrge	r1, [r4, #0]
 8003398:	f021 0104 	bicge.w	r1, r1, #4
 800339c:	6021      	strge	r1, [r4, #0]
 800339e:	b90d      	cbnz	r5, 80033a4 <_printf_i+0x118>
 80033a0:	2e00      	cmp	r6, #0
 80033a2:	d04d      	beq.n	8003440 <_printf_i+0x1b4>
 80033a4:	4616      	mov	r6, r2
 80033a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80033aa:	fb03 5711 	mls	r7, r3, r1, r5
 80033ae:	5dc7      	ldrb	r7, [r0, r7]
 80033b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033b4:	462f      	mov	r7, r5
 80033b6:	42bb      	cmp	r3, r7
 80033b8:	460d      	mov	r5, r1
 80033ba:	d9f4      	bls.n	80033a6 <_printf_i+0x11a>
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10b      	bne.n	80033d8 <_printf_i+0x14c>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	07df      	lsls	r7, r3, #31
 80033c4:	d508      	bpl.n	80033d8 <_printf_i+0x14c>
 80033c6:	6923      	ldr	r3, [r4, #16]
 80033c8:	6861      	ldr	r1, [r4, #4]
 80033ca:	4299      	cmp	r1, r3
 80033cc:	bfde      	ittt	le
 80033ce:	2330      	movle	r3, #48	; 0x30
 80033d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033d8:	1b92      	subs	r2, r2, r6
 80033da:	6122      	str	r2, [r4, #16]
 80033dc:	f8cd a000 	str.w	sl, [sp]
 80033e0:	464b      	mov	r3, r9
 80033e2:	aa03      	add	r2, sp, #12
 80033e4:	4621      	mov	r1, r4
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff fee2 	bl	80031b0 <_printf_common>
 80033ec:	3001      	adds	r0, #1
 80033ee:	d14c      	bne.n	800348a <_printf_i+0x1fe>
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	b004      	add	sp, #16
 80033f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fa:	4835      	ldr	r0, [pc, #212]	; (80034d0 <_printf_i+0x244>)
 80033fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	680e      	ldr	r6, [r1, #0]
 8003404:	061f      	lsls	r7, r3, #24
 8003406:	f856 5b04 	ldr.w	r5, [r6], #4
 800340a:	600e      	str	r6, [r1, #0]
 800340c:	d514      	bpl.n	8003438 <_printf_i+0x1ac>
 800340e:	07d9      	lsls	r1, r3, #31
 8003410:	bf44      	itt	mi
 8003412:	f043 0320 	orrmi.w	r3, r3, #32
 8003416:	6023      	strmi	r3, [r4, #0]
 8003418:	b91d      	cbnz	r5, 8003422 <_printf_i+0x196>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	f023 0320 	bic.w	r3, r3, #32
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	2310      	movs	r3, #16
 8003424:	e7b0      	b.n	8003388 <_printf_i+0xfc>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	f043 0320 	orr.w	r3, r3, #32
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	2378      	movs	r3, #120	; 0x78
 8003430:	4828      	ldr	r0, [pc, #160]	; (80034d4 <_printf_i+0x248>)
 8003432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003436:	e7e3      	b.n	8003400 <_printf_i+0x174>
 8003438:	065e      	lsls	r6, r3, #25
 800343a:	bf48      	it	mi
 800343c:	b2ad      	uxthmi	r5, r5
 800343e:	e7e6      	b.n	800340e <_printf_i+0x182>
 8003440:	4616      	mov	r6, r2
 8003442:	e7bb      	b.n	80033bc <_printf_i+0x130>
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	6826      	ldr	r6, [r4, #0]
 8003448:	6960      	ldr	r0, [r4, #20]
 800344a:	1d1d      	adds	r5, r3, #4
 800344c:	600d      	str	r5, [r1, #0]
 800344e:	0635      	lsls	r5, r6, #24
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	d501      	bpl.n	8003458 <_printf_i+0x1cc>
 8003454:	6018      	str	r0, [r3, #0]
 8003456:	e002      	b.n	800345e <_printf_i+0x1d2>
 8003458:	0671      	lsls	r1, r6, #25
 800345a:	d5fb      	bpl.n	8003454 <_printf_i+0x1c8>
 800345c:	8018      	strh	r0, [r3, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	6123      	str	r3, [r4, #16]
 8003462:	4616      	mov	r6, r2
 8003464:	e7ba      	b.n	80033dc <_printf_i+0x150>
 8003466:	680b      	ldr	r3, [r1, #0]
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	600a      	str	r2, [r1, #0]
 800346c:	681e      	ldr	r6, [r3, #0]
 800346e:	6862      	ldr	r2, [r4, #4]
 8003470:	2100      	movs	r1, #0
 8003472:	4630      	mov	r0, r6
 8003474:	f7fc feb4 	bl	80001e0 <memchr>
 8003478:	b108      	cbz	r0, 800347e <_printf_i+0x1f2>
 800347a:	1b80      	subs	r0, r0, r6
 800347c:	6060      	str	r0, [r4, #4]
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	2300      	movs	r3, #0
 8003484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003488:	e7a8      	b.n	80033dc <_printf_i+0x150>
 800348a:	6923      	ldr	r3, [r4, #16]
 800348c:	4632      	mov	r2, r6
 800348e:	4649      	mov	r1, r9
 8003490:	4640      	mov	r0, r8
 8003492:	47d0      	blx	sl
 8003494:	3001      	adds	r0, #1
 8003496:	d0ab      	beq.n	80033f0 <_printf_i+0x164>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	079b      	lsls	r3, r3, #30
 800349c:	d413      	bmi.n	80034c6 <_printf_i+0x23a>
 800349e:	68e0      	ldr	r0, [r4, #12]
 80034a0:	9b03      	ldr	r3, [sp, #12]
 80034a2:	4298      	cmp	r0, r3
 80034a4:	bfb8      	it	lt
 80034a6:	4618      	movlt	r0, r3
 80034a8:	e7a4      	b.n	80033f4 <_printf_i+0x168>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4632      	mov	r2, r6
 80034ae:	4649      	mov	r1, r9
 80034b0:	4640      	mov	r0, r8
 80034b2:	47d0      	blx	sl
 80034b4:	3001      	adds	r0, #1
 80034b6:	d09b      	beq.n	80033f0 <_printf_i+0x164>
 80034b8:	3501      	adds	r5, #1
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	9903      	ldr	r1, [sp, #12]
 80034be:	1a5b      	subs	r3, r3, r1
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dcf2      	bgt.n	80034aa <_printf_i+0x21e>
 80034c4:	e7eb      	b.n	800349e <_printf_i+0x212>
 80034c6:	2500      	movs	r5, #0
 80034c8:	f104 0619 	add.w	r6, r4, #25
 80034cc:	e7f5      	b.n	80034ba <_printf_i+0x22e>
 80034ce:	bf00      	nop
 80034d0:	08003809 	.word	0x08003809
 80034d4:	0800381a 	.word	0x0800381a

080034d8 <memcpy>:
 80034d8:	440a      	add	r2, r1
 80034da:	4291      	cmp	r1, r2
 80034dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80034e0:	d100      	bne.n	80034e4 <memcpy+0xc>
 80034e2:	4770      	bx	lr
 80034e4:	b510      	push	{r4, lr}
 80034e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034ee:	4291      	cmp	r1, r2
 80034f0:	d1f9      	bne.n	80034e6 <memcpy+0xe>
 80034f2:	bd10      	pop	{r4, pc}

080034f4 <memmove>:
 80034f4:	4288      	cmp	r0, r1
 80034f6:	b510      	push	{r4, lr}
 80034f8:	eb01 0402 	add.w	r4, r1, r2
 80034fc:	d902      	bls.n	8003504 <memmove+0x10>
 80034fe:	4284      	cmp	r4, r0
 8003500:	4623      	mov	r3, r4
 8003502:	d807      	bhi.n	8003514 <memmove+0x20>
 8003504:	1e43      	subs	r3, r0, #1
 8003506:	42a1      	cmp	r1, r4
 8003508:	d008      	beq.n	800351c <memmove+0x28>
 800350a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800350e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003512:	e7f8      	b.n	8003506 <memmove+0x12>
 8003514:	4402      	add	r2, r0
 8003516:	4601      	mov	r1, r0
 8003518:	428a      	cmp	r2, r1
 800351a:	d100      	bne.n	800351e <memmove+0x2a>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003526:	e7f7      	b.n	8003518 <memmove+0x24>

08003528 <_free_r>:
 8003528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800352a:	2900      	cmp	r1, #0
 800352c:	d048      	beq.n	80035c0 <_free_r+0x98>
 800352e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003532:	9001      	str	r0, [sp, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f1a1 0404 	sub.w	r4, r1, #4
 800353a:	bfb8      	it	lt
 800353c:	18e4      	addlt	r4, r4, r3
 800353e:	f000 f8d3 	bl	80036e8 <__malloc_lock>
 8003542:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <_free_r+0x9c>)
 8003544:	9801      	ldr	r0, [sp, #4]
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	4615      	mov	r5, r2
 800354a:	b933      	cbnz	r3, 800355a <_free_r+0x32>
 800354c:	6063      	str	r3, [r4, #4]
 800354e:	6014      	str	r4, [r2, #0]
 8003550:	b003      	add	sp, #12
 8003552:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003556:	f000 b8cd 	b.w	80036f4 <__malloc_unlock>
 800355a:	42a3      	cmp	r3, r4
 800355c:	d90b      	bls.n	8003576 <_free_r+0x4e>
 800355e:	6821      	ldr	r1, [r4, #0]
 8003560:	1862      	adds	r2, r4, r1
 8003562:	4293      	cmp	r3, r2
 8003564:	bf04      	itt	eq
 8003566:	681a      	ldreq	r2, [r3, #0]
 8003568:	685b      	ldreq	r3, [r3, #4]
 800356a:	6063      	str	r3, [r4, #4]
 800356c:	bf04      	itt	eq
 800356e:	1852      	addeq	r2, r2, r1
 8003570:	6022      	streq	r2, [r4, #0]
 8003572:	602c      	str	r4, [r5, #0]
 8003574:	e7ec      	b.n	8003550 <_free_r+0x28>
 8003576:	461a      	mov	r2, r3
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b10b      	cbz	r3, 8003580 <_free_r+0x58>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d9fa      	bls.n	8003576 <_free_r+0x4e>
 8003580:	6811      	ldr	r1, [r2, #0]
 8003582:	1855      	adds	r5, r2, r1
 8003584:	42a5      	cmp	r5, r4
 8003586:	d10b      	bne.n	80035a0 <_free_r+0x78>
 8003588:	6824      	ldr	r4, [r4, #0]
 800358a:	4421      	add	r1, r4
 800358c:	1854      	adds	r4, r2, r1
 800358e:	42a3      	cmp	r3, r4
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	d1dd      	bne.n	8003550 <_free_r+0x28>
 8003594:	681c      	ldr	r4, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	4421      	add	r1, r4
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	e7d7      	b.n	8003550 <_free_r+0x28>
 80035a0:	d902      	bls.n	80035a8 <_free_r+0x80>
 80035a2:	230c      	movs	r3, #12
 80035a4:	6003      	str	r3, [r0, #0]
 80035a6:	e7d3      	b.n	8003550 <_free_r+0x28>
 80035a8:	6825      	ldr	r5, [r4, #0]
 80035aa:	1961      	adds	r1, r4, r5
 80035ac:	428b      	cmp	r3, r1
 80035ae:	bf04      	itt	eq
 80035b0:	6819      	ldreq	r1, [r3, #0]
 80035b2:	685b      	ldreq	r3, [r3, #4]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	bf04      	itt	eq
 80035b8:	1949      	addeq	r1, r1, r5
 80035ba:	6021      	streq	r1, [r4, #0]
 80035bc:	6054      	str	r4, [r2, #4]
 80035be:	e7c7      	b.n	8003550 <_free_r+0x28>
 80035c0:	b003      	add	sp, #12
 80035c2:	bd30      	pop	{r4, r5, pc}
 80035c4:	2000008c 	.word	0x2000008c

080035c8 <_malloc_r>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	1ccd      	adds	r5, r1, #3
 80035cc:	f025 0503 	bic.w	r5, r5, #3
 80035d0:	3508      	adds	r5, #8
 80035d2:	2d0c      	cmp	r5, #12
 80035d4:	bf38      	it	cc
 80035d6:	250c      	movcc	r5, #12
 80035d8:	2d00      	cmp	r5, #0
 80035da:	4606      	mov	r6, r0
 80035dc:	db01      	blt.n	80035e2 <_malloc_r+0x1a>
 80035de:	42a9      	cmp	r1, r5
 80035e0:	d903      	bls.n	80035ea <_malloc_r+0x22>
 80035e2:	230c      	movs	r3, #12
 80035e4:	6033      	str	r3, [r6, #0]
 80035e6:	2000      	movs	r0, #0
 80035e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ea:	f000 f87d 	bl	80036e8 <__malloc_lock>
 80035ee:	4921      	ldr	r1, [pc, #132]	; (8003674 <_malloc_r+0xac>)
 80035f0:	680a      	ldr	r2, [r1, #0]
 80035f2:	4614      	mov	r4, r2
 80035f4:	b99c      	cbnz	r4, 800361e <_malloc_r+0x56>
 80035f6:	4f20      	ldr	r7, [pc, #128]	; (8003678 <_malloc_r+0xb0>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b923      	cbnz	r3, 8003606 <_malloc_r+0x3e>
 80035fc:	4621      	mov	r1, r4
 80035fe:	4630      	mov	r0, r6
 8003600:	f000 f862 	bl	80036c8 <_sbrk_r>
 8003604:	6038      	str	r0, [r7, #0]
 8003606:	4629      	mov	r1, r5
 8003608:	4630      	mov	r0, r6
 800360a:	f000 f85d 	bl	80036c8 <_sbrk_r>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	d123      	bne.n	800365a <_malloc_r+0x92>
 8003612:	230c      	movs	r3, #12
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	4630      	mov	r0, r6
 8003618:	f000 f86c 	bl	80036f4 <__malloc_unlock>
 800361c:	e7e3      	b.n	80035e6 <_malloc_r+0x1e>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	1b5b      	subs	r3, r3, r5
 8003622:	d417      	bmi.n	8003654 <_malloc_r+0x8c>
 8003624:	2b0b      	cmp	r3, #11
 8003626:	d903      	bls.n	8003630 <_malloc_r+0x68>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	441c      	add	r4, r3
 800362c:	6025      	str	r5, [r4, #0]
 800362e:	e004      	b.n	800363a <_malloc_r+0x72>
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	42a2      	cmp	r2, r4
 8003634:	bf0c      	ite	eq
 8003636:	600b      	streq	r3, [r1, #0]
 8003638:	6053      	strne	r3, [r2, #4]
 800363a:	4630      	mov	r0, r6
 800363c:	f000 f85a 	bl	80036f4 <__malloc_unlock>
 8003640:	f104 000b 	add.w	r0, r4, #11
 8003644:	1d23      	adds	r3, r4, #4
 8003646:	f020 0007 	bic.w	r0, r0, #7
 800364a:	1ac2      	subs	r2, r0, r3
 800364c:	d0cc      	beq.n	80035e8 <_malloc_r+0x20>
 800364e:	1a1b      	subs	r3, r3, r0
 8003650:	50a3      	str	r3, [r4, r2]
 8003652:	e7c9      	b.n	80035e8 <_malloc_r+0x20>
 8003654:	4622      	mov	r2, r4
 8003656:	6864      	ldr	r4, [r4, #4]
 8003658:	e7cc      	b.n	80035f4 <_malloc_r+0x2c>
 800365a:	1cc4      	adds	r4, r0, #3
 800365c:	f024 0403 	bic.w	r4, r4, #3
 8003660:	42a0      	cmp	r0, r4
 8003662:	d0e3      	beq.n	800362c <_malloc_r+0x64>
 8003664:	1a21      	subs	r1, r4, r0
 8003666:	4630      	mov	r0, r6
 8003668:	f000 f82e 	bl	80036c8 <_sbrk_r>
 800366c:	3001      	adds	r0, #1
 800366e:	d1dd      	bne.n	800362c <_malloc_r+0x64>
 8003670:	e7cf      	b.n	8003612 <_malloc_r+0x4a>
 8003672:	bf00      	nop
 8003674:	2000008c 	.word	0x2000008c
 8003678:	20000090 	.word	0x20000090

0800367c <_realloc_r>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	4607      	mov	r7, r0
 8003680:	4614      	mov	r4, r2
 8003682:	460e      	mov	r6, r1
 8003684:	b921      	cbnz	r1, 8003690 <_realloc_r+0x14>
 8003686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800368a:	4611      	mov	r1, r2
 800368c:	f7ff bf9c 	b.w	80035c8 <_malloc_r>
 8003690:	b922      	cbnz	r2, 800369c <_realloc_r+0x20>
 8003692:	f7ff ff49 	bl	8003528 <_free_r>
 8003696:	4625      	mov	r5, r4
 8003698:	4628      	mov	r0, r5
 800369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800369c:	f000 f830 	bl	8003700 <_malloc_usable_size_r>
 80036a0:	42a0      	cmp	r0, r4
 80036a2:	d20f      	bcs.n	80036c4 <_realloc_r+0x48>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4638      	mov	r0, r7
 80036a8:	f7ff ff8e 	bl	80035c8 <_malloc_r>
 80036ac:	4605      	mov	r5, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0f2      	beq.n	8003698 <_realloc_r+0x1c>
 80036b2:	4631      	mov	r1, r6
 80036b4:	4622      	mov	r2, r4
 80036b6:	f7ff ff0f 	bl	80034d8 <memcpy>
 80036ba:	4631      	mov	r1, r6
 80036bc:	4638      	mov	r0, r7
 80036be:	f7ff ff33 	bl	8003528 <_free_r>
 80036c2:	e7e9      	b.n	8003698 <_realloc_r+0x1c>
 80036c4:	4635      	mov	r5, r6
 80036c6:	e7e7      	b.n	8003698 <_realloc_r+0x1c>

080036c8 <_sbrk_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4d06      	ldr	r5, [pc, #24]	; (80036e4 <_sbrk_r+0x1c>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	f000 f81e 	bl	8003714 <_sbrk>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_sbrk_r+0x1a>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_sbrk_r+0x1a>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	20000108 	.word	0x20000108

080036e8 <__malloc_lock>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__malloc_lock+0x8>)
 80036ea:	f000 b811 	b.w	8003710 <__retarget_lock_acquire_recursive>
 80036ee:	bf00      	nop
 80036f0:	20000110 	.word	0x20000110

080036f4 <__malloc_unlock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__malloc_unlock+0x8>)
 80036f6:	f000 b80c 	b.w	8003712 <__retarget_lock_release_recursive>
 80036fa:	bf00      	nop
 80036fc:	20000110 	.word	0x20000110

08003700 <_malloc_usable_size_r>:
 8003700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003704:	1f18      	subs	r0, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfbc      	itt	lt
 800370a:	580b      	ldrlt	r3, [r1, r0]
 800370c:	18c0      	addlt	r0, r0, r3
 800370e:	4770      	bx	lr

08003710 <__retarget_lock_acquire_recursive>:
 8003710:	4770      	bx	lr

08003712 <__retarget_lock_release_recursive>:
 8003712:	4770      	bx	lr

08003714 <_sbrk>:
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <_sbrk+0x14>)
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	4602      	mov	r2, r0
 800371a:	b909      	cbnz	r1, 8003720 <_sbrk+0xc>
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <_sbrk+0x18>)
 800371e:	6019      	str	r1, [r3, #0]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	4402      	add	r2, r0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	4770      	bx	lr
 8003728:	20000094 	.word	0x20000094
 800372c:	20000118 	.word	0x20000118

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
